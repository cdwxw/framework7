{
    "msg": "成功",
    "status": 0,
    "data": {
        "data": {
            "question": [
                {
                    "index": 1,
                    "belong_page": 1,
                    "question_id": 43335,
                    "question_title": "<p><br/></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"><span style=\"font-family:楷体\">企业应用集成通过采用多种集成模式构建统一标准的基础平台，将具有不同功能和目的且独立运行的企业信息系统联合起来。其中，面向</span>______的集成模式强调处理不同应用系统之间的交互逻辑，与核心业务逻辑相分离，并通过不同应用系统之间的协作共同完成某项业务功能。</span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43335,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"><span style=\"font-family:楷体\">企业应用集成通过采用多种集成模式，构建统一标准的基础平台，将具有不同功能和目的而又独立运行的企业信息系统联合起来。目前市场上主流的集成模式有</span>3种：面向信息的集成、面向过程的集成和面向服务的集成。其中面向过程的集成模式强调处理不同应用系统之间的交互逻辑，与核心业务逻辑相分离，并通过不同应用系统之间的协作共同完成某项业务功能。</span></p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 数据 ",
                        " 接口 ",
                        " 过程 ",
                        " 界面 "
                    ]
                },
                {
                    "index": 2,
                    "belong_page": 1,
                    "question_id": 43336,
                    "question_title": "<p><br/></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"><span style=\"font-family:楷体\">某公司欲开发一个门户系统，该系统以商业流程和企业应用为核心，将商业流程中不同的功能模块通过门户集成在一起，以提高公司的集中贸易能力、协同能力和信息管理能力。根据这种需求，采用企业</span>______门户解决方案最为合适。</span><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43336,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"><span style=\"font-family:楷体\">按照实际应用领域，企业门户可以划分为以下四类：</span></span><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"></span></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\">①企业网站——功能简单，注重信息的单向传送，忽视用户与企业间、用户相互之间的信息互动。面向特定的使用人群，为企业服务，可以被看作是EP发展的雏形。</span><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"></span></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\">②企业信息门户——在Internet环境下，把各种应用系统、数据资源和互联网资源统一集成到EP之下，根据每个用户使用特点和角色的不同，形成个性化的应用界面，并通过对事件和消息的处理传输把用户有机地联系在一起。</span><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"></span></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\">③企业知识门户——是企业员工日常工作所涉及相关主题内容的“总店”。企业员工可以通过EKP方便地了解当天的最新消息、工作内容、完成这些工作所需的知识等。可以实时地与工作团队中的其他成员取得联系，寻找到能够提供帮助的专家或者快速地连接到相关的门户。</span><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"></span></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\">④企业应用门户——是对企业业务流程的集成。它以业务流程和企业应用为核心，把业务流程中功能不同的应用模块通过门户技术集成在一起。可以把EAP看成是企业信息系统的集成界面。企业员工和合作伙伴可以通过EAP访问相应的应用系统，实现移动办公、进行网上交易等。</span><span style=\"margin: 0px; font-family: 楷体; font-size: 11pt;\"></span></p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 信息 ",
                        " 知识 ",
                        " 应用 ",
                        " 垂直 "
                    ]
                },
                {
                    "index": 3,
                    "belong_page": 1,
                    "question_id": 43355,
                    "question_title": "<p><br/></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 宋体;\"><span style=\"font-family:宋体\">关于数据访问中间件的作用，下列说法错误的是</span> <span style=\"font-family:宋体\">（</span> &nbsp;<span style=\"font-family:宋体\">）</span> <span style=\"font-family:宋体\">。</span></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43355,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 宋体;\">A<span style=\"font-family:宋体\">、</span><span style=\"font-family:Times New Roman\">B</span><span style=\"font-family:宋体\">、</span><span style=\"font-family:Times New Roman\">C</span><span style=\"font-family:宋体\">均为数据访问中间件的作用，</span><span style=\"font-family:Times New Roman\">D</span><span style=\"font-family:宋体\">是远程过程调用中间件。</span></span><span style=\"margin: 0px; font-family: 宋体;\"></span></p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 为了建立数据应用资源互操作的模式，对异构环境下的数据库和文件系统实现联接 ",
                        " 用来屏蔽掉各种平台及协议之间的差异，进行相互通信，实现应用程序之间的协同 ",
                        " 在分布、异构的网络计算环境中，可以将各种分布对象有机地结合在一起，完成系统的快速集成，实现对象重用 ",
                        " 使调用远端的过程像调用本地过程一样<br/> "
                    ]
                },
                {
                    "index": 4,
                    "belong_page": 1,
                    "question_id": 43527,
                    "question_title": "<p>不属于调用/返回风格的架构是（ ）。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43527,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查经典体系结构风格分类知识。<br/>调用返回体系结构风格包括主程序-子程序风格，面向对象风格，层次风格三个子风格分类。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 主程序/子程序 ",
                        " 数据抽象和面向对象 ",
                        " 层次结构 ",
                        " 管道/过滤器 "
                    ]
                },
                {
                    "index": 5,
                    "belong_page": 1,
                    "question_id": 46862,
                    "question_title": "<p>ERP中的企业资源包括（）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46862,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查企业资源的基本概念。</p><p>ERP中的企业资源包括企业的“三流”资源，即物流资源、资金流资源和信息流资源。ERP实际上就是对这“三流”资源进行全面集成管理的管理信息系统。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 物流、资金流和信息流 ",
                        " 物流、工作流和信息流 ",
                        " 物流、资金流和工作流 ",
                        " 资金流、工作流和信息流 "
                    ]
                },
                {
                    "index": 6,
                    "belong_page": 1,
                    "question_id": 46865,
                    "question_title": "<p>CRM是一套先进的管理思想及技术手段，它通过将（ ）进行有效的整合，最终为企业涉及到的各个领域提供了集成环境。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46865,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查企业信息化的基本知识。</p><p>CRM是一套先进的管理思想及技术手段，它通过将人力资源、业务流程与专业技术进行有效的整合，最终为企业涉及到客户或者消费者的各个领域提供了完美的集成，使得企业可以更低成本、更高效率地满足客户的需求，并与客户建立起基于学习性关系基础上的一对一营销模式，从而让企业可以最大程度提高客户满意度和忠诚度。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 员工资源、客户资源与管理技术 ",
                        " 销售资源、信息资源与商业智能 ",
                        " 销售管理、市场管理与服务管理 ",
                        " 人力资源、业务流程与专业技术 "
                    ]
                },
                {
                    "index": 7,
                    "belong_page": 1,
                    "question_id": 46866,
                    "question_title": "<p>CRM系统的四个主要模块包括（）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46866,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>CRM系统的主要模块包括销售自动化、营销自动化、客户服务与支持、商业智能。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 电子商务支持、呼叫中心、移动设备支持、数据分析 ",
                        " 信息分析、网络应用支持、客户信息仓库、工作流集成 ",
                        " 销售自动化、营销自动化、客户服务与支持、商业智能 ",
                        " 销售管理、市场管理、服务管理、现场服务管理 "
                    ]
                },
                {
                    "index": 8,
                    "belong_page": 1,
                    "question_id": 46867,
                    "question_title": "<p>企业信息化程度是国家信息化建设的基础和关键，企业信息化方法不包括（）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46867,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查企业信息化的基本方法。</p><p>企业信息化程度是国家信息化建设的基础和关键，企业信息化就是企业利用现代信息技术，通过信息资源的深入开发和广泛利用，实现企业生产过程的自动化、管理方式的网络化、决策支持的智能化和商务运营的电子化，不断提高生产、经营、管理、决策的效率和水平，进而提高企业经济效益和企业竞争力的过程。企业信息化方法主要包括业务流程重构、核心业务应用、信息系统建设、主题数据库、资源管理、人力资本投资方法。企业战略规划是指依据企业外部环境和自身条件的状况及其变化来制定和实施战略，并根据对实施过程与结果的评价和反馈来调整，制定新战略的过程。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 业务流程重组 ",
                        " 组织机构变革 ",
                        " 供应链管理 ",
                        " 人力资本投资 "
                    ]
                },
                {
                    "index": 9,
                    "belong_page": 1,
                    "question_id": 46868,
                    "question_title": "<p>企业信息资源集成管理的前提是对企业（）的集成。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46868,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>集成管理是企业信息资源管理的主要内容之一。实行企业信息资源集成的前提是对企业历史上形成的企业信息功能的集成，其核心是对企业内部和外部信息流的集成，其实施的基础是各种信息手段的集成。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 信息功能 ",
                        " 信息设施 ",
                        " 信息活动 ",
                        " 信息处理 "
                    ]
                },
                {
                    "index": 10,
                    "belong_page": 1,
                    "question_id": 46869,
                    "question_title": "<p>企业信息资源集成管理的核心是对企业（）的集成。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46869,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>通过集成管理实现企业信息系统各要素的优化组合，使信息系统各要素之间形成强大的协同作用，从而最大限度地放大企业信息的功能，实现企业可持续发展的目的。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 业务流 ",
                        " 内部信息流 ",
                        " 外部信息流 ",
                        " 内部和外部信息流 "
                    ]
                },
                {
                    "index": 11,
                    "belong_page": 1,
                    "question_id": 49841,
                    "question_title": "<p>用于管理信息系统规划的方法有很多，其中（请作答此空 ）将整个过程看成是一个&quot;信息集合&quot;，并将组织的战略目标转变为管理信息系统的战略目标。（）通过自上而下地识别企业目标、企业过程和数据，然后对数据进行分析，自下而上地设计信息系统。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49841,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>用于管理信息系统规划的方法很多，主要是关键成功因素法（Critical Success Factors，CSF）、战略目标集转化法（Strategy Set Transformation, SST）和企业系统规划法（Business System Planning, BSP）。其它还有企业信息分析与集成技术（BIAIT）、产出／方法分析（E/MA）、投资回收法（ROI）、征费法、零线预算法、阶石法等。用得最多的是前面三种。</p><p>1. 关键成功因素法（CSF）</p><p>在现行系统中，总存在着多个变量影响系统目标的实现，其中若干个因素是关键的和主要的（即关键成功因素）。通过对关键成功因素的识别，找出实现目标所需的关键信息集合，从而确定系统开发的优先次序。</p><p>关键成功因素来自于组织的目标，通过组织的目标分解和关键成功因素识别、性能指标识别，一直到产生数据字典。</p><p>识别关键成功因素，就是要识别联系于组织目标的主要数据类型及其关系。不同的组织的关键成功因素不同，不同时期关键成功因素也不相同。当在一个时期内的关键成功因素解决后，新的识别关键成功因素又开始。</p><p>关键成功因素法能抓住主要矛盾，使目标的识别突出重点。由于经理们比较熟悉这种方法，使用这种方法所确定的目标，因而经理们乐于努力去实现。该方法最有利于确定企业的管理目标。</p><p>2.战略目标集转化法（SST）</p><p>把整个战略目标看成是一个&quot;信息集合&quot;，由使命、目标、战略等组成，管理信息系统的规划过程即是把组织的战略目标转变成为管理信息系统的战略目标的过程。</p><p>战略目标集转化法从另一个角度识别管理目标，它反映了各种人的要求，而且给出了按这种要求的分层，然后转化为信息系统目标的结构化方法。它能保证目标比较全面，疏漏较少，但它在突出重点方面不如关键成功因素法。</p><p>3. 企业系统规划法（BSP）</p><p>信息支持企业运行。通过自上而下地识别系统目标、企业过程和数据，然后对数据进行分析，自下而上地设计信息系统。该管理信息系统支持企业目标的实现，表达所有管理层次的要求，向企业提供一致性信息，对组织机构的变动具有适应性。</p><p>企业系统规划法虽然也首先强调目标，但它没有明显的目标导引过程。它通过识别企业&quot;过程&quot;引出了系统目标，企业目标到系统目标的转化是通过企业过程/数据类等矩阵的分析得到的。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 关键成功因素法 ",
                        " 战略目标集转化法 ",
                        " 征费法 ",
                        " 零线预算法 "
                    ]
                },
                {
                    "index": 12,
                    "belong_page": 1,
                    "question_id": 49842,
                    "question_title": "<p>用于管理信息系统规划的方法有很多，其中（）将整个过程看成是一个&quot;信息集合&quot;，并将组织的战略目标转变为管理信息系统的战略目标。（请作答此空 ）通过自上而下地识别企业目标、企业过程和数据，然后对数据进行分析，自下而上地设计信息系统。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49842,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>用于管理信息系统规划的方法很多，主要是关键成功因素法（Critical Success Factors，CSF）、战略目标集转化法（Strategy Set Transformation, SST）和企业系统规划法（Business System Planning, BSP）。其它还有企业信息分析与集成技术（BIAIT）、产出／方法分析（E/MA）、投资回收法（ROI）、征费法、零线预算法、阶石法等。用得最多的是前面三种。</p><p>1. 关键成功因素法（CSF）</p><p>在现行系统中，总存在着多个变量影响系统目标的实现，其中若干个因素是关键的和主要的（即关键成功因素）。通过对关键成功因素的识别，找出实现目标所需的关键信息集合，从而确定系统开发的优先次序。</p><p>关键成功因素来自于组织的目标，通过组织的目标分解和关键成功因素识别、性能指标识别，一直到产生数据字典。</p><p>识别关键成功因素，就是要识别联系于组织目标的主要数据类型及其关系。不同的组织的关键成功因素不同，不同时期关键成功因素也不相同。当在一个时期内的关键成功因素解决后，新的识别关键成功因素又开始。</p><p>关键成功因素法能抓住主要矛盾，使目标的识别突出重点。由于经理们比较熟悉这种方法，使用这种方法所确定的目标，因而经理们乐于努力去实现。该方法最有利于确定企业的管理目标。</p><p>2.战略目标集转化法（SST）</p><p>把整个战略目标看成是一个&quot;信息集合&quot;，由使命、目标、战略等组成，管理信息系统的规划过程即是把组织的战略目标转变成为管理信息系统的战略目标的过程。</p><p>战略目标集转化法从另一个角度识别管理目标，它反映了各种人的要求，而且给出了按这种要求的分层，然后转化为信息系统目标的结构化方法。它能保证目标比较全面，疏漏较少，但它在突出重点方面不如关键成功因素法。</p><p>3. 企业系统规划法（BSP）</p><p>信息支持企业运行。通过自上而下地识别系统目标、企业过程和数据，然后对数据进行分析，自下而上地设计信息系统。该管理信息系统支持企业目标的实现，表达所有管理层次的要求，向企业提供一致性信息，对组织机构的变动具有适应性。</p><p>企业系统规划法虽然也首先强调目标，但它没有明显的目标导引过程。它通过识别企业&quot;过程&quot;引出了系统目标，企业目标到系统目标的转化是通过企业过程/数据类等矩阵的分析得到的。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 企业信息分析与集成法 ",
                        " 投资回收法 ",
                        " 企业系统规划法 ",
                        " 阶石法 "
                    ]
                },
                {
                    "index": 13,
                    "belong_page": 1,
                    "question_id": 49939,
                    "question_title": "<p>基于JavaEE平台的基础功能服务构建应用系统时，（ &nbsp;）可用来集成遗产系统。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49939,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>遗产系统可以由JCA、JMS和Java IDL构成。</p><p>JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。</p><p>JCA 标准化连接子是由 J2EE &nbsp;1.3 首先提出的，它位于 J2EE 应用服务器和企业信息系统（EIS）之间，比如数据库管理、企业资源规划（ERP）、企业资产管理（EAM）和客户关系管理（CRM）系统。不是用 Java 开发的企业 应用或者在J2EE框架内的应用都可以通过JCA 连接。JCA 是在javax.resource 包和它的子包（cci, &nbsp;spi 和 spi.security）中定义的。（JCA 的缩写形式也用于 Java cryptography API 的缩写。）</p><p>JMS 是 Java 对消息系统的访问机制，但它本身并不实现消息。JMS 支持点对点分发的消息队列，也支持多个目标订阅的消息主题。当消息发布给一个主题的适合，消息就会发送给所有那个主题的订阅者。 JMS 支持各种消息类型（二进制、流、名－值表、序列化的对象和文本）。通过声明与 SQL 的WHERE 相近的句段，可以建立消息的过滤器。</p><p>Java IDL即idltojava编译器就是一个ORB，可用来在Java语言中定义、实现和访问CORBA对象。Java IDL支持的是一个瞬间的CORBA对象，即在对象服务器处理过程中有效。实际上，Java IDL的ORB是一个类库而已，并不是一个完整的平台软件，但它对Java IDL应用系统和其他CORBA应用系统之间提供了很好的底层通信支持，实现了OMG定义的ORB基本功能。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " JDBC、JCA和Java IDL ",
                        " JDBC、JCA和JMS ",
                        " JDBC、JMS和Java IDL ",
                        " JCA、JMS和Java IDL "
                    ]
                },
                {
                    "index": 14,
                    "belong_page": 1,
                    "question_id": 49946,
                    "question_title": "<p>某公司拟为某种新型可编程机器人开发相应的编译器。该编译过程包括词法分析、语法分析、语义分析和代码生成四个阶段，每个阶段产生的结果作为下一个阶段的输入，且需独立存储。针对上述描述，该集成开发环境应采用（ &nbsp;）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49946,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>在管道和过滤器软件体系结构中,每个模块都有一组输入和一组输出。每个模块从它的输入端接收输入数据流,在其内部经过处理后,按照标准的顺序,将结果数据流送到输出端,以达到传递一组完整的计算结果实例的目的。它最典型的应用是在编译系统。一个普通的编译系统包括词法分析器,语法分析器,语义分析与中间代码生成器,优化器,目标代码生成器等一系列对源程序进行处理的过程。题干描述适合管道-过滤器模式。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 管道-过滤器 ",
                        " 数据仓储 ",
                        " 主程序-子程序 ",
                        " 解释器 "
                    ]
                },
                {
                    "index": 15,
                    "belong_page": 1,
                    "question_id": 63633,
                    "question_title": "<p>软件开发环境应支持多种集成机制。其中，（请作答此空）用于存储与系统开发有关的信息，并支持信息的交流与共享； （　）是实现过程集成和控制集成的基础。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63633,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件开发环境（Software Development Environment，SDE）是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。</p><p>软件开发环境应支持多种集成机制，例如，平台集成、数据集成、界面集成、控制集成和过程集成等。软件开发环境应支持小组工作方式，并为其提供配置管理，环境的服务可用于支持各种软件开发活动，包括分析、设计、编程、调试和文档等。</p><p>较完善的软件开发环境通常具有多种功能，例如，软件开发的一致性与完整性维护，配置管理及版本控制，数据的多种表示形式及其在不同形式之间的自动转换，信息的自动检索与更新，项目控制和管理，以及对开发方法学的支持。软件开发环境具有集成性、开放性、可裁减性、数据格式一致性、风格统一的用户界面等特性，因而能大幅度提高软件生产率。</p><p>集成机制根据功能的不同，可划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。</p><p>（1）环境信息库。环境信息库是软件开发环境的核心，用以存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如，分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，例如，文档模板、系统配置、过程模型和可复用构件等。</p><p>（2）过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成是按照具体软件开发过程的要求进行工具的选择与组合，控制集成使各工具之间进行并行通信和协同工作。</p><p>（3）环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户的学习负担的保证。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 算法模型库 ",
                        " 环境信息库 ",
                        " 信息模型库 ",
                        " 用户界面库 "
                    ]
                },
                {
                    "index": 16,
                    "belong_page": 1,
                    "question_id": 63634,
                    "question_title": "<p>软件开发环境应支持多种集成机制。其中，（　）用于存储与系统开发有关的信息，并支持信息的交流与共享； （请作答此空）是实现过程集成和控制集成的基础。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63634,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件开发环境（Software Development Environment，SDE）是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。</p><p>软件开发环境应支持多种集成机制，例如，平台集成、数据集成、界面集成、控制集成和过程集成等。软件开发环境应支持小组工作方式，并为其提供配置管理，环境的服务可用于支持各种软件开发活动，包括分析、设计、编程、调试和文档等。</p><p>较完善的软件开发环境通常具有多种功能，例如，软件开发的一致性与完整性维护，配置管理及版本控制，数据的多种表示形式及其在不同形式之间的自动转换，信息的自动检索与更新，项目控制和管理，以及对开发方法学的支持。软件开发环境具有集成性、开放性、可裁减性、数据格式一致性、风格统一的用户界面等特性，因而能大幅度提高软件生产率。</p><p>集成机制根据功能的不同，可划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。</p><p>（1）环境信息库。环境信息库是软件开发环境的核心，用以存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如，分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，例如，文档模板、系统配置、过程模型和可复用构件等。</p><p>（2）过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成是按照具体软件开发过程的要求进行工具的选择与组合，控制集成使各工具之间进行并行通信和协同工作。</p><p>（3）环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户的学习负担的保证。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 工作流与日志服务器 ",
                        " 进程通信与数据共享服务器 ",
                        " 过程控制与消息服务器 ",
                        " 同步控制与恢复服务器 "
                    ]
                },
                {
                    "index": 17,
                    "belong_page": 1,
                    "question_id": 103128,
                    "question_title": "（）中间件保证系统能在不同平台之间通信，实现分布式系统中可靠的、高效的、实时的跨平台数据传输。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 103128,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "通信处理（消息）中间件。正如，安装红绿灯，设立交通管理机构，制定出交通规则，才能保证道路交通畅通一样，在分布式系统中，人们要建网和制定出通信协议，以保证系统能在不同平台之间通信，实现分布式系统中可靠的、高效的、实时的跨平台数据传输，这类中间件称为消息中间件，也是市面上销售额最大的中间件产品。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 数据管理中间件 ",
                        " 消息中间件 ",
                        " WEB服务中间件 ",
                        " 事务处理中间件 "
                    ]
                },
                {
                    "index": 18,
                    "belong_page": 1,
                    "question_id": 103129,
                    "question_title": "<p>（）中间件系统可以使大量事务在多台应用服务器上能实时并发运行，并具有监视和调度整个系统的功能进行负载平衡的调度。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 103129,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "事务处理（交易）中间件。正如城市交通中要运行各种运载汽车，以此来完成日常的运载，同时随时监视汽车运行，在出现故障时及时排堵保畅。在分布式事务处理系统中，经常要处理大量事务，特别是 OLTP 中，每项事务常常要多台服务器上的程序按顺序协调完成，一旦中间发生某种故障，不但要完成恢复工作，而且要自动切换系统，达到系统永不停机，实现高可靠性运行。要使大量事务在多台应用服务器上能实时并发运行，并进行负载平衡的调度，实现与昂贵的可靠性机和大型计算机系统同等的功能，为了实现这个目标，要求中间件系统具有监视和调度整个系统的功能。BEA 的 Tuxedo 由此而著名，它成为增长率最高的厂商。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 数据管理中间件 ",
                        " 消息中间件 ",
                        " WEB服务中间件 ",
                        " 事务处理中间件 "
                    ]
                },
                {
                    "index": 19,
                    "belong_page": 1,
                    "question_id": 103130,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（请作答此空）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 103130,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ]
                },
                {
                    "index": 20,
                    "belong_page": 1,
                    "question_id": 103132,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（请作答此空）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 103132,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 模型 ",
                        " 控制器 ",
                        " 视图 ",
                        " 处理器 "
                    ]
                },
                {
                    "index": 21,
                    "belong_page": 1,
                    "question_id": 208402,
                    "question_title": "以下关于软件中间件的叙述，错误的是（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208402,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。</p><p>软件中间件的作用是为处于自己上层的应用软件提供运行与开发的环境，帮助用户开发和集成应用软件。它不仅仅要实现互连，还要实现应用之间的互操作。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 中间件通过标准接口实现与应用程序的关联，提供特定功能的服务 ",
                        " 使用中间件可以提高应用软件可移植性 ",
                        " 使用中间件将增加应用软件设计的复杂度 ",
                        " 使用中间件有助于提高开发效率 "
                    ]
                },
                {
                    "index": 22,
                    "belong_page": 1,
                    "question_id": 208403,
                    "question_title": "以下关于嵌入式系统开发的叙述，正确的是（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208403,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>在嵌入式系统开发中，由于嵌入式设备不具备足够的处理器能力和存储空间，程序开发一般用PC(宿主机)来完成，然后将可执行文件下载到嵌入式系统(目标机)中运行。</p><p>当宿主机与目标机的机器指令不同时，就需要交叉工具链(指编译、汇编、链接等一整套工具)。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 宿主机与目标机之间只需要建立逻辑连接 ",
                        " 宿主机与目标机之间只能采用串口通信方式 ",
                        " 在宿主机上必须采用交叉编译器来生成目标机的可执行代码 ",
                        " 调试器与被调试程序必须安装在同一台机器上 "
                    ]
                },
                {
                    "index": 23,
                    "belong_page": 1,
                    "question_id": 208478,
                    "question_title": "在嵌入式系统设计中，用来进行CPU调试的常用接口是（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208478,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>PCI是一种局部总线标准，它是在CPU和原来的系统总线之间插入的一级总线，具体由一个桥接电路实现对这一层的管理，并实现上下之间的接口以协调数据的传送。</p><p>JTAG是一个调试接口，用来供开发人员调试CPU的工作状态。JTAG软件通过该接口控制CPU来调试CPU以及读写Flash。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " PCI接口 ",
                        " USB接口 ",
                        " 网络接口 ",
                        " JTAG接口 "
                    ]
                },
                {
                    "index": 24,
                    "belong_page": 1,
                    "question_id": 281321,
                    "question_title": "<p>某服务器软件系统对可用性(Availability)、性能(Performance)和可修改性(Modifiability)的要求较高，（ ）设计策略能提高该系统的可用性，（ ）设计策略能够提高该系统的性能，（ ）设计策略能够提高该系统的可修改性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281320,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "本题主要考查质量属性以及实现质量属性的一般策略，不同策略主要针对一个或多个软件质量属性，其中Ping/Echo主要提高系统的可用性；限制访问主要提高系统的安全性；运行时注册主要提高系统的可修改性；接口．实现分离主要提高系统的可修改性；主动冗余提高系统的可靠性；队列调度主要提高系统的性能；信息隐藏主要提高系统的可修改性；记录．回放主要提高系统的可测试性，等等。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "Ping/Echo",
                        "限制访问",
                        "运行时注册",
                        "接口-实现分离"
                    ]
                },
                {
                    "index": 25,
                    "belong_page": 1,
                    "question_id": 281322,
                    "question_title": "<p>某服务器软件系统对可用性(Availability)、性能(Performance)和可修改性(Modifiability)的要求较高，（ ）设计策略能提高该系统的可用性，（ ）设计策略能够提高该系统的性能，（ ）设计策略能够提高该系统的可修改性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281320,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "本题主要考查质量属性以及实现质量属性的一般策略，不同策略主要针对一个或多个软件质量属性，其中Ping/Echo主要提高系统的可用性；限制访问主要提高系统的安全性；运行时注册主要提高系统的可修改性；接口．实现分离主要提高系统的可修改性；主动冗余提高系统的可靠性；队列调度主要提高系统的性能；信息隐藏主要提高系统的可修改性；记录．回放主要提高系统的可测试性，等等。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "分层结构",
                        "事务机制",
                        "主动冗余",
                        "队列调度"
                    ]
                },
                {
                    "index": 26,
                    "belong_page": 1,
                    "question_id": 281323,
                    "question_title": "<p>某服务器软件系统对可用性(Availability)、性能(Performance)和可修改性(Modifiability)的要求较高，（ ）设计策略能提高该系统的可用性，（ ）设计策略能够提高该系统的性能，（ ）设计策略能够提高该系统的可修改性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281320,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "本题主要考查质量属性以及实现质量属性的一般策略，不同策略主要针对一个或多个软件质量属性，其中Ping/Echo主要提高系统的可用性；限制访问主要提高系统的安全性；运行时注册主要提高系统的可修改性；接口．实现分离主要提高系统的可修改性；主动冗余提高系统的可靠性；队列调度主要提高系统的性能；信息隐藏主要提高系统的可修改性；记录．回放主要提高系统的可测试性，等等。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "信息隐藏",
                        "记录/回放",
                        "任务模型",
                        "回滚"
                    ]
                },
                {
                    "index": 27,
                    "belong_page": 1,
                    "question_id": 281325,
                    "question_title": "<p>正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中（ ）是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。“改变加密的级别可能会对安全性和性能都产生显著的影响”，这是一个对系统（ ）的描述。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281324,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "本题主要考查软件架构评价的理解和应用。正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中敏感点是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。系统权衡点会影响一个或多个属性，并对于多个属性来说都是敏感点。基于该定义，可以看出“改变加密的级别可能会对安全性和性能都产生显著的影响”正是一个对系统权衡点的描述。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "风险点",
                        "非风险点",
                        "敏感点",
                        "权衡点"
                    ]
                },
                {
                    "index": 28,
                    "belong_page": 1,
                    "question_id": 281326,
                    "question_title": "<p>正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中（ ）是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。“改变加密的级别可能会对安全性和性能都产生显著的影响”，这是一个对系统（ ）的描述。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281324,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "本题主要考查软件架构评价的理解和应用。正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中敏感点是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。系统权衡点会影响一个或多个属性，并对于多个属性来说都是敏感点。基于该定义，可以看出“改变加密的级别可能会对安全性和性能都产生显著的影响”正是一个对系统权衡点的描述。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "风险点",
                        "非风险点",
                        "敏感点",
                        "权衡点"
                    ]
                },
                {
                    "index": 29,
                    "belong_page": 1,
                    "question_id": 281330,
                    "question_title": "<p>软件架构为软件系统提供了一个结构、行为和属性的高级抽象模式。“4+1”视图模型是指用5个视图组成的模型来描述软件架构。其中，______描述了设计的并发和同步特征，支持系统的运行特性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281330,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>“4+1”视图模型用5个视图组成的模型来描述软件架构。该模型包含5个主要视图及其实现的功能，如下表所示。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200912/1599884721468206.jpg\" title=\"1599884721468206.jpg\" alt=\"1.jpg\"/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 物理视图 ",
                        " 逻辑视图 ",
                        " 进程视图 ",
                        " 开发视图 "
                    ]
                },
                {
                    "index": 30,
                    "belong_page": 1,
                    "question_id": 281332,
                    "question_title": "<p>软件架构文档是对软件架构的正式描述，能够帮助与系统有关的开发人员更好地理解软件架构。以下关于软件架构文档化的描述中，错误的是______。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281332,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件架构文档是架构师与相关开发人员的通信媒介，是为验证体系结构设计和提炼(或修改)这些设计(必要时)所执行预先分析的基础。软件架构文档化过程的主要输出结果是架构规格说明书和测试架构需求的质量设计说明书这两份文档。软件架构文档的写作应该遵循以下一些基本原则：①要从使用者的角度编写文档；②必须分发给所有与系统有关的开发人员(而不是只分发给系统分析师和系统架构设计师)；③应该保持架构文档的即时更新，但更新不要过于频繁；④架构文档中的描述应该尽量避免不必要的重复；⑤每次架构文档的修改都应该记录修改的原则等。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 主要输出结果是架构规格说明书和测试架构需求的质量设计说明书 ",
                        " 架构文档要保持即时更新，并记录每次进行修改的原则 ",
                        " 文档只需分发给系统分析师和系统架构设计师，以增强文档的保密性 ",
                        " 文档的完整性和质量是软件架构成功的关键因素之一 "
                    ]
                },
                {
                    "index": 31,
                    "belong_page": 1,
                    "question_id": 281338,
                    "question_title": "<p>特定领域软件架构(DSSA.是一个特定的问题领域中由领域模型、参考需求和参考架构等组成的开发基础架构。以下关于DSSA所具备的特征描述中，错误的是______。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281338,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>特定领域软件架构(DSSA)是一个特定的问题领域中由领域模型、参考需求和参考架构等组成的开发基础架构，其目标就是支持一个特定领域中多个应用的生成。通常情况下，DSSA应该具备以下4个方面的特征：①一个严格定义的问题域或解决域；②具有普遍性，使其可以用于领域中某个特定应用的开发；③对整个领域能有合适程度的抽象；④具备该领域固定的典型的在开发过程中的可重用元素。据此，选项D的说法有误。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 对整个领域能有合适程度的抽象 ",
                        " 具备该领域固定的、典型的在开发过程中的可重用元素 ",
                        " 一个严格定义的问题域或解决域 ",
                        " 具有易用性，使其可以用于领域中某个特定应用的开发 "
                    ]
                },
                {
                    "index": 32,
                    "belong_page": 1,
                    "question_id": 281340,
                    "question_title": "<p>某公司在对一家用车库门嵌入式软件系统进行架构设计时，识别出两个关键的质量属性场景，其中“当车库门正常下降时，如果发现下面有障碍物，则系统停止下降的时间需要控制在0.1秒内”与（ &nbsp;）质量属性相关；“系统需要为部署在远程PC机上的智能家居系统留有控制接口，并支持在智能家居系统中对该系统进行远程错误诊断与调试”与（ ）质量属性相关。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281339,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "本题主要考查对质量属性的理解。题干中描述“当车库门正常下降时，如果发现下面有障碍物，则系统停止下降的时间需要控制在0.1秒内”这是对系统响应时间的要求，属于性能质量属性；“系统需要为部署在远程PC机上的智能家居系统留有控制接口，并支持在智能家居系统中对该系统进行远程错误诊断与调试”，这是对系统测试和调试方面的描述，属于系统的可测试性质量属性。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "可用性",
                        "性能",
                        "可修改性",
                        "可测试性"
                    ]
                },
                {
                    "index": 33,
                    "belong_page": 1,
                    "question_id": 281341,
                    "question_title": "<p>某公司在对一家用车库门嵌入式软件系统进行架构设计时，识别出两个关键的质量属性场景，其中“当车库门正常下降时，如果发现下面有障碍物，则系统停止下降的时间需要控制在0.1秒内”与（ &nbsp;）质量属性相关；“系统需要为部署在远程PC机上的智能家居系统留有控制接口，并支持在智能家居系统中对该系统进行远程错误诊断与调试”与（ ）质量属性相关。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281339,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "本题主要考查对质量属性的理解。题干中描述“当车库门正常下降时，如果发现下面有障碍物，则系统停止下降的时间需要控制在0.1秒内”这是对系统响应时间的要求，属于性能质量属性；“系统需要为部署在远程PC机上的智能家居系统留有控制接口，并支持在智能家居系统中对该系统进行远程错误诊断与调试”，这是对系统测试和调试方面的描述，属于系统的可测试性质量属性。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "可用性",
                        "性能",
                        "可修改性",
                        "可测试性"
                    ]
                },
                {
                    "index": 34,
                    "belong_page": 1,
                    "question_id": 281353,
                    "question_title": "<p>软件架构需求是指用户对目标软件系统在功能、行为、性能和设计约束等方面的期望。以下活动中，不属于软件架构需求过程中标识构件范畴的是______。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281353,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件架构需求过程主要是获取用户需求，标识系统中所要用到的构件，并进行架构需求评审。其中，标识构件又详细地分为生成类图、对类图进行分组和将类打包成构件3个步骤。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 生成类图 ",
                        " 对类图进行分组 ",
                        " 对类图进行测试 ",
                        " 将类合并打包 "
                    ]
                },
                {
                    "index": 35,
                    "belong_page": 1,
                    "question_id": 281356,
                    "question_title": "<p>与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（ &nbsp;）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（ &nbsp;）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（ &nbsp;）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281355,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费者和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "UDDI",
                        "Rest",
                        "WSDL",
                        "SOAP"
                    ]
                },
                {
                    "index": 36,
                    "belong_page": 1,
                    "question_id": 281357,
                    "question_title": "<p>与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（ &nbsp;）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（ &nbsp;）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（ &nbsp;）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281355,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "UDDI",
                        "Rest",
                        "WSDL",
                        "SOAP"
                    ]
                },
                {
                    "index": 37,
                    "belong_page": 1,
                    "question_id": 281358,
                    "question_title": "<p>与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（ &nbsp;）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（ &nbsp;）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（ &nbsp;）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281355,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "UDDI",
                        "Rest",
                        "WSDL",
                        "SOAP"
                    ]
                },
                {
                    "index": 38,
                    "belong_page": 1,
                    "question_id": 281366,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（ ）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281365,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "表现层",
                        "业务逻辑层",
                        "持久层",
                        "中间层"
                    ]
                },
                {
                    "index": 39,
                    "belong_page": 1,
                    "question_id": 281367,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（ ）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281365,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "MVC",
                        "spring",
                        "AOP",
                        "Hibernate"
                    ]
                },
                {
                    "index": 40,
                    "belong_page": 1,
                    "question_id": 281368,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（ ）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281365,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "模型",
                        "控制器",
                        "视图",
                        "处理器"
                    ]
                },
                {
                    "index": 41,
                    "belong_page": 1,
                    "question_id": 281369,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（ ）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281365,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "表现层",
                        "业务逻辑层",
                        "持久层",
                        "中间层"
                    ]
                },
                {
                    "index": 42,
                    "belong_page": 1,
                    "question_id": 281612,
                    "question_title": "某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与 （1） 质量属性相关，通常可采用 （2） 架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与 （3） 质量属性相关，通常可采用 （4） 架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与 （5） 质量属性相关，通常可采用 （6） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281611,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "此题为近几年经典题型，主要考察质量属性相关概念，属于送分题。具体参考课程讲解。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "可用性",
                        "性能",
                        "易用性",
                        "可修改性"
                    ]
                },
                {
                    "index": 43,
                    "belong_page": 1,
                    "question_id": 281613,
                    "question_title": "某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与 （1） 质量属性相关，通常可采用 （2） 架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与 （3） 质量属性相关，通常可采用 （4） 架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与 （5） 质量属性相关，通常可采用 （6） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281611,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "此题为近几年经典题型，主要考察质量属性相关概念，属于送分题。具体参考课程讲解。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "抽象接口",
                        "信息隐藏",
                        "主动冗余",
                        "影子操作"
                    ]
                },
                {
                    "index": 44,
                    "belong_page": 1,
                    "question_id": 281614,
                    "question_title": "某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与 （1） 质量属性相关，通常可采用 （2） 架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与 （3） 质量属性相关，通常可采用 （4） 架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与 （5） 质量属性相关，通常可采用 （6） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281611,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "此题为近几年经典题型，主要考察质量属性相关概念，属于送分题。具体参考课程讲解。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "可测试性",
                        "易用性",
                        "可用性",
                        "性能"
                    ]
                },
                {
                    "index": 45,
                    "belong_page": 1,
                    "question_id": 281615,
                    "question_title": "某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与 （1） 质量属性相关，通常可采用 （2） 架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与 （3） 质量属性相关，通常可采用 （4） 架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与 （5） 质量属性相关，通常可采用 （6） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281611,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "此题为近几年经典题型，主要考察质量属性相关概念，属于送分题。具体参考课程讲解。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "记录/回放",
                        "操作串行化",
                        "心跳",
                        "资源调度"
                    ]
                },
                {
                    "index": 46,
                    "belong_page": 1,
                    "question_id": 281616,
                    "question_title": "某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与 （1） 质量属性相关，通常可采用 （2） 架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与 （3） 质量属性相关，通常可采用 （4） 架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与 （5） 质量属性相关，通常可采用 （6） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281611,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "5",
                    "analyze": "此题为近几年经典题型，主要考察质量属性相关概念，属于送分题。具体参考课程讲解。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "可用性",
                        "安全性",
                        "可测试性",
                        "可修改性"
                    ]
                },
                {
                    "index": 47,
                    "belong_page": 1,
                    "question_id": 281617,
                    "question_title": "某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与 （1） 质量属性相关，通常可采用 （2） 架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与 （3） 质量属性相关，通常可采用 （4） 架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与 （5） 质量属性相关，通常可采用 （6） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281611,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "6",
                    "analyze": "此题为近几年经典题型，主要考察质量属性相关概念，属于送分题。具体参考课程讲解。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "追踪审计",
                        "Ping/Echo",
                        "选举",
                        "维护现有接口"
                    ]
                },
                {
                    "index": 48,
                    "belong_page": 1,
                    "question_id": 281619,
                    "question_title": "<p>在仓库风格中，有两种不同的构件，其中，（7）说明当前状态，（8）在中央数据存储上执行。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281618,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "本题考查的是架构风格的概念，属于教程原话：“在仓库风格中，有两种不同的构件：中央数据结构说明当前状态，独立构件在中央数据存储上执行”。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "注册表",
                        "中央数据结构",
                        "事件",
                        "数据库"
                    ]
                },
                {
                    "index": 49,
                    "belong_page": 1,
                    "question_id": 281620,
                    "question_title": "<p>在仓库风格中，有两种不同的构件，其中，（7）说明当前状态，（8）在中央数据存储上执行。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281618,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "本题考查的是架构风格的概念，属于教程原话：“在仓库风格中，有两种不同的构件：中央数据结构说明当前状态，独立构件在中央数据存储上执行”。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "独立构件",
                        "数据结构",
                        "知识源",
                        "共享数据"
                    ]
                },
                {
                    "index": 50,
                    "belong_page": 1,
                    "question_id": 281622,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281621,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A．性能 ",
                        " B．吞吐量 ",
                        " C．可靠性 ",
                        " D．可修改性 "
                    ]
                },
                {
                    "index": 51,
                    "belong_page": 1,
                    "question_id": 281623,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281621,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " A．操作串行化 ",
                        " B．资源调度 ",
                        " C．心跳 ",
                        " D．内置监控器 "
                    ]
                },
                {
                    "index": 52,
                    "belong_page": 1,
                    "question_id": 281624,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281621,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A．可测试性 ",
                        " B．易用性 ",
                        " C．可用性 ",
                        " D．互操作性 "
                    ]
                },
                {
                    "index": 53,
                    "belong_page": 1,
                    "question_id": 348882,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281621,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "A．主动冗余",
                        "B．信息隐藏",
                        "C．抽象接口",
                        "D．记录/回放"
                    ]
                },
                {
                    "index": 54,
                    "belong_page": 1,
                    "question_id": 348883,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281621,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "5",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "A．可用性",
                        "B．安全性",
                        "C．可测试性",
                        "D．可修改性"
                    ]
                },
                {
                    "index": 55,
                    "belong_page": 1,
                    "question_id": 348884,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281621,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "6",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "A．内置监控器",
                        "B．记录/回放",
                        "C．追踪审计",
                        "D．维护现有接口"
                    ]
                },
                {
                    "index": 56,
                    "belong_page": 1,
                    "question_id": 281626,
                    "question_title": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的 （12） 特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用 （13） 架构风格。对于因数据输入某个构件，经过内部处理，产生数据输出的系统，通常会采用 （14） 架构风格。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281625,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为客户/服务器模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p><p>语音识别是黑板风格的经典应用场景。</p><p>输入某个构件，经过内部处理，产生数据输出的系统，正是管道-过滤器中过滤器的职能，把多个过滤器使用管道相联的风格为管道-过滤器风格。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "语法和语义",
                        "结构和语义",
                        "静态和动态",
                        "行为和约束"
                    ]
                },
                {
                    "index": 57,
                    "belong_page": 1,
                    "question_id": 281627,
                    "question_title": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的 （12） 特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用 （13） 架构风格。对于因数据输入某个构件，经过内部处理，产生数据输出的系统，通常会采用 （14） 架构风格。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281625,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为客户/服务器模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p><p>语音识别是黑板风格的经典应用场景。</p><p>输入某个构件，经过内部处理，产生数据输出的系统，正是管道-过滤器中过滤器的职能，把多个过滤器使用管道相联的风格为管道-过滤器风格。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "管道-过滤器",
                        "解释器",
                        "黑板",
                        "过程控制"
                    ]
                },
                {
                    "index": 58,
                    "belong_page": 1,
                    "question_id": 281628,
                    "question_title": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的 （12） 特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用 （13） 架构风格。对于因数据输入某个构件，经过内部处理，产生数据输出的系统，通常会采用 （14） 架构风格。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281625,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为客户/服务器模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p><p>语音识别是黑板风格的经典应用场景。</p><p>输入某个构件，经过内部处理，产生数据输出的系统，正是管道-过滤器中过滤器的职能，把多个过滤器使用管道相联的风格为管道-过滤器风格。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "事件驱动系统",
                        "黑板",
                        "管道-过滤器",
                        "分层系统"
                    ]
                },
                {
                    "index": 59,
                    "belong_page": 1,
                    "question_id": 281629,
                    "question_title": "某公司拟卡发一个 VIP 管理系统，系统需要根据不同商场活动，不定期更新 VIP 会员的审核标准和 VIP 折扣标准。针对上述需求，采用（15）架构风格最为合适。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281629,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "根据题目中描述，VIP管理系统会根据不同商场活动，不定期更新VIP会员的审核标准和折扣标准，属于典型规则系统应用场景。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "规则系统",
                        "过程控制",
                        "分层",
                        "管道-过滤器"
                    ]
                },
                {
                    "index": 60,
                    "belong_page": 1,
                    "question_id": 283633,
                    "question_title": "<p>基于软件架构的设计(Architecture Based Software Development，ABSD.强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用（）来描述软件架构，采用（）来描述需求。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283632,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "根据基于软件架构的设计的定义，基于软件架构的设计(Architecture Based Software Development，ABSD)强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "类图和序列图",
                        "视角与视图",
                        "构件和类图",
                        "构件与功能"
                    ]
                },
                {
                    "index": 61,
                    "belong_page": 1,
                    "question_id": 283634,
                    "question_title": "<p>基于软件架构的设计(Architecture Based Software Development，ABSD.强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用（）来描述软件架构，采用（）来描述需求。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283632,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "根据基于软件架构的设计的定义，基于软件架构的设计(Architecture Based Software Development，ABSD)强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "用例与类图",
                        "用例与视角",
                        "用例与质量场景",
                        "视角与质量场景"
                    ]
                },
                {
                    "index": 62,
                    "belong_page": 1,
                    "question_id": 283635,
                    "question_title": "<p>软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动，是一个迭代的过程。以下关于软件架构设计活动的描述，错误的是______。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283635,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动，是一个迭代的过程，在建立软件架构的初期，一般需要选择一个合适的架构风格，将架构分析阶段已标识的构件映射到架构中，并分析这些构件之间的关系，一旦得到了详细的软件架构设计，需要邀请独立于系统开发的外部人员对系统进行评审。一般来说，软件架构设计活动将已标识构件集成到软件架构中，设计这些构件，但不予以实现。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 在建立软件架构的初期，一般需要选择一个合适的架构风格 ",
                        " 将架构分析阶段已标识的构件映射到架构中，并分析这些构件之间的关系 ",
                        " 软件架构设计活动将己标识构件集成到软件架构中，设计并实现这些构件 ",
                        " 一旦得到了详细的软件架构设计，需要邀请独立于系统开发的外部人员对系统进行评审 "
                    ]
                },
                {
                    "index": 63,
                    "belong_page": 1,
                    "question_id": 283640,
                    "question_title": "<p>PH系统集成开发公司决定采用基于架构的软件开发方法，以架构为核心对近期所承接的某电子商务企业的在线交易平台进行设计与实现。该电子商务企业要求在线交易平台必须在800 ms内完成客户的交易请求。该电子商务企业所提要求主要对应于______这一软件质量属性，实现并提高该质量属性的架构设计策略不包括______。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283639,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>性能(Performance)是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。它是常见的软件质量属性之一。</p><p>在线交易平台必须在1s内完成客户的交易请求。该要求主要对应性能，可以采用的架构设计策略有：①增加可用资源(更快的处理器、多处理器、更大的内存，以及速度更快的网络等)；②改善资源需求(减少计算复杂度、优化各个进程的内存和CPU占用率等)；③资源管理(并发、数据复制等)；④资源调度(先进先出队列、固定优先级调度队列等)等。</p><p>设置进程监视器是实现“可用性”质量属性的一种架构设计策略。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "可用性",
                        "易用性",
                        "安全性",
                        "性能"
                    ]
                },
                {
                    "index": 64,
                    "belong_page": 1,
                    "question_id": 283641,
                    "question_title": "<p>PH系统集成开发公司决定采用基于架构的软件开发方法，以架构为核心对近期所承接的某电子商务企业的在线交易平台进行设计与实现。该电子商务企业要求在线交易平台必须在800 ms内完成客户的交易请求。该电子商务企业所提要求主要对应于______这一软件质量属性，实现并提高该质量属性的架构设计策略不包括______。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283639,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>性能(Performance)是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。它是常见的软件质量属性之一。</p><p>在线交易平台必须在1s内完成客户的交易请求。该要求主要对应性能，可以采用的架构设计策略有：①增加可用资源(更快的处理器、多处理器、更大的内存，以及速度更快的网络等)；②改善资源需求(减少计算复杂度、优化各个进程的内存和CPU占用率等)；③资源管理(并发、数据复制等)；④资源调度(先进先出队列、固定优先级调度队列等)等。</p><p>设置进程监视器是实现“可用性”质量属性的一种架构设计策略。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "采用优先级调度队列",
                        "引入并发处理",
                        "优化相关进程的CPU占用率",
                        "设置进程监视器"
                    ]
                },
                {
                    "index": 65,
                    "belong_page": 1,
                    "question_id": 283646,
                    "question_title": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的（ ）特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用（ ）架构风格。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283645,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的结构和语义两个方面的特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用黑板架构风格，以知识为中心进行分析与推理。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "语法和语义",
                        "结构和语义",
                        "静态和动态",
                        "行为和约束"
                    ]
                },
                {
                    "index": 66,
                    "belong_page": 1,
                    "question_id": 283647,
                    "question_title": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的（ ）特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用（ ）架构风格。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283645,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的结构和语义两个方面的特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用黑板架构风格，以知识为中心进行分析与推理。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "管道-过滤器",
                        "解释器",
                        "黑板",
                        "过程控制"
                    ]
                },
                {
                    "index": 67,
                    "belong_page": 1,
                    "question_id": 283649,
                    "question_title": "<p>某公司欲开发一个用于分布式登录的服务端程序，使用面向连接的TCP协议并发地处理多客户端登录请求。用户要求该服务端程序运行在Linux、Solaris和Windows NT等多种操作系统平台之上，而不同的操作系统的相关API函数和数据都有所不同。针对这种情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给()，调用成功后将结果返回。使用该模式（）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283648,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "针对题目给出的情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给操作系统API函数，调用成功后将结果返回。使用该模式提高了底层代码访问的一致性，但降低了服务端程序的调用性能。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "客户端程序",
                        "操作系统API函数",
                        "TCP协议API函数",
                        "登录连接程序"
                    ]
                },
                {
                    "index": 68,
                    "belong_page": 1,
                    "question_id": 283650,
                    "question_title": "<p>某公司欲开发一个用于分布式登录的服务端程序，使用面向连接的TCP协议并发地处理多客户端登录请求。用户要求该服务端程序运行在Linux、Solaris和Windows NT等多种操作系统平台之上，而不同的操作系统的相关API函数和数据都有所不同。针对这种情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给()，调用成功后将结果返回。使用该模式（）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 283648,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "针对题目给出的情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给操作系统API函数，调用成功后将结果返回。使用该模式提高了底层代码访问的一致性，但降低了服务端程序的调用性能。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "提高了底层代码访问的一致性，但降低了服务端程序的调用性能",
                        "降低了服务端程序功能调用的灵活性，但提高了服务端程序的调用性能",
                        "降低了服务端程序的可移植性，但提高了服务端程序的可维护性",
                        "提高了系统的可复用性，但降低了系统的可配置性"
                    ]
                },
                {
                    "index": 69,
                    "belong_page": 1,
                    "question_id": 284674,
                    "question_title": "<p>某服务器软件系统对可用性(Availability)、性能(Performance)和可修改性(Modification)的要求较高，（29）设计策略能提高该系统的可用性，（30）设计策略能够提高该系统的性能，（31）设计策略能够提高该系统的可修改性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284673,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "本题主要考查质量属性以及实现质量属性的一般策略，不同策略主要针对一个或多个软件质量属性，其中Ping/Echo主要提高系统的可用性；限制访问主要提高系统的安全性；运行时注册主要提高系统的可修改性；接口-实现分离主要提高系统的可修改性；主动冗余提高系统的可靠性；队列调度主要提高系统的性能；信息隐藏主要提高系统的可修改性；记录-回放主要提高系统的可测试性，等等。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "Ping/Echo",
                        "限制访问",
                        "运行时注册",
                        "接口-实现分离"
                    ]
                },
                {
                    "index": 70,
                    "belong_page": 1,
                    "question_id": 284675,
                    "question_title": "<p>某服务器软件系统对可用性(Availability)、性能(Performance)和可修改性(Modification)的要求较高，（29）设计策略能提高该系统的可用性，（30）设计策略能够提高该系统的性能，（31）设计策略能够提高该系统的可修改性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284673,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "本题主要考查质量属性以及实现质量属性的一般策略，不同策略主要针对一个或多个软件质量属性，其中Ping/Echo主要提高系统的可用性；限制访问主要提高系统的安全性；运行时注册主要提高系统的可修改性；接口-实现分离主要提高系统的可修改性；主动冗余提高系统的可靠性；队列调度主要提高系统的性能；信息隐藏主要提高系统的可修改性；记录-回放主要提高系统的可测试性，等等。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "分层结构",
                        "事务机制",
                        "主动冗余",
                        "队列调度"
                    ]
                },
                {
                    "index": 71,
                    "belong_page": 1,
                    "question_id": 284676,
                    "question_title": "<p>某服务器软件系统对可用性(Availability)、性能(Performance)和可修改性(Modification)的要求较高，（29）设计策略能提高该系统的可用性，（30）设计策略能够提高该系统的性能，（31）设计策略能够提高该系统的可修改性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284673,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "本题主要考查质量属性以及实现质量属性的一般策略，不同策略主要针对一个或多个软件质量属性，其中Ping/Echo主要提高系统的可用性；限制访问主要提高系统的安全性；运行时注册主要提高系统的可修改性；接口-实现分离主要提高系统的可修改性；主动冗余提高系统的可靠性；队列调度主要提高系统的性能；信息隐藏主要提高系统的可修改性；记录-回放主要提高系统的可测试性，等等。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "信息隐藏",
                        "记录/回放",
                        "任务模型",
                        "回滚"
                    ]
                },
                {
                    "index": 72,
                    "belong_page": 1,
                    "question_id": 284678,
                    "question_title": "<p>软件架构评估中，评估人员主要关注系统的质量属性，并确定采用何种架构更为合适。在对某个应用软件进行评估 时，该应用软件采用的 Web 服务器所支持的并发连接数是整个系统性能的一个 （32） ；改变加密级别可能会对安全 性和操作性均产生重要影响，则加密级别是系统的一个 （33） 。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284677,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "敏感点是一个或多个构件的特性，权衡 点是影响多个质量属性的特性，是多个质量属性的敏感点。根据题干描述，在对某个应用软件进行评估时，该应用软件采用的Web服务器所支持的并发连接数是整个系统性能的一个敏感点；改变加密级别可能会对安全性和操作性均产生重 要影响，则加密级别是系统的一个权衡点。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "检查点",
                        "敏感点",
                        "权衡点",
                        "风险点"
                    ]
                },
                {
                    "index": 73,
                    "belong_page": 1,
                    "question_id": 284679,
                    "question_title": "<p>软件架构评估中，评估人员主要关注系统的质量属性，并确定采用何种架构更为合适。在对某个应用软件进行评估 时，该应用软件采用的 Web 服务器所支持的并发连接数是整个系统性能的一个 （32） ；改变加密级别可能会对安全 性和操作性均产生重要影响，则加密级别是系统的一个 （33） 。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284677,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "敏感点是一个或多个构件的特性，权衡 点是影响多个质量属性的特性，是多个质量属性的敏感点。根据题干描述，在对某个应用软件进行评估时，该应用软件采用的Web服务器所支持的并发连接数是整个系统性能的一个敏感点；改变加密级别可能会对安全性和操作性均产生重 要影响，则加密级别是系统的一个权衡点。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "检查点",
                        "敏感点",
                        "权衡点",
                        "风险点"
                    ]
                },
                {
                    "index": 74,
                    "belong_page": 1,
                    "question_id": 284683,
                    "question_title": "<p>面向服务（Service-Oriented，SO）的开发方法将（36）的定义与实现进行解耦，并将跨构件的功能调用暴露出来。该方法有三个主要的抽象级别，最低层的（37）代表单个逻辑单元的事物，包含特定的结构化接口，并且返回结构化的响应；第二层的服务代表操作的逻辑分组；最高层的（38）则是为了实现特定业务目标而执行的一组长期运行的动作或者活动。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284682,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>OO的应用构建在类和对象之上，随后发展起来的建模技术将相关对象按照业务功能进行分组，就形成了构件（Component）的概念。对于跨构件的功能调用，则采用接口的形式暴露出来。进一步将接口的定义与实现进行解耦，则催生了服务和面向服务（Service-Oriented，SO）的开发方法。由此可见，面向对象、基于构件、面向服务是三个递进的抽象层次。</p><p>SO方法有三个主要的抽象级别，分别是操作、服务和业务流程。位于最低层的操作代表单个逻辑单元的事物，执行操作通常会导致读、写或修改一个或多个持久性数据。服务的操作类似于对象的方法，它们都有特定的结构化接口，并且返回结构化的响应；位于第二层的服务代表操作的逻辑分组；最高层的业务流程则是为了实现特定业务目标而执行的一组长期运行的动作或活动，包括依据一组业务规则按照有序序列执行的一系列操作。其中操作的排序、选择和执行成为服务或流程的编排，典型的情况是调用已编排的服务来响应业务事件。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "接口",
                        "功能",
                        "活动",
                        "用例"
                    ]
                },
                {
                    "index": 75,
                    "belong_page": 1,
                    "question_id": 284684,
                    "question_title": "<p>面向服务（Service-Oriented，SO）的开发方法将（36）的定义与实现进行解耦，并将跨构件的功能调用暴露出来。该方法有三个主要的抽象级别，最低层的（37）代表单个逻辑单元的事物，包含特定的结构化接口，并且返回结构化的响应；第二层的服务代表操作的逻辑分组；最高层的（38）则是为了实现特定业务目标而执行的一组长期运行的动作或者活动。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284682,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>OO的应用构建在类和对象之上，随后发展起来的建模技术将相关对象按照业务功能进行分组，就形成了构件（Component）的概念。对于跨构件的功能调用，则采用接口的形式暴露出来。进一步将接口的定义与实现进行解耦，则催生了服务和面向服务（Service-Oriented，SO）的开发方法。由此可见，面向对象、基于构件、面向服务是三个递进的抽象层次。</p><p>SO方法有三个主要的抽象级别，分别是操作、服务和业务流程。位于最低层的操作代表单个逻辑单元的事物，执行操作通常会导致读、写或修改一个或多个持久性数据。服务的操作类似于对象的方法，它们都有特定的结构化接口，并且返回结构化的响应；位于第二层的服务代表操作的逻辑分组；最高层的业务流程则是为了实现特定业务目标而执行的一组长期运行的动作或活动，包括依据一组业务规则按照有序序列执行的一系列操作。其中操作的排序、选择和执行成为服务或流程的编排，典型的情况是调用已编排的服务来响应业务事件。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "类",
                        "对象",
                        "操作",
                        "状态"
                    ]
                },
                {
                    "index": 76,
                    "belong_page": 1,
                    "question_id": 284685,
                    "question_title": "<p>面向服务（Service-Oriented，SO）的开发方法将（36）的定义与实现进行解耦，并将跨构件的功能调用暴露出来。该方法有三个主要的抽象级别，最低层的（37）代表单个逻辑单元的事物，包含特定的结构化接口，并且返回结构化的响应；第二层的服务代表操作的逻辑分组；最高层的（38）则是为了实现特定业务目标而执行的一组长期运行的动作或者活动。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284682,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>OO的应用构建在类和对象之上，随后发展起来的建模技术将相关对象按照业务功能进行分组，就形成了构件（Component）的概念。对于跨构件的功能调用，则采用接口的形式暴露出来。进一步将接口的定义与实现进行解耦，则催生了服务和面向服务（Service-Oriented，SO）的开发方法。由此可见，面向对象、基于构件、面向服务是三个递进的抽象层次。</p><p>SO方法有三个主要的抽象级别，分别是操作、服务和业务流程。位于最低层的操作代表单个逻辑单元的事物，执行操作通常会导致读、写或修改一个或多个持久性数据。服务的操作类似于对象的方法，它们都有特定的结构化接口，并且返回结构化的响应；位于第二层的服务代表操作的逻辑分组；最高层的业务流程则是为了实现特定业务目标而执行的一组长期运行的动作或活动，包括依据一组业务规则按照有序序列执行的一系列操作。其中操作的排序、选择和执行成为服务或流程的编排，典型的情况是调用已编排的服务来响应业务事件。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "业务规则",
                        "业务流程",
                        "数据流",
                        "控制流"
                    ]
                },
                {
                    "index": 77,
                    "belong_page": 1,
                    "question_id": 284693,
                    "question_title": "<p>特定领域软件架构(DSSA.是一个特定的问题领域中由领域模型、参考需求和参考架构等组成的开发基础架构。以下关于DSSA所具备的特征描述中，错误的是_____。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284693,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>特定领域软件架构(DSSA)是一个特定的问题领域中由领域模型、参考需求和参考架构等组成的开发基础架构，其目标就是支持一个特定领域中多个应用的生成。通常情况下，DSSA应该具备以下4个方面的特征：①一个严格定义的问题域或解决域；②具有普遍性，使其可以用于领域中某个特定应用的开发；③对整个领域能有合适程度的抽象；④具备该领域固定的典型的在开发过程中的可重用元素。据此，选项D的说法有误。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 对整个领域能有合适程度的抽象 ",
                        " 具备该领域固定的、典型的在开发过程中的可重用元素 ",
                        " 一个严格定义的问题域或解决域 ",
                        " 具有易用性，使其可以用于领域中某个特定应用的开发 "
                    ]
                },
                {
                    "index": 78,
                    "belong_page": 1,
                    "question_id": 284695,
                    "question_title": "<p>某公司在对一家用车库门嵌入式软件系统进行架构设计时，识别出两个关键的质量属性场景，其中“当车库门正常下降时，如果发现下面有障碍物，则系统停止下降的时间需要控制在0.1秒内”与（45）质量属性相关；“系统需要为部署在远程PC机上的智能家居系统留有控制接口，并支持在智能家居系统中对该系统进行远程错误诊断与调试”与（46）质量属性相关。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284694,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "本题主要考查对质量属性的理解。题干中描述“当车库门正常下降时，如果发现下面有障碍物，则系统停止下降的时间需要控制在0.1秒内”这是对系统响应时间的要求，属于性能质量属性；“系统需要为部署在远程PC机上的智能家居系统留有控制接口，并支持在智能家居系统中对该系统进行远程错误诊断与调试”，这是对系统测试和调试方面的描述，属于系统的可测试性质量属性。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "可用性",
                        "性能",
                        "可修改性",
                        "可测试性"
                    ]
                },
                {
                    "index": 79,
                    "belong_page": 1,
                    "question_id": 284696,
                    "question_title": "<p>某公司在对一家用车库门嵌入式软件系统进行架构设计时，识别出两个关键的质量属性场景，其中“当车库门正常下降时，如果发现下面有障碍物，则系统停止下降的时间需要控制在0.1秒内”与（45）质量属性相关；“系统需要为部署在远程PC机上的智能家居系统留有控制接口，并支持在智能家居系统中对该系统进行远程错误诊断与调试”与（46）质量属性相关。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284694,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "本题主要考查对质量属性的理解。题干中描述“当车库门正常下降时，如果发现下面有障碍物，则系统停止下降的时间需要控制在0.1秒内”这是对系统响应时间的要求，属于性能质量属性；“系统需要为部署在远程PC机上的智能家居系统留有控制接口，并支持在智能家居系统中对该系统进行远程错误诊断与调试”，这是对系统测试和调试方面的描述，属于系统的可测试性质量属性。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "可用性",
                        "性能",
                        "可修改性",
                        "可测试性"
                    ]
                },
                {
                    "index": 80,
                    "belong_page": 1,
                    "question_id": 284697,
                    "question_title": "<p>某公司欲实现一个数据处理软件，该软件需要从网络接收一组复杂的数据，然后分步进行解析和处理。在这种情况下，采用（47）的体系结构风格比较适合。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284697,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>当一个软件需要处理复杂数据,且数据需要通过分步进行处理,具有明显的阶段特性时,采用管道和过滤器模式是比较好的方式,因此本题应该选择C。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 远程过程调用 ",
                        " 层次化 ",
                        " 管道/过滤器 ",
                        " 共享数据 "
                    ]
                },
                {
                    "index": 81,
                    "belong_page": 1,
                    "question_id": 284708,
                    "question_title": "<p>软件架构需求是指用户对目标软件系统在功能、行为、性能和设计约束等方面的期望。以下活动中，不属于软件架构需求过程中标识构件范畴的是_____。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284708,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件架构需求过程主要是获取用户需求，标识系统中所要用到的构件，并进行架构需求评审。其中，标识构件又详细地分为生成类图、对类图进行分组和将类打包成构件3个步骤。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 生成类图 ",
                        " 对类图进行分组 ",
                        " 对类图进行测试 ",
                        " 将类合并打包 "
                    ]
                },
                {
                    "index": 82,
                    "belong_page": 1,
                    "question_id": 284711,
                    "question_title": "<p>与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（58）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（59）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（60）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284710,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。<p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "UDDI",
                        "Rest",
                        "WSDL",
                        "SOAP"
                    ]
                },
                {
                    "index": 83,
                    "belong_page": 1,
                    "question_id": 284712,
                    "question_title": "<p>与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（58）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（59）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（60）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284710,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "UDDI",
                        "Rest",
                        "WSDL",
                        "SOAP"
                    ]
                },
                {
                    "index": 84,
                    "belong_page": 1,
                    "question_id": 284713,
                    "question_title": "<p>与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（58）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（59）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（60）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284710,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "UDDI",
                        "Rest",
                        "WSDL",
                        "SOAP"
                    ]
                },
                {
                    "index": 85,
                    "belong_page": 1,
                    "question_id": 284719,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284718,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "表现层",
                        "业务逻辑层&nbsp;",
                        "持久层",
                        "中间层"
                    ]
                },
                {
                    "index": 86,
                    "belong_page": 1,
                    "question_id": 284720,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284718,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "MVC",
                        "spring",
                        "AOP&nbsp;",
                        "Hibernate"
                    ]
                },
                {
                    "index": 87,
                    "belong_page": 1,
                    "question_id": 284721,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284718,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "模型",
                        "控制器",
                        "视图",
                        "处理器"
                    ]
                },
                {
                    "index": 88,
                    "belong_page": 1,
                    "question_id": 284722,
                    "question_title": "<p>一般来说，架构可以分为三个层次。（）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284718,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "表现层",
                        "业务逻辑层",
                        "持久层",
                        "中间层"
                    ]
                },
                {
                    "index": 89,
                    "belong_page": 1,
                    "question_id": 303684,
                    "question_title": "<p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>对软件体系结构风格的研究和实践促进了对设计的复用。Garlan和Shaw对经典体系结构风格进行了分类。其中， （46） 属于数据流体系结构风格； （47） 属于虚拟机体系结构风格；而下图描述的属于 （48） 体系结构风格。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518531762655.jpg\" title=\"1626518531762655.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303683,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "数据流体系结构包括批处理体系结构风格和管道-过滤器体系结构风格。虚拟机体系结构风格包括解释器体系结构风格和规则系统体系结构风格。图中描述的为层次型体系结构风格。所以第1空选项答案为D",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "面向对象",
                        "事件系统",
                        "规则系统",
                        "批处理"
                    ]
                },
                {
                    "index": 90,
                    "belong_page": 1,
                    "question_id": 303685,
                    "question_title": "<p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>对软件体系结构风格的研究和实践促进了对设计的复用。Garlan和Shaw对经典体系结构风格进行了分类。其中， （46） 属于数据流体系结构风格； （47） 属于虚拟机体系结构风格；而下图描述的属于 （48） 体系结构风格。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518531762655.jpg\" title=\"1626518531762655.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303683,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "数据流体系结构包括批处理体系结构风格和管道-过滤器体系结构风格。虚拟机体系结构风格包括解释器体系结构风格和规则系统体系结构风格。图中描述的为层次型体系结构风格。第2空答案为C",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "面向对象",
                        "事件系统",
                        " 规则系统 ",
                        "批处理"
                    ]
                },
                {
                    "index": 91,
                    "belong_page": 1,
                    "question_id": 303686,
                    "question_title": "<p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>对软件体系结构风格的研究和实践促进了对设计的复用。Garlan和Shaw对经典体系结构风格进行了分类。其中， （46） 属于数据流体系结构风格； （47） 属于虚拟机体系结构风格；而下图描述的属于 （48） 体系结构风格。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518531762655.jpg\" title=\"1626518531762655.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303683,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "数据流体系结构包括批处理体系结构风格和管道-过滤器体系结构风格。虚拟机体系结构风格包括解释器体系结构风格和规则系统体系结构风格。图中描述的为层次型体系结构风格。第3空答案为A",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 层次型 ",
                        "规则系统",
                        "事件系统",
                        "批处理"
                    ]
                },
                {
                    "index": 92,
                    "belong_page": 1,
                    "question_id": 303688,
                    "question_title": "（49） 是由中间件技术实现并支持SOA的一组基础架构，它提供了一种基础设施，其优势在于（50） 。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303687,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>面向服务的体系结构(Service-oriented Architecture, SOA)是一种软件系统设计方法，通过已经发布的和可发现的接口为终端用户应用程序或其他服务提供服务。</p><p>企业服务总线(Enterprise Service Bus, ESB)是构建基于SOA解决方案时所使用基础架构的关键部分，是由中间件技术实现并支持SOA的一组基础架构功能。ESB支持异构环境中的服务、消息，以及基干事件的交互，并且具有适当的服务级别和可管理性。简而言之，ESB提供了连接企业内部及跨企业间新的和现有软件应用程序的功能，以一组丰富的功能启用管理和监控应用程序之间的交互。在SOA分层模型中，ESB用于组件层以及服务层之间，它能够通过多种通信协议连接并集成不同平台上的组件将其映射成服务层的服务。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "ESB",
                        "微服务",
                        "云计算",
                        "Multi-Agent System"
                    ]
                },
                {
                    "index": 93,
                    "belong_page": 1,
                    "question_id": 303689,
                    "question_title": "（49） 是由中间件技术实现并支持SOA的一组基础架构，它提供了一种基础设施，其优势在于（50） 。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303687,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>面向服务的体系结构(Service-oriented Architecture, SOA)是一种软件系统设计方法，通过已经发布的和可发现的接口为终端用户应用程序或其他服务提供服务。</p><p>企业服务总线(Enterprise Service Bus, ESB)是构建基于SOA解决方案时所使用基础架构的关键部分，是由中间件技术实现并支持SOA的一组基础架构功能。ESB支持异构环境中的服务、消息，以及基干事件的交互，并且具有适当的服务级别和可管理性。简而言之，ESB提供了连接企业内部及跨企业间新的和现有软件应用程序的功能，以一组丰富的功能启用管理和监控应用程序之间的交互。在SOA分层模型中，ESB用于组件层以及服务层之间，它能够通过多种通信协议连接并集成不同平台上的组件将其映射成服务层的服务。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "支持了服务请求者与服务提供者之间的直接链接",
                        "支持了服务请求者与服务提供者之间的紧密耦合",
                        "消除了服务请求者与服务提供者之间的直接链接",
                        "消除了服务请求者与服务提供者之间的关系"
                    ]
                },
                {
                    "index": 94,
                    "belong_page": 1,
                    "question_id": 303691,
                    "question_title": "ABSDM(Architecture-Based Software Design Model)把整个基于体系结构的软件过程划分为体系结构需求、体系结构设计、体系结构文档化、 （51） 、 （52） 和体系结构演化等6个子过程。其中， （53） 过程的主要输出结果是体系结构规格说明和测试体系结构需求的质量设计说明书。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303690,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>基于架构的软件开发模型(Architecture-Based Software Design Model, ABSDM)把整个基于架构的软件过程划分为架构需求、设计、文档化、复审、实现、演化等 6 个子过程。</p><p>绝大多数的架构都是抽象的，由一些概念上的构件组成。例如，层的概念在任何程序设计语言中都不存在。因此，要让系统分析师和程序员去实现架构，还必须得把架构进行文档化。文档是在系统演化的每一个阶段，系统设计与开发人员的通信媒介，是为验证架构设计和提炼或修改这些设计（必要时）所执行预先分析的基础。架构文档化过程的主要输出结果是架构需求规格说明和测试架构需求的质量设计说明书这两个文档。生成需求模型构件的精确的形式化的描述，作为用户和开发者之间的一个协约。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "体系结构复审",
                        "体系结构测试",
                        "体系结构变更",
                        "体系结构管理"
                    ]
                },
                {
                    "index": 95,
                    "belong_page": 1,
                    "question_id": 303692,
                    "question_title": "ABSDM(Architecture-Based Software Design Model)把整个基于体系结构的软件过程划分为体系结构需求、体系结构设计、体系结构文档化、 （51） 、 （52） 和体系结构演化等6个子过程。其中， （53） 过程的主要输出结果是体系结构规格说明和测试体系结构需求的质量设计说明书。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303690,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>基于架构的软件开发模型(Architecture-Based Software Design Model, ABSDM)把整个基于架构的软件过程划分为架构需求、设计、文档化、复审、实现、演化等 6 个子过程。</p><p>绝大多数的架构都是抽象的，由一些概念上的构件组成。例如，层的概念在任何程序设计语言中都不存在。因此，要让系统分析师和程序员去实现架构，还必须得把架构进行文档化。文档是在系统演化的每一个阶段，系统设计与开发人员的通信媒介，是为验证架构设计和提炼或修改这些设计（必要时）所执行预先分析的基础。架构文档化过程的主要输出结果是架构需求规格说明和测试架构需求的质量设计说明书这两个文档。生成需求模型构件的精确的形式化的描述，作为用户和开发者之间的一个协约。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "体系结构实现",
                        "体系结构测试",
                        "体系结构建模",
                        "体系结构管理"
                    ]
                },
                {
                    "index": 96,
                    "belong_page": 1,
                    "question_id": 303693,
                    "question_title": "ABSDM(Architecture-Based Software Design Model)把整个基于体系结构的软件过程划分为体系结构需求、体系结构设计、体系结构文档化、 （51） 、 （52） 和体系结构演化等6个子过程。其中， （53） 过程的主要输出结果是体系结构规格说明和测试体系结构需求的质量设计说明书。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303690,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>基于架构的软件开发模型(Architecture-Based Software Design Model, ABSDM)把整个基于架构的软件过程划分为架构需求、设计、文档化、复审、实现、演化等 6 个子过程。</p><p>绝大多数的架构都是抽象的，由一些概念上的构件组成。例如，层的概念在任何程序设计语言中都不存在。因此，要让系统分析师和程序员去实现架构，还必须得把架构进行文档化。文档是在系统演化的每一个阶段，系统设计与开发人员的通信媒介，是为验证架构设计和提炼或修改这些设计（必要时）所执行预先分析的基础。架构文档化过程的主要输出结果是架构需求规格说明和测试架构需求的质量设计说明书这两个文档。生成需求模型构件的精确的形式化的描述，作为用户和开发者之间的一个协约。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "体系结构设计",
                        "体系结构需求",
                        "体系结构文档化",
                        "体系结构测试"
                    ]
                },
                {
                    "index": 97,
                    "belong_page": 1,
                    "question_id": 303695,
                    "question_title": "设计模式按照目的可以划分为三类，其中， （54） 模式是对对象实例化过程的抽象。例如 （55）模式确保一个类只有一个实例，并提供了全局访问入口； （56） 模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建定义对象； （57） 模式将复杂对象的构建与其表示分离。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303694,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>创建型模式是对对象实例化过程的抽象。例如Singleton模式确保一个类只有一个实例，并提供了全局访问入口；Prototype模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象；Builder模式将复杂对象的构建与其表示分离。</p><p>结构型模式主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</p><p>行为型模式主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "创建型",
                        "结构型",
                        "行为型",
                        "功能型"
                    ]
                },
                {
                    "index": 98,
                    "belong_page": 1,
                    "question_id": 303696,
                    "question_title": "设计模式按照目的可以划分为三类，其中， （54） 模式是对对象实例化过程的抽象。例如 （55）模式确保一个类只有一个实例，并提供了全局访问入口； （56） 模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建定义对象； （57） 模式将复杂对象的构建与其表示分离。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303694,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>创建型模式是对对象实例化过程的抽象。例如Singleton模式确保一个类只有一个实例，并提供了全局访问入口；Prototype模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象；Builder模式将复杂对象的构建与其表示分离。</p><p>结构型模式主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</p><p>行为型模式主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "Facade",
                        "Builder",
                        "Prototype",
                        "Singleton"
                    ]
                },
                {
                    "index": 99,
                    "belong_page": 1,
                    "question_id": 303697,
                    "question_title": "设计模式按照目的可以划分为三类，其中， （54） 模式是对对象实例化过程的抽象。例如 （55）模式确保一个类只有一个实例，并提供了全局访问入口； （56） 模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建定义对象； （57） 模式将复杂对象的构建与其表示分离。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303694,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>创建型模式是对对象实例化过程的抽象。例如Singleton模式确保一个类只有一个实例，并提供了全局访问入口；Prototype模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象；Builder模式将复杂对象的构建与其表示分离。</p><p>结构型模式主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</p><p>行为型模式主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "Builder",
                        "Facade",
                        "Prototype",
                        "Singleton"
                    ]
                },
                {
                    "index": 100,
                    "belong_page": 1,
                    "question_id": 303698,
                    "question_title": "设计模式按照目的可以划分为三类，其中， （54） 模式是对对象实例化过程的抽象。例如 （55）模式确保一个类只有一个实例，并提供了全局访问入口； （56） 模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建定义对象； （57） 模式将复杂对象的构建与其表示分离。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303694,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>创建型模式是对对象实例化过程的抽象。例如Singleton模式确保一个类只有一个实例，并提供了全局访问入口；Prototype模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象；Builder模式将复杂对象的构建与其表示分离。</p><p>结构型模式主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</p><p>行为型模式主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "Facade",
                        "Builder",
                        "Singleton",
                        "Prototype"
                    ]
                },
                {
                    "index": 101,
                    "belong_page": 1,
                    "question_id": 303700,
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303699,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "可用性",
                        "性能",
                        "安全性",
                        "可修改性"
                    ]
                },
                {
                    "index": 102,
                    "belong_page": 1,
                    "question_id": 303701,
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303699,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "限制资源",
                        "引入并发",
                        "资源仲裁",
                        "限制访问"
                    ]
                },
                {
                    "index": 103,
                    "belong_page": 1,
                    "question_id": 303702,
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303699,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "可用性",
                        "性能",
                        "安全性",
                        "可修改性"
                    ]
                },
                {
                    "index": 104,
                    "belong_page": 1,
                    "question_id": 303703,
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303699,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "记录/回放",
                        "操作串行化",
                        "心跳",
                        "资源调度"
                    ]
                },
                {
                    "index": 105,
                    "belong_page": 1,
                    "question_id": 303704,
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303699,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "5",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "可用性",
                        "性能",
                        "安全性",
                        "可修改性"
                    ]
                },
                {
                    "index": 106,
                    "belong_page": 1,
                    "question_id": 303705,
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303699,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "6",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "检测攻击",
                        "Ping/Echo",
                        "选举",
                        "权限控制"
                    ]
                },
                {
                    "index": 107,
                    "belong_page": 1,
                    "question_id": 310877,
                    "question_title": "关于企业应用集成(EAI)技术，描述不正确的是:（41 ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310877,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>企业应用集成技术可以消除信息孤岛，它将多个企业信息系统连接起来，实现无缝集成，使它们就像一个整体一样。EAI所连接的应用包括各种电子商务系统、ERP、CRM、SCM、OA、数据库系统和数据仓库等。EAI可以包括表示集成、数据集成、控制集成和业务流程集成等多个层次和方面，也可以在多个企业之间进行应用集成。</p><p>表示集成是黑盒集成，无须了解程序与数据库的内部构造。</p><p>数据集成是白盒集成，在集成之前必须先对数据进行标识并编成目录，另外还要确定数据模型，保证数据在数据库系统中分布和共享。</p><p>控制集成也称为功能集成或应用集成，属于黑盒集成，它是在业务逻辑层上对应用系统进行集成的。</p><p>业务流程集成也称为过程集成，它由一系列基于标准的、统一数据格式的工作流组成。当进行业务流程集成时，企业必须对各种业务信息的交换进行定义、授权和管理，以便改进操作、减少成本、提高响应速度。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "EAI 可以实现表示集成、数据集成、控制集成、应用集成等",
                        "表示集成和数据集成是白盒集成，控制集成是黑盒集成",
                        "EAI 技术适用于大多数实施电子商务的企业以及企业之间的应用集成",
                        "在做数据集成之前必须首先对数据进行标识并编成目录"
                    ]
                },
                {
                    "index": 108,
                    "belong_page": 1,
                    "question_id": 350305,
                    "question_title": "<p>软件开发环境应支持多种集成机制。根据功能不同，可以将集成机制分为三个部分：</p><p>&nbsp;（21） ，用于存储与系统开发有关的信息，并支持信息的交流与共享；&nbsp;（22） ，是实现过程集成和控制集成的基础；&nbsp;（23） ，它的统一性和一致性是软件开发环境的重要特征。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350304,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>软件开发环境（Software&nbsp;Development&nbsp;Environment, SDE）是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。</p><p>软件开发环境应支持多种集成机制，根据功能的不同，集成机制可以划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。</p><p>① 环境信息库。环境信息库是软件开发环境的核心，用于存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，如文档模板、系统配置、过程模型和可复用构件等。</p><p>② 过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成是按照具体软件开发过程的要求进行工具的选择与组合，控制集成是各工具之间进行并行通信和协同工作。</p><p>③ 环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户学习负担的保证。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 算法模型库 ",
                        " 环境信息库 ",
                        " 信息模型库 ",
                        " 用户界面库 "
                    ]
                },
                {
                    "index": 109,
                    "belong_page": 1,
                    "question_id": 350306,
                    "question_title": "<p>软件开发环境应支持多种集成机制。根据功能不同，可以将集成机制分为三个部分：</p><p>&nbsp;（21） ，用于存储与系统开发有关的信息，并支持信息的交流与共享；&nbsp;（22） ，是实现过程集成和控制集成的基础；&nbsp;（23） ，它的统一性和一致性是软件开发环境的重要特征。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350304,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>软件开发环境（Software&nbsp;Development&nbsp;Environment, SDE）是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。</p><p>软件开发环境应支持多种集成机制，根据功能的不同，集成机制可以划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。</p><p>① 环境信息库。环境信息库是软件开发环境的核心，用于存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，如文档模板、系统配置、过程模型和可复用构件等。</p><p>② 过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成是按照具体软件开发过程的要求进行工具的选择与组合，控制集成是各工具之间进行并行通信和协同工作。</p><p>③ 环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户学习负担的保证。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 工作流与日志服务器 ",
                        " 进程通信与数据共享服务器 ",
                        " 过程控制与消息服务器 ",
                        " 同步控制与恢复服务器 "
                    ]
                },
                {
                    "index": 110,
                    "belong_page": 1,
                    "question_id": 350307,
                    "question_title": "<p>软件开发环境应支持多种集成机制。根据功能不同，可以将集成机制分为三个部分：</p><p>&nbsp;（21） ，用于存储与系统开发有关的信息，并支持信息的交流与共享；&nbsp;（22） ，是实现过程集成和控制集成的基础；&nbsp;（23） ，它的统一性和一致性是软件开发环境的重要特征。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350304,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>软件开发环境（Software&nbsp;Development&nbsp;Environment, SDE）是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。</p><p>软件开发环境应支持多种集成机制，根据功能的不同，集成机制可以划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。</p><p>① 环境信息库。环境信息库是软件开发环境的核心，用于存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，如文档模板、系统配置、过程模型和可复用构件等。</p><p>② 过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成是按照具体软件开发过程的要求进行工具的选择与组合，控制集成是各工具之间进行并行通信和协同工作。</p><p>③ 环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户学习负担的保证。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 底层数据结构 ",
                        " 数据处理方法 ",
                        " 业务过程模型 ",
                        " 环境用户界面 "
                    ]
                },
                {
                    "index": 111,
                    "belong_page": 1,
                    "question_id": 352268,
                    "question_title": "<p>&nbsp;企业信息集成按照组织范围分为企业内部的信息集成和外部的信息集成，在企业内 部的信息集成中，&nbsp;&nbsp;（22） 实现了不同系统之间的互操作，使得不同系统之间能够实现数据和方法的共享；&nbsp;（23） 实现了不同应用系统之间的连接、协调运作和信息共享。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352267,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>企业信息集成是指企业在不同应用系统之间实现数据共享， 即实现数据在不同数据格式 和存储方式之间的转换。对来源不同、形态不一、内容不等的信息资源进行系统分析、辨清 正误、消除冗余、合并同类，进而产生具有统一数据形式的有价值信息的过程。企业信息集 成是一个十分复杂的问题，按照组织范围来分， 分为企业内部的信息集成和外部的信息集成 两个方面；按集成内容， 企业内部的信息集成一般可分为4个方面， 即技术平台集成、数据集成、应用系统集成和业务过程集成。其中应用系统集成是实现不同系统之间的互操作，使得不同应用系统之间能够实现数据和方法的共享；业务过程集成使得在不同应用系统中的流 程能够无缝连接， 实现流程的协调运作和流程信息的充分共享。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 技术平台集成 ",
                        " 数据集成 ",
                        " 应用系统集成 ",
                        " 业务过程集成 "
                    ]
                },
                {
                    "index": 112,
                    "belong_page": 1,
                    "question_id": 352269,
                    "question_title": "<p>&nbsp;企业信息集成按照组织范围分为企业内部的信息集成和外部的信息集成，在企业内 部的信息集成中，&nbsp;&nbsp;（22） 实现了不同系统之间的互操作，使得不同系统之间能够实现数据和方法的共享；&nbsp;（23） 实现了不同应用系统之间的连接、协调运作和信息共享。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352267,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>企业信息集成是指企业在不同应用系统之间实现数据共享， 即实现数据在不同数据格式 和存储方式之间的转换。对来源不同、形态不一、内容不等的信息资源进行系统分析、辨清 正误、消除冗余、合并同类，进而产生具有统一数据形式的有价值信息的过程。企业信息集 成是一个十分复杂的问题，按照组织范围来分， 分为企业内部的信息集成和外部的信息集成 两个方面；按集成内容， 企业内部的信息集成一般可分为4个方面， 即技术平台集成、数据集成、应用系统集成和业务过程集成。其中应用系统集成是实现不同系统之间的互操作，使得不同应用系统之间能够实现数据和方法的共享；业务过程集成使得在不同应用系统中的流 程能够无缝连接， 实现流程的协调运作和流程信息的充分共享。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 技术平台集成 ",
                        " 数据集成 ",
                        " 应用系统集成 ",
                        " 业务过程集成 "
                    ]
                },
                {
                    "index": 113,
                    "belong_page": 1,
                    "question_id": 356085,
                    "question_title": "<p>遗留系统的演化可以采用淘汰、继承、改造和集成四种策略。若企业中的遗留系统技术含量较高，业务价值较低，在局部领域中工作良好，形成了一个个信息孤岛时，适合于采用（）演化策略。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356085,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>遗留系统的演化可以采用淘汰、继承、改造和集成四种策略。</p><p>淘汰策略适用于技术含量较低，且具有较低的业务价值的遗留系统，即通过全面重新开发新的系统以代替遗留系统。</p><p>若遗留系统的技术含量较低，能满足企业运作的功能或性能要求，但具有较高的商业机制，目前企业的业务上紧密依赖该系统，这种遗留系统的演化策略为继承。在开发新系统时，需要完全兼容遗留系统的功能模型和数据模型。为了保证业务的连续性，新老系统必须并行运行一段时间。</p><p>对于技术含量较高，本身还有极大的生命力，又具有较高的业务价值，基本上能够满足企业业务运作和决策支持需要的遗留系统，采用改造策略进行演化。改造包括系统功能的增强和数据模型的改造两个方面。</p><p>遗留系统的技术含量较高，但其业务价值较低，可能只完成某个部门(或子公司)的业务管理。这种系统在各自局部领域里工作良好，但对于整个企业来说，存在多个这样的系统，不同的系统基于不同的平台、不同的数据模型，形成了一个个信息孤岛。对于这种遗留系统的演化策略为集成。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " A．淘汰&nbsp; ",
                        " &nbsp;B．继承 ",
                        " C．改造 ",
                        " D．集成 "
                    ]
                },
                {
                    "index": 114,
                    "belong_page": 1,
                    "question_id": 356086,
                    "question_title": "<p>在面向对象设计中，（）可以实现界面控制、外部接口和环境隔离。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356086,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>类封装了信息和行为，是面向对象的重要组成部分。在面向对象设计中，类可以分为三种类型：实体类、边界类和控制类。</p><p>边界类用于封装在用例内、外流动的信息或数据流。边界类是一种用于对系统外部环境与其内部运作之间的交互进行建模的类。边界对象将系统与其外部环境的变更隔离开，使这些变更不会对系统其他部分造成影响。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A．实体类&nbsp; ",
                        " B．控制类 ",
                        " C．边界类 ",
                        " D．交互类 "
                    ]
                },
                {
                    "index": 115,
                    "belong_page": 1,
                    "question_id": 356087,
                    "question_title": "在面向对象设计中，（）作为完成用例业务的责任承担者，协调、控制其他类共同完成用例规定的功能或行为。<br/>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356087,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>类封装了信息和行为，是面向对象的重要组成部分。在面向对象设计中，类可以分为三种类型：实体类、边界类和控制类。</p><p>①实体类映射需求中的每个实体，实体类保存需要存储在永久存储体中的信息。实体类是对用户来说最有意义的类，通常采用业务领域术语命名，一般来说是一个名词，在用例模型向领域模型转化中，一个参与者一般对应于实体类。</p><p>②控制类是用于控制用例工作的类，一般是由动宾结构的短语(“动词+名词”或“名词+动词”)转化来的名词。控制类用于对一个或几个用例所特有的控制行为进行建模，控制对象通常控制其他对象，因此它们的行为具有协调性。</p><p>③边界类用于封装在用例内、外流动的信息或数据流。边界类是一种用于对系统外部环境与其内部运作之间的交互进行建模的类。边界对象将系统与其外部环境的变更隔离开，使这些变更不会对系统其他部分造成影响。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " A．实体类 ",
                        " B．控制类 ",
                        " &nbsp;C．边界类 ",
                        " D．交互类 "
                    ]
                },
                {
                    "index": 116,
                    "belong_page": 1,
                    "question_id": 356088,
                    "question_title": "<p>在结构化分析方法中，用（）表示功能模型，</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356088,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>结构化分析方法的基本思想是自顶向下，逐层分解，把一个大问题分解成若干个小问题，每个小问题再分解成若干个更小的问题。经过逐层分解，每个最低层的问题都是足够简单、容易解决的。结构化方法分析模型的核心是数据字典，围绕这个核心，有三个层次的模型，分别是数据模型、功能模型和行为模型(也称为状态模型)。其中DFD表示功能模型。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A．ER图 ",
                        " B．用例图 ",
                        " C．DFD ",
                        " D．对象图 "
                    ]
                },
                {
                    "index": 117,
                    "belong_page": 1,
                    "question_id": 356089,
                    "question_title": "<p>在结构化分析方法中，用（）表示行为模型。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356089,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>在实际工作中，一般使用E-R图表示数据模型，用DFD表示功能模型，用状态转换图表示行为模型。这三个模型有着密切的关系，它们的建立不具有严格的时序性，而是一个迭代的过程。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " A．通信图 ",
                        " B．顺序图  <br/> ",
                        " C．活动图 ",
                        " D．状态转换图 "
                    ]
                },
                {
                    "index": 118,
                    "belong_page": 1,
                    "question_id": 356090,
                    "question_title": "<p>以下关于敏捷方法的叙述中，（）是不正确的。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356090,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A.敏捷型方法的思考角度是&quot;面向开发过程&quot;的 ",
                        " B.极限编程是著名的敏捷开发方法 ",
                        " C.敏捷型方法是&quot;适应性&quot;而非&quot;预设性&quot; ",
                        " D.敏捷开发方法是迭代增量式的开发方法 "
                    ]
                },
                {
                    "index": 119,
                    "belong_page": 1,
                    "question_id": 356091,
                    "question_title": "<p>用例(use case)用来描述系统对事件做出响应时所采取的行动。用例之间是具有相关性的。在一个会员管理系统中，会员注册时可以采用电话和邮件两种方式。用例“会员注册”和“电话注册”、“邮件注册”之间是（）关系。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356091,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>用例之间的关系主要有包含、扩展和泛化。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A．包含(include)&nbsp; ",
                        " B．扩展(extend)&nbsp; ",
                        " C．泛化(generalize)&nbsp;  <br/> ",
                        " D．依赖(depends on) "
                    ]
                },
                {
                    "index": 120,
                    "belong_page": 1,
                    "question_id": 356092,
                    "question_title": "<p>面向对象的分析模型主要由（ ）、用例与用例图、领域概念模型构成。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356092,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>面向对象的分析模型主要由顶层架构图、用例与用例图、领域概念模型构成。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " A．业务活动图 ",
                        " B．顶层架构图 ",
                        " C．数据流模型 ",
                        " 　D．实体联系图 "
                    ]
                },
                {
                    "index": 121,
                    "belong_page": 1,
                    "question_id": 356096,
                    "question_title": "<p>（）把整个软件开发流程分成多个阶段，每一个阶段都由目标设定、风险分析、开发和有效性验证以及评审构成。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356096,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>螺旋模型将瀑布模型和演化模型结合起来，不仅体现了两个模型的优点，而且还强调了其他模型均忽略了的风险分析。螺旋模型的每一周期都包括需求定义、风险分析、工程实现和评审 4 个阶段，由这 4 个阶段进行迭代，软件开发过程每迭代一次，软件开发就前进一个层次。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A. 原型模型 ",
                        " B. 瀑布模型 ",
                        " C. 螺旋模型 ",
                        " D. V模型 "
                    ]
                },
                {
                    "index": 122,
                    "belong_page": 1,
                    "question_id": 356097,
                    "question_title": "<p>软件方法学是以软件开发方法为研究对象的学科。其中，&nbsp;（）&nbsp;是先对最高居次中的问题进行定义、设计、编程和测试，而将其中未解决的问题作为一个子任务放到下一层次中去解决。&nbsp;</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356097,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件方法学是软件开发全过程的指导原则与方法体系。其另一种含义是以软件方法为研究对象的学科。从开发风范上看，软件方法有自顶向下的开发方法、自底向上的开发方法。在实际软件开发中，大都是自顶向下与自底向上两种方法的结合，只不过是以何者为主而已。自顶向下是指将一个大问题分化成多个可以解决的小问题，然后逐一进行解决。每个问题都会有一个模块去解决它，且每个问题包括抽象步骤和具体步骤。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " A．面向对象开发方法 ",
                        " B．形式化开发方法 ",
                        " C．非形式化开发方法 ",
                        " D．自顶向下开发方法 "
                    ]
                },
                {
                    "index": 123,
                    "belong_page": 1,
                    "question_id": 356098,
                    "question_title": "<p>软件方法学是以软件开发方法为研究对象的学科。其中（）&nbsp;是根据系统功能要求，从具体的器件、逻辑部件或者相似系统开始，通过对其进行相互连接、修改和扩大，构成所要求的系统。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356098,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>自底向上开发方法是根据系统功能要求，从具体的器件、逻辑部件或者相似系统开始，通过对其进行相互连接、修改和扩大，构成所要求的系统。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A．自底向上开发方法 ",
                        " B．形式化开发方法 ",
                        " C．非形式化开发方法 ",
                        " D．原型开发方法 "
                    ]
                },
                {
                    "index": 124,
                    "belong_page": 1,
                    "question_id": 356099,
                    "question_title": "<p>软件方法学是以软件开发方法为研究对象的学科。（）&nbsp;是建立在严格数学基础上的软件开发方法。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356099,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>形式化方法是指采用严格的数学方法，使用形式化规约语言来精确定义软件系统。非形式化的开发方法是通过自然语言、图形或表格描述软件系统的行为和特性，然后基于这些描述进行设计和开发，而形式化开发则是基于数学的方式描述、开发和验证系统。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " A．自底向上开发方法 ",
                        " B．形式化开发方法 ",
                        " C．非形式化开发方法 ",
                        " D．原型开发方法 "
                    ]
                },
                {
                    "index": 125,
                    "belong_page": 1,
                    "question_id": 356100,
                    "question_title": "<p>软件结构化设计包括（）等任务。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356100,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件结构化设计包括架构设计、接口设计、数据设计和过程设计等任务。它是一种面向数据流的设计方法，是以结构化分析阶段所产生的成果为基础，进一步自顶而下、逐步求精和模块化的过程。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " A．架构设计、数据设计、过程设计、原型设计 ",
                        " B．架构设计、过程设计、程序设计、原型设计 ",
                        " C．数据设计、过程设计、交互设计、程序设计 ",
                        " D．架构设计、接口设计、数据设计、过程设计 "
                    ]
                },
                {
                    "index": 126,
                    "belong_page": 1,
                    "question_id": 356101,
                    "question_title": "<p>在分布式数据库中有分片透明、复制透明、位置透明和逻辑透明等基本概念。其中，（）是指用户无需知道数据存放的物理位置。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356101,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题考查对分布式数据库基本概念的理解。</p><p>分片透明是指用户或应用程序不需要知道逻辑上访问的表具体是怎么分块存储的。复制</p><p>透明是指采用复制技术的分布方法,用户不需要知道数据是复制到哪些节点,如何复制的。</p><p>位置透明是指用户无需知道数据存放的物理位置。逻辑透明是指用户或应用程序无需知道局部场地使用的是哪种数据模型。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A ．分片透明 ",
                        " B ．逻辑透明 ",
                        " &nbsp;C ．位置透明 ",
                        " D ．复制透明 "
                    ]
                },
                {
                    "index": 127,
                    "belong_page": 1,
                    "question_id": 356094,
                    "question_title": "<p>面向对象的设计模型包含以包图表示的软件体系结构图、以交互图表示的（ &nbsp;）、完整精确的类图、针对复杂对象的状态图和描述流程化处理过程的（ &nbsp;）等。</p>",
                    "question_type": 8,
                    "answer_type": 1,
                    "show_type_name": "完形填空题",
                    "new_parent_id": 356093,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>面向对象的分析模型主要由顶层架构图、用例与用例图、领域概念模型构成；设计模型则包含以包图表示的软件体系结构图、以交互图表示的用例实现图、完整精确的类图、针对复杂对象的状态图和用以描述流程化处理过程的活动图等。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A．功能分解图 ",
                        " &nbsp;B．时序关系图 ",
                        " C．用例实现图 ",
                        " D．软件部署图 "
                    ]
                },
                {
                    "index": 128,
                    "belong_page": 1,
                    "question_id": 356095,
                    "question_title": "<p>面向对象的设计模型包含以包图表示的软件体系结构图、以交互图表示的（ &nbsp;）、完整精确的类图、针对复杂对象的状态图和描述流程化处理过程的（ &nbsp;）等。</p>",
                    "question_type": 8,
                    "answer_type": 1,
                    "show_type_name": "完形填空题",
                    "new_parent_id": 356093,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>面向对象的分析模型主要由顶层架构图、用例与用例图、领域概念模型构成；设计模型则包含以包图表示的软件体系结构图、以交互图表示的用例实现图、完整精确的类图、针对复杂对象的状态图和用以描述流程化处理过程的活动图等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " A．序列图 ",
                        " &nbsp;B．协作图　&nbsp; &nbsp;&nbsp; ",
                        " C．流程图 ",
                        " D．活动图 "
                    ]
                },
                {
                    "index": 129,
                    "belong_page": 1,
                    "question_id": 43819,
                    "question_title": "<p><br/></p><p><br/></p><h3>试题四&nbsp;&nbsp;论企业集成平台的技术与应用</h3><p>企业集成平台是一个支持复杂信息环境下信息系统开发、集成和协同运行的软件支撑环境。它基于各种企业经营业务的信息特征，在异构分布环境(操作系统、网络、数据库)下为应用提供一致的信息访问和交互手段，对其上运行的应用进行管理，为应用提供服务，并支持企业信息环境下各特定领域的应用系统的集成。企业集成平台的核心是企业集成架构，包括信息、过程、应用集成的架构。</p><p>&nbsp;&nbsp; &nbsp;(请围绕“企业集成平台的技术与应用”论题，依次从以下三个方面进行论述。)</p><p>&nbsp;&nbsp; &nbsp;1．概要叙述你参与管理和开发的企业集成平台相关的软件项目以及你在其中所担任的主要工作。</p><p>&nbsp;&nbsp; &nbsp;2．简要说明企业集成平台的基本功能及企业集成的关键技术，并结合项目实际情况，阐述该项目所选择的关键技术及其原因。</p><p>&nbsp;&nbsp; &nbsp;3．结合你具体参与管理和开发的实际项目，举例说明所采用的企业集成架构设计技术的具体实施方式及过程，并详细分析其实现效果。</p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43819,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p>解析：</p><p>&nbsp;</p><p>一、简要叙述所参与管理和开发的软件项目，并明确指出在其中承担的主要任务和开展的主要工作。</p><p>&nbsp;&nbsp; &nbsp;二、企业集成平台的基本功能有：</p><p>&nbsp;&nbsp; &nbsp;1．通信服务</p><p>&nbsp;&nbsp; &nbsp;提供分布环境下透明的同步/异步通信服务功能，使用户和应用程序无须关心具体的操作系统和应用程序所处的网络物理位置，而以透明的函数调用或对象服务方式完成它们所需的通信服务要求。</p><p>&nbsp;&nbsp; &nbsp;2．信息集成服务</p><p>&nbsp;&nbsp; &nbsp;为应用提供透明的信息访问服务，通过实现异种数据库系统之间数据的交换、互操作、分布数据管理和共享信息模型定义(或共享信息数据库的建立)，使集成平台上运行的应用、服务或用户端能够以一致的语义和接口实现对数据(数据库、数据文件、应用交互信息)的访问与控制。</p><p>&nbsp;&nbsp; &nbsp;3．应用集成服务</p><p>&nbsp;&nbsp; &nbsp;通过高层应用编程接口来实现对相应应用程序的访问，这些高层应用编程接口包含在不同的适配器或代理中，被用来连接不同的应用程序。这些接口以函数或对象服务的方式向平台的组件模型提供信息，使用户在无需对原有系统进行修改(不会影响原有系统的功能)的情况下，只要在原有系统的基础上加上相应的访问接口就可以将现有的、用不同的技术实现的系统互联起来，通过为应用提供数据交换和访问操作，使各种不同的系统能够相互协作。</p><p>&nbsp;&nbsp; &nbsp;4．二次开发工具</p><p>&nbsp;&nbsp; &nbsp;是集成平台提供的一组帮助用户开发特定应用程序(如实现数据转换的适配器或应用封装服务等)的支持工具，其目的是简化用户在企业集成平台实施过程中(特定应用程序接口)的开发工作。</p><p>&nbsp;&nbsp; &nbsp;5．平台运行管理工具</p><p>&nbsp;&nbsp; &nbsp;是企业集成平台的运行管理和控制模块，负责企业集成平台系统的静态和动态配置、集成平台应用运行管理和维护、事件管理和出错管理等。通过命名服务、目录服务、平台的动态静态配置，以及其中的关键数据的定期备份等功能来维护整个服务平台的系统配置及稳定运行。</p><p>&nbsp;&nbsp; &nbsp;企业集成的关键技术：</p><p>&nbsp;&nbsp; &nbsp;1．数据交换格式</p><p>&nbsp;&nbsp; &nbsp;企业业务数据可以分为结构化数据(表单)和非结构化数据(文档)，它们一般存储在不同数据库或文档管理系统中。企业数据集成中常用的几种数据交换格式如下。</p><p>&nbsp;&nbsp; &nbsp;(1)EDI(电子数据交换)。EDI格式处理的目的是将在功效上与纸介质文件等同的电子表单用统一的(或标准的)的格式进行表示，以保证各个独立开发的计算机应用之间能够实现表单数据共享与集成。</p><p>&nbsp;&nbsp; &nbsp;(2)XML。XML是W3C制定的一个面向各类信息的数据存储工具盒可配置载体的开放式标准，其目的是为了更好地使用Web应用的需求，解决HTML在表达能力、可扩展性和交互性等方面的缺陷。</p><p>&nbsp;&nbsp; &nbsp;(3)STEP。STEP标准是一个描述如何表达和交换数字化产品信息的ISO标准，其目的是提供一种不依赖于具体系统的中性模型和机制，并将其用来描述整个生命周期内的产品数据。</p><p>&nbsp;&nbsp; &nbsp;(4)PDML。PDML的技术目标是提供一种灵活的方法，使得不同应用软件系统中的产品数据能够进行交换。它是在STEP和XML基础上实现不同系统间产品数据交换和集成的一种新模式。</p><p>&nbsp;&nbsp; &nbsp;2．分布式应用集成基础框架</p><p>&nbsp;&nbsp; &nbsp;比较有影响的主要有：</p><p>&nbsp;&nbsp; &nbsp;(1)CORBA。CORBA是对象管理组织(OMG)为解决分布式处理环境中硬件和软件系统的互连而提出的一种标准的面向对象应用程序体系规范。</p><p>&nbsp;&nbsp; &nbsp;(2)COM＋。</p><p>&nbsp;&nbsp; &nbsp;(3)Java EE。</p><p>&nbsp;&nbsp; &nbsp;(4)Web Service。</p><p>&nbsp;&nbsp; &nbsp;(对于实际采用的关键技术，应结合项目实际情况，说明选择这种/这些技术的原因)</p><p>&nbsp;&nbsp; &nbsp;三、考生需结合自身参与项目的实际状况，指出其参与管理和开发的项目是如何应用所选择的关键技术进行企业集成架构的设计与实现的，说明具体的实施过程、方式方法和工具，并对实现效果进行分析。&nbsp;　&nbsp;　</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>见解析</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 130,
                    "belong_page": 1,
                    "question_id": 348670,
                    "question_title": "1、项目配置管理中，配置项的状态通常包括？<br/><br/>2、成本管理的过程有哪些？<br/><br/>3、采集人口信息是属于电子政务的哪种类型？<br/><br/>4、哪种信息系统战略规划方式是“找出实现目标所需要的关键信息集合，从而确定系统开发的优先次序。”<br/><br/>5、信息化需求包括哪三个层次？<br/><br/>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 348670,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "详见答案",
                    "like": 0,
                    "answer": [
                        "1、项目配置管理中，配置项的状态通常包括？<br/>答：草稿、正式发布和正在修改<br/>2、成本管理的过程有哪些？<br/>答：成本估算、成本预算、成本控制<br/>3、采集人口信息是属于电子政务的哪种类型？<br/>答：政府对政府或G2G<br/>4、哪种信息系统战略规划方式是“找出实现目标所需要的关键信息集合，从而确定系统开发的优先次序。”<br/>答：关键成功因素法<br/>5、信息化需求包括哪三个层次？<br/>答：战略需求、运作需求、技术需求"
                    ],
                    "option": ""
                },
                {
                    "index": 131,
                    "belong_page": 1,
                    "question_id": 348854,
                    "question_title": "1、某公司欲开发一个大型多人即时战略游戏，游戏设计的目标之一是能够支持玩家自行创建战役地图，定义游戏对象的行为和对象之间的关系。针对该需求，在层次风格、解释器风格、黑板和事件驱动风中公司应该采用什么架构风格最为合适？<br/><br/>2、在基于体系结构的软件设计方法中，采用什么来描述软件架构？<br/><br/>3、哪种视图能解决并发性、分布性等问题？<br/><br/>4、某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3&nbsp;个核心质量<br/>属性场景。其中“网站在并发用户数量10&nbsp;万的负载情况下，用户请求的平均响应时间应小<br/>于3&nbsp;秒”这一场景主要与什么质量属性相关？<br/><br/>5、ABSDM模型把整个基于体系结构的软件过程划分为体系结构需求、设计、文档化、复审、实现和什么等6个子过程？<br/><br/>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 348854,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "详见答案",
                    "like": 0,
                    "answer": [
                        "1、某公司欲开发一个大型多人即时战略游戏，游戏设计的目标之一是能够支持玩家自行创建战役地图，定义游戏对象的行为和对象之间的关系。针对该需求，在层次风格、解释器风格、黑板和事件驱动风中公司应该采用什么架构风格最为合适？<br/>答：解释器风格<br/>2、在基于体系结构的软件设计方法中，采用什么来描述软件架构？<br/>答：采用视角与视图来描述软件架构<br/>3、哪种视图能解决并发性、分布性等问题？<br/>答：&nbsp;进程视图<br/>4、某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3&nbsp;个核心质量<br/>属性场景。其中“网站在并发用户数量10&nbsp;万的负载情况下，用户请求的平均响应时间应小<br/>于3&nbsp;秒”这一场景主要与什么质量属性相关？<br/>答：性能<br/>5、ABSDM模型把整个基于体系结构的软件过程划分为体系结构需求、设计、文档化、复审、实现和什么等6个子过程？<br/>答：体系结构演化"
                    ],
                    "option": ""
                }
            ],
            "total_question": 131,
            "summary": {
                "radio": {
                    "total_question": 126,
                    "total_score": 0
                },
                "multiple": {
                    "total_question": 0,
                    "total_score": 0
                },
                "fill": {
                    "total_question": 0,
                    "total_score": 0
                },
                "program": {
                    "total_question": 0,
                    "total_score": 0
                },
                "qanda": {
                    "total_question": 3,
                    "total_score": 0
                },
                "cloze": {
                    "total_question": 2,
                    "total_score": 0
                },
                "budingxiang": {
                    "total_question": 0,
                    "total_score": 0
                },
                "material": {
                    "total_question": 0,
                    "total_score": 0
                }
            },
            "title": "系统架构与集成技术"
        },
        "pagination": {
            "curPage": 1,
            "pageSize": 1000,
            "total": 131,
            "hasNextPage": false
        },
        "totalOrder": [
            {
                "index": 1,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43335",
                "answer_type": 1
            },
            {
                "index": 2,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43336",
                "answer_type": 1
            },
            {
                "index": 3,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43355",
                "answer_type": 1
            },
            {
                "index": 4,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43527",
                "answer_type": 1
            },
            {
                "index": 5,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46862",
                "answer_type": 1
            },
            {
                "index": 6,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46865",
                "answer_type": 1
            },
            {
                "index": 7,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46866",
                "answer_type": 1
            },
            {
                "index": 8,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46867",
                "answer_type": 1
            },
            {
                "index": 9,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46868",
                "answer_type": 1
            },
            {
                "index": 10,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46869",
                "answer_type": 1
            },
            {
                "index": 11,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49841",
                "answer_type": 1
            },
            {
                "index": 12,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49842",
                "answer_type": 1
            },
            {
                "index": 13,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49939",
                "answer_type": 1
            },
            {
                "index": 14,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49946",
                "answer_type": 1
            },
            {
                "index": 15,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63633",
                "answer_type": 1
            },
            {
                "index": 16,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63634",
                "answer_type": 1
            },
            {
                "index": 17,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "103128",
                "answer_type": 1
            },
            {
                "index": 18,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "103129",
                "answer_type": 1
            },
            {
                "index": 19,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "103130",
                "answer_type": 1
            },
            {
                "index": 20,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "103132",
                "answer_type": 1
            },
            {
                "index": 21,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208402",
                "answer_type": 1
            },
            {
                "index": 22,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208403",
                "answer_type": 1
            },
            {
                "index": 23,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208478",
                "answer_type": 1
            },
            {
                "index": 24,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281321",
                "answer_type": 1
            },
            {
                "index": 25,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281322",
                "answer_type": 1
            },
            {
                "index": 26,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281323",
                "answer_type": 1
            },
            {
                "index": 27,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281325",
                "answer_type": 1
            },
            {
                "index": 28,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281326",
                "answer_type": 1
            },
            {
                "index": 29,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "281330",
                "answer_type": 1
            },
            {
                "index": 30,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "281332",
                "answer_type": 1
            },
            {
                "index": 31,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "281338",
                "answer_type": 1
            },
            {
                "index": 32,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281340",
                "answer_type": 1
            },
            {
                "index": 33,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281341",
                "answer_type": 1
            },
            {
                "index": 34,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "281353",
                "answer_type": 1
            },
            {
                "index": 35,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281356",
                "answer_type": 1
            },
            {
                "index": 36,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281357",
                "answer_type": 1
            },
            {
                "index": 37,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281358",
                "answer_type": 1
            },
            {
                "index": 38,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281366",
                "answer_type": 1
            },
            {
                "index": 39,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281367",
                "answer_type": 1
            },
            {
                "index": 40,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281368",
                "answer_type": 1
            },
            {
                "index": 41,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281369",
                "answer_type": 1
            },
            {
                "index": 42,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281612",
                "answer_type": 1
            },
            {
                "index": 43,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281613",
                "answer_type": 1
            },
            {
                "index": 44,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281614",
                "answer_type": 1
            },
            {
                "index": 45,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281615",
                "answer_type": 1
            },
            {
                "index": 46,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281616",
                "answer_type": 1
            },
            {
                "index": 47,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281617",
                "answer_type": 1
            },
            {
                "index": 48,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281619",
                "answer_type": 1
            },
            {
                "index": 49,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281620",
                "answer_type": 1
            },
            {
                "index": 50,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281622",
                "answer_type": 1
            },
            {
                "index": 51,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281623",
                "answer_type": 1
            },
            {
                "index": 52,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281624",
                "answer_type": 1
            },
            {
                "index": 53,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348882",
                "answer_type": 1
            },
            {
                "index": 54,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348883",
                "answer_type": 1
            },
            {
                "index": 55,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348884",
                "answer_type": 1
            },
            {
                "index": 56,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281626",
                "answer_type": 1
            },
            {
                "index": 57,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281627",
                "answer_type": 1
            },
            {
                "index": 58,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281628",
                "answer_type": 1
            },
            {
                "index": 59,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "281629",
                "answer_type": 1
            },
            {
                "index": 60,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "283633",
                "answer_type": 1
            },
            {
                "index": 61,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "283634",
                "answer_type": 1
            },
            {
                "index": 62,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "283635",
                "answer_type": 1
            },
            {
                "index": 63,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "283640",
                "answer_type": 1
            },
            {
                "index": 64,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "283641",
                "answer_type": 1
            },
            {
                "index": 65,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "283646",
                "answer_type": 1
            },
            {
                "index": 66,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "283647",
                "answer_type": 1
            },
            {
                "index": 67,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "283649",
                "answer_type": 1
            },
            {
                "index": 68,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "283650",
                "answer_type": 1
            },
            {
                "index": 69,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284674",
                "answer_type": 1
            },
            {
                "index": 70,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284675",
                "answer_type": 1
            },
            {
                "index": 71,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284676",
                "answer_type": 1
            },
            {
                "index": 72,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284678",
                "answer_type": 1
            },
            {
                "index": 73,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284679",
                "answer_type": 1
            },
            {
                "index": 74,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284683",
                "answer_type": 1
            },
            {
                "index": 75,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284684",
                "answer_type": 1
            },
            {
                "index": 76,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284685",
                "answer_type": 1
            },
            {
                "index": 77,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "284693",
                "answer_type": 1
            },
            {
                "index": 78,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284695",
                "answer_type": 1
            },
            {
                "index": 79,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284696",
                "answer_type": 1
            },
            {
                "index": 80,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "284697",
                "answer_type": 1
            },
            {
                "index": 81,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "284708",
                "answer_type": 1
            },
            {
                "index": 82,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284711",
                "answer_type": 1
            },
            {
                "index": 83,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284712",
                "answer_type": 1
            },
            {
                "index": 84,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284713",
                "answer_type": 1
            },
            {
                "index": 85,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284719",
                "answer_type": 1
            },
            {
                "index": 86,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284720",
                "answer_type": 1
            },
            {
                "index": 87,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284721",
                "answer_type": 1
            },
            {
                "index": 88,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284722",
                "answer_type": 1
            },
            {
                "index": 89,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303684",
                "answer_type": 1
            },
            {
                "index": 90,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303685",
                "answer_type": 1
            },
            {
                "index": 91,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303686",
                "answer_type": 1
            },
            {
                "index": 92,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303688",
                "answer_type": 1
            },
            {
                "index": 93,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303689",
                "answer_type": 1
            },
            {
                "index": 94,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303691",
                "answer_type": 1
            },
            {
                "index": 95,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303692",
                "answer_type": 1
            },
            {
                "index": 96,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303693",
                "answer_type": 1
            },
            {
                "index": 97,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303695",
                "answer_type": 1
            },
            {
                "index": 98,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303696",
                "answer_type": 1
            },
            {
                "index": 99,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303697",
                "answer_type": 1
            },
            {
                "index": 100,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303698",
                "answer_type": 1
            },
            {
                "index": 101,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303700",
                "answer_type": 1
            },
            {
                "index": 102,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303701",
                "answer_type": 1
            },
            {
                "index": 103,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303702",
                "answer_type": 1
            },
            {
                "index": 104,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303703",
                "answer_type": 1
            },
            {
                "index": 105,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303704",
                "answer_type": 1
            },
            {
                "index": 106,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303705",
                "answer_type": 1
            },
            {
                "index": 107,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "310877",
                "answer_type": 1
            },
            {
                "index": 108,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350305",
                "answer_type": 1
            },
            {
                "index": 109,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350306",
                "answer_type": 1
            },
            {
                "index": 110,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350307",
                "answer_type": 1
            },
            {
                "index": 111,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352268",
                "answer_type": 1
            },
            {
                "index": 112,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352269",
                "answer_type": 1
            },
            {
                "index": 113,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356085",
                "answer_type": 1
            },
            {
                "index": 114,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356086",
                "answer_type": 1
            },
            {
                "index": 115,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356087",
                "answer_type": 1
            },
            {
                "index": 116,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356088",
                "answer_type": 1
            },
            {
                "index": 117,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356089",
                "answer_type": 1
            },
            {
                "index": 118,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356090",
                "answer_type": 1
            },
            {
                "index": 119,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356091",
                "answer_type": 1
            },
            {
                "index": 120,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356092",
                "answer_type": 1
            },
            {
                "index": 121,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356096",
                "answer_type": 1
            },
            {
                "index": 122,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356097",
                "answer_type": 1
            },
            {
                "index": 123,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356098",
                "answer_type": 1
            },
            {
                "index": 124,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356099",
                "answer_type": 1
            },
            {
                "index": 125,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356100",
                "answer_type": 1
            },
            {
                "index": 126,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356101",
                "answer_type": 1
            },
            {
                "index": 127,
                "question_type": "8",
                "belong_page": 1,
                "question_id": "356094",
                "answer_type": 1
            },
            {
                "index": 128,
                "question_type": "8",
                "belong_page": 1,
                "question_id": "356095",
                "answer_type": 1
            },
            {
                "index": 129,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43819",
                "answer_type": 5
            },
            {
                "index": 130,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "348670",
                "answer_type": 5
            },
            {
                "index": 131,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "348854",
                "answer_type": 5
            }
        ],
        "progress": []
    }
}
