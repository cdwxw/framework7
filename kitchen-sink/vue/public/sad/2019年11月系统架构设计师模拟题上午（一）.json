{
    "msg": "成功",
    "status": 0,
    "data": {
        "data": {
            "examine": {
                "examine_id": 7653,
                "answer_id": "3940004",
                "title": "2019年11月系统架构设计师模拟题上午（一）",
                "len_time": 0,
                "total_score": "75",
                "get_score": "0",
                "total_question": 75,
                "proposal": "",
                "proposalList": [
                    {
                        "proposal": "",
                        "comment_time": "0",
                        "log_id": "8588600"
                    }
                ],
                "platform_id": "2",
                "submit_limit_num": "0",
                "version_id": "0",
                "version_year": "0",
                "mark_question_ids": []
            },
            "question": [
                {
                    "every_score": "1",
                    "rank": "1",
                    "correlation_time": "0",
                    "question_id": "151184",
                    "difficulty_id": "3",
                    "question_title": "某文件管理系统在磁盘上建立了位示图（bitmap），记录磁盘的使用情况。若磁盘上物理块的编号依次为：0、1、2、....；系统中的字长为32位，位示图中字的编号依次为：0、1、2、..，每个字中的一个二进制位对应文件存储器上的一个物理块，取值0和1分别表示物理块是空闲或占用。假设操作系统将2053号物理块分配给某文件，那么该物理块的使用情况在位示图中编号为（请作答此空）的字中描述，系统应该将（ ）",
                    "option": [
                        " 32 ",
                        " 33 ",
                        " 64 ",
                        " 65 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "2053/32=64.156，属于第65个字。题干问的是编号，编号64的是第65个字。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151184",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395046",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 1,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "2",
                    "correlation_time": "0",
                    "question_id": "151185",
                    "difficulty_id": "3",
                    "question_title": "<p>某文件管理系统在磁盘上建立了位示图（bitmap），记录磁盘的使用情况。若磁盘上物理块的编号依次为：0、1、2、....；系统中的字长为32位，位示图中字的编号依次为：0、1、2、..，每个字中的一个二进制位对应文件存储器上的一个物理块，取值0和1分别表示物理块是空闲或占用。假设操作系统将2053号物理块分配给某文件，那么该物理块的使用情况在位示图中编号为（请作答此空）的字中描述 。</p>",
                    "option": [
                        " 32 ",
                        " 33 ",
                        " 64 ",
                        " 65 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>2053/32=64.156，属于第65个字。题干问的是编号，编号64的是第65个字。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151185",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395073",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 2,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "3",
                    "correlation_time": "0",
                    "question_id": "151280",
                    "difficulty_id": "3",
                    "question_title": "两个类A和B，如果B的变化可能会引起A的变化，两个事物之间属于（ &nbsp;）",
                    "option": [
                        " 关联关系 ",
                        " 依赖关系 ",
                        " 实现关系 ",
                        " 泛化关系 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "软件设计师",
                    "analyze": "<p>类之间的主要关系有关联、依赖、泛化、聚合、组合和实现等。</p><p>（1）关联关系。关联提供了不同类的对象之问的结构关系，它在一段时间内将多个类的实例连接在一起。</p><p>（2）依赖关系。两个类A和B，如果B的变化可能会引起A的变化，则称类A依赖于类B。</p><p>（3）泛化关系。泛化关系描述了一般事物与该事物中的特殊种类之间的关系，也就是父类与子类之间的关系。继承关系是泛化关系的反关系，也就是说，子类继承了父类，而父类则是子类的泛化。</p><p>（4）聚合。共享聚集关系通常简称为聚合关系，它表示类之间的整体与部分的关系，其含义是“部分”可能同时属于多个“整体”，“部分”与“整体”的生命周期可以不相同。例如，汽车和车轮就是聚合关系，车子坏了，车轮还可以用；车轮坏了，可以再换一个。</p><p>（5）组合。组合聚集关系通常简称为组合关系，它也是表示类之间的整体与部分的关系。与聚合关系的区别在于，组合关系中的“部分”只能属于一个“整体”，“部分”与“整体”的生命周期相同，“部分”随着“整体”的创建而创建，也随着“整体”的消亡而消亡。例如，一个公司包含多个部门，它们之间的关系就是组合关系。公司一旦倒闭，也就无所谓部门了。</p><p>（6）实现关系。实现关系将说明和实现联系起来。接口是对行为而非实现的说明，而类中则包含了实现的结构。一个或多个类可以实现一个接口，而每个类分别实现接口中的操作。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151280",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569400224",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "263",
                    "three_id": "239",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "开发方法（结构化与面向对象）"
                    ],
                    "single_score": 0,
                    "index": 3,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "4",
                    "correlation_time": "0",
                    "question_id": "151187",
                    "difficulty_id": "3",
                    "question_title": "以下关于软件中间件的叙述，错误的是（）。",
                    "option": [
                        " 中间件通过标准接口实现与应用程序的关联，提供特定功能的服务 ",
                        " 使用中间件可以提高应用软件可移植性 ",
                        " 使用中间件有助于提高开发效率 ",
                        " 中间件位于客户机服务器的操作系统之下，应用程序之上。管理计算资源和网络通信。 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，应用程序之下。管理计算资源和网络通信。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151187",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395158",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 4,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "5",
                    "correlation_time": "0",
                    "question_id": "151188",
                    "difficulty_id": "3",
                    "question_title": "以下关于实时操作系统(RTOS)任务调度器的叙述中，正确的是（）。",
                    "option": [
                        " 任务之间的公平性是最重要的调度目标 ",
                        " 大多数RTOS调度算法都是抢占方式(可剥夺方式) ",
                        " RTOS调度器都采用了基于时间片轮转的调度算法 ",
                        " 大多数RTOS调度算法只采用一种静态优先级调度算法 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>任务是RTOS中最重要的操作对象，每个任务在RTOS的调度下由CPU分时执行。任务的调度目前主要有时间分片式、轮流查询式和优先抢占式三种，不同的RTOS可能支持其中一种或几种，其中优先抢占式对实时性的支持最好。</p><p>在非实时系统中，调度的主要目的是缩短系统平均响应时间，提高系统资源的利用率，或优化某一项指标；而实时系统中调度的目的则是要尽可能地保证每个任务满足他们的时间约束，及时对外部请求做出响应。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151188",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395199",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 5,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "6",
                    "correlation_time": "0",
                    "question_id": "151189",
                    "difficulty_id": "3",
                    "question_title": "在高速缓存（Cache）—主存储器构成的存储系统中，（）。",
                    "option": [
                        " 主存地址到Cache地址的变换由硬件完成，以提高速度 ",
                        " 主存地址到Cache地址的变换由软件完成，以提高灵活性 ",
                        " Cache的命中率随其容量增大线性地提高 ",
                        " Cache的内容在任意时刻与主存内容完全一致 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在程序的执行过程中，Cache与主存的地址映射是由硬件自动完成的。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151189",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395253",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "计算机系统基础"
                    ],
                    "single_score": 0,
                    "index": 6,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "7",
                    "correlation_time": "0",
                    "question_id": "151190",
                    "difficulty_id": "3",
                    "question_title": "<p>某企业的生产流水线上有2名工人P1和P2，1名检验员P3。P1]将初步加工的半成品放入半成品箱B1；P2从半成品箱B1取出继续加工，加工好的产品放入成品箱B2；P3从成品箱B2取出产品检验。假设B1可存放n件半成品，B2可存放m件产品，并设置6个信号量S1、S2、S3、S4、S5和S6，且S3和S6的初值都为0。采用PV操作实现P[1]、P2和P3的同步模型如下图所示，则信号量S1和S5 （请作答此空） ；S2、S4的初值分别为 （ ） 。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190925/1569395270736593.jpg\" title=\"1569395270736593.jpg\" alt=\"1.jpg\"/></p>",
                    "option": [
                        " 分别为同步信号量和互斥信号量，初值分别为0和1 ",
                        " 都是同步信号量，其初值分别为0和0 ",
                        " 都是互斥信号量，其初值分别为1和1 ",
                        " 都是互斥信号量，其初值分别为0和1 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>第1小题的正确的答案为C。因为信号量S1是一个互斥信号量，表示半成品箱B1当前有无工人（生产者）使用，所以初值为1。信号量S5也是一个互斥信号量，表示成品箱B2当前有无工人或检验员使用，所以初值为1。</p><p>第2小题的正确的答案为D。信号量S2表示半成品箱B1的容量，故S2的初值为n。当工人P1不断地将其工序上加工的半成品放入半成品箱B1时，应该先测试半成品箱是否有空位，故工人P1使用P(S2)，当工人P2从半成品箱取一件半成品时，半成品箱B1就空出一个空位，故工人P2使用V(S2)释放空间。</p><p>同理，信号量S4表示成品箱B2的容量，故S4的初值为m。当工人P2完成一件产品放入成品箱B2时，应该先测试成品箱是否有空位，故工人P2使用P(S4)，当检验员P3从成品箱取一件产品检验时，成品箱B2就空出一个空位，故检验员P3使用V(S4)释放空间。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151190",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395287",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 7,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "8",
                    "correlation_time": "0",
                    "question_id": "151191",
                    "difficulty_id": "3",
                    "question_title": "<p><span style=\"font-size: 16px;\">某企业的生产流水线上有2名工人P1和P2，1名检验员P3。P1]将初步加工的半成品放入半成品箱B1；P2从半成品箱B1取出继续加工，加工好的产品放入成品箱B2；P3从成品箱B2取出产品检验。假设B1可存放n件半成品，B2可存放m件产品，并设置6个信号量S1、S2、S3、S4、S5和S6，且S3和S6的初值都为0。采用PV操作实现P[1]、P2和P3的同步模型如下图所示，则信号量S1和S5 （ ） ；S2、S4的初值分别为 （请作答此空） 。</span><br/></p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190925/1569395301897430.jpg\" title=\"1569395301897430.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        " n、0 ",
                        " m、0 ",
                        " m、n ",
                        " n、m "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>第1小题的正确的答案为C。因为信号量S1是一个互斥信号量，表示半成品箱B1当前有无工人（生产者）使用，所以初值为1。信号量S5也是一个互斥信号量，表示成品箱B2当前有无工人或检验员使用，所以初值为1。</p><p>第2小题的正确的答案为D。信号量S2表示半成品箱B1的容量，故S2的初值为n。当工人P1不断地将其工序上加工的半成品放入半成品箱B1时，应该先测试半成品箱是否有空位，故工人P1使用P(S2)，当工人P2从半成品箱取一件半成品时，半成品箱B1就空出一个空位，故工人P2使用V(S2)释放空间。</p><p>同理，信号量S4表示成品箱B2的容量，故S4的初值为m。当工人P2完成一件产品放入成品箱B2时，应该先测试成品箱是否有空位，故工人P2使用P(S4)，当检验员P3从成品箱取一件产品检验时，成品箱B2就空出一个空位，故检验员P3使用V(S4)释放空间。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151191",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395319",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 8,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "9",
                    "correlation_time": "0",
                    "question_id": "151192",
                    "difficulty_id": "3",
                    "question_title": "项目时间管理中的过程包括（ &nbsp;）。",
                    "option": [
                        " 活动定义、活动排序、活动的资源估算和工作进度分解 ",
                        " 活动定义、活动排序、活动的资源估算、活动历时估算、制定计划和进度控制 ",
                        " 项目章程、项目范围管理计划、组织过程资产和批准的变更申请 ",
                        " 生产项目计划、项目可交付物说明、信息系统要求说明和项目度量标准 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>时间管理的过程包括：</p><p>⑦活动定义</p><p>⑧活动排序</p><p>⑨活动的资源估算</p><p>⑩活动历时估算</p><p>制定计划</p><p>进度控制</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151192",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395406",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 9,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "10",
                    "correlation_time": "0",
                    "question_id": "151193",
                    "difficulty_id": "3",
                    "question_title": "数据库系统运行的基本工作单位是事务，事务相当于操作系统中的进程，是用户定义的一个数据库操作序列，这些操作序列要么全做要么全不做，是一个不可分割的工作单位。数据库的（请作答此空）是指操作序列要么全做要么全不做。设计时用（ ）实现。数据库从一个一致性状态变到另一个一致性状态的性质称为（ ）。设计时用（ ）检查实现。",
                    "option": [
                        " 一致性 ",
                        " 可用性 ",
                        " 原子性 ",
                        " 隔离性 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据库的原子性是指操作序列要么全做要么全不做。设计时用影子拷贝（浅拷贝）实现。浅拷贝就是你的影子,深拷贝是你的克隆人,你没了影子也就没了,但是克隆人还活着。数据库从一个一致性状态变到另一个一致性状态称为一致性。设计时用完整性约束检查实现。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151193",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395480",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 10,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "11",
                    "correlation_time": "0",
                    "question_id": "151194",
                    "difficulty_id": "3",
                    "question_title": "数据库系统运行的基本工作单位是事务，事务相当于操作系统中的进程，是用户定义的一个数据库操作序列，这些操作序列要么全做要么全不做，是一个不可分割的工作单位。数据库的（ ）是指操作序列要么全做要么全不做。设计时用（请作答此空）实现。数据库从一个一致性状态变到另一个一致性状态的性质称为（ ）。设计时用（ ）检查实现。",
                    "option": [
                        " 影子拷贝 ",
                        " 差异备份 ",
                        " 深拷贝 ",
                        " 完全备份 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据库的原子性是指操作序列要么全做要么全不做。设计时用影子拷贝（浅拷贝）实现。浅拷贝就是你的影子,深拷贝是你的克隆人,你没了影子也就没了,但是克隆人还活着。数据库从一个一致性状态变到另一个一致性状态称为一致性。设计时用完整性约束检查实现。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151194",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395503",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 11,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "12",
                    "correlation_time": "0",
                    "question_id": "151195",
                    "difficulty_id": "3",
                    "question_title": "数据库系统运行的基本工作单位是事务，事务相当于操作系统中的进程，是用户定义的一个数据库操作序列，这些操作序列要么全做要么全不做，是一个不可分割的工作单位。数据库的（ ）是指操作序列要么全做要么全不做。设计时用（ ）实现。数据库从一个一致性状态变到另一个一致性状态的性质称为（请作答此空）。设计时用（ ）检查实现。",
                    "option": [
                        " 一致性 ",
                        " 完整性 ",
                        " 原子性 ",
                        " 隔离性 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据库的原子性是指操作序列要么全做要么全不做。设计时用影子拷贝（浅拷贝）实现。浅拷贝就是你的影子,深拷贝是你的克隆人,你没了影子也就没了,但是克隆人还活着。数据库从一个一致性状态变到另一个一致性状态称为一致性。设计时用完整性约束检查实现。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151195",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395529",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 12,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "13",
                    "correlation_time": "0",
                    "question_id": "151196",
                    "difficulty_id": "3",
                    "question_title": "数据库系统运行的基本工作单位是事务，事务相当于操作系统中的进程，是用户定义的一个数据库操作序列，这些操作序列要么全做要么全不做，是一个不可分割的工作单位。数据库的（ ）是指操作序列要么全做要么全不做。设计时用（ ）实现。数据库从一个一致性状态变到另一个一致性状态的性质称为（ ）。设计时用（请作答此空）检查实现。",
                    "option": [
                        " 封锁协议 ",
                        " 完整性约束 ",
                        " 影子拷贝 ",
                        " 测试 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据库的原子性是指操作序列要么全做要么全不做。设计时用影子拷贝（浅拷贝）实现。浅拷贝就是你的影子,深拷贝是你的克隆人,你没了影子也就没了,但是克隆人还活着。数据库从一个一致性状态变到另一个一致性状态称为一致性。设计时用完整性约束检查实现。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151196",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395551",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 13,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "14",
                    "correlation_time": "0",
                    "question_id": "151197",
                    "difficulty_id": "3",
                    "question_title": "数据仓库不包括（）",
                    "option": [
                        " 数据源 ",
                        " OLAP 服务器 ",
                        " OLTP 服务器 ",
                        " 报表工具 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据仓库包括数据源、数据的存储与管理、OLAP 服务器与各种报表工具、查询工具、数据分析工具、数据挖掘工具及各种基于数据仓库或数据集市的应用开发工具。OLTP是传统的关系型数据库联机事务处理过程。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151197",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395595",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 14,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "15",
                    "correlation_time": "0",
                    "question_id": "151198",
                    "difficulty_id": "3",
                    "question_title": "分布式数据库缓存技术有Memcache与Redis，关于两者的说法正确的是（）",
                    "option": [
                        " Memcache不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。 ",
                        " Redis支持多线程 ",
                        " Memcache不能进行内存管理 ",
                        " Redis支持主从、sentinel、cluster等分布式存储方式 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>两者的对比如下所示：</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190925/1569395627436724.jpg\" title=\"1569395627436724.jpg\" alt=\"1.jpg\"/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151198",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395631",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 15,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "16",
                    "correlation_time": "0",
                    "question_id": "340295",
                    "difficulty_id": "3",
                    "question_title": "<p>数据仓库中的（）消除了源数据中的不一致性，提供整个企业的一致性全局信息。</p>",
                    "option": [
                        " 面向主题性 ",
                        " 集成性 ",
                        " 稳定性 ",
                        " 反映历史变化性 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "",
                    "analyze": "<p>数据仓库4大特点：</p><p>面向主题：数据按主题组织。</p><p>集成的：消除了源数据中的不一致性，提供整个企业的一致性全局信息。</p><p>相对稳定的(非易失的)：主要进行查询操作，只有少量的修改和删除操作（或是不删除）。</p><p>反映历史变化(随着时间变化)：记录了企业从过去某一时刻到当前各个阶段的信息，可对发展历程和未来趋势做定量分析和预测。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "340295",
                    "sort_son": "0",
                    "creater_name": "mb618b3cf4e0052",
                    "create_time": "1651894831",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "241",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 16,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "17",
                    "correlation_time": "0",
                    "question_id": "151200",
                    "difficulty_id": "3",
                    "question_title": "分布透明性指用户不必关心数据的逻辑分片，不必关心数据存储的物理位置分配细节，也不必关心局部场地上数据库的数据模型。（请作答此空）是分布透明性的最高层次。（ ）指用户或应用程序应当了解分片情况，但不必了解片段的存储场地。（）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。",
                    "option": [
                        " 分片透明性 ",
                        " 逻辑透明性 ",
                        " 位置透明性 ",
                        " 全局透明性 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>分布透明性包括：分片透明性、位置透明性和局部数据模型透明性。</p><p>（1）分片透明性是分布透明性的最高层次。所谓分片透明性是指用户或应用程序只对全局关系进行操作而不必考虑数据的分片。当分片模式改变时，只要改变全局模式到分片模式的映像，而不影响全局模式和应用程序。全局模式不变，应用程序不必改写，这就是分片透明性。</p><p>（2）位置透明性是分布透明性的下一层次。所谓位置透明性是指，用户或应用程序应当了解分片情况，但不必了解片段的存储场地。</p><p>（3）局部数据模型（逻辑透明）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151200",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395735",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 17,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "18",
                    "correlation_time": "0",
                    "question_id": "151201",
                    "difficulty_id": "3",
                    "question_title": "分布透明性指用户不必关心数据的逻辑分片，不必关心数据存储的物理位置分配细节，也不必关心局部场地上数据库的数据模型。（ ）是分布透明性的最高层次。（请作答此空）指用户或应用程序应当了解分片情况，但不必了解片段的存储场地。（ &nbsp;）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。",
                    "option": [
                        " 分片透明性 ",
                        " 逻辑透明性 ",
                        " 位置透明性 ",
                        " 全局透明性 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>分布透明性包括：分片透明性、位置透明性和局部数据模型透明性。</p><p>（1）分片透明性是分布透明性的最高层次。所谓分片透明性是指用户或应用程序只对全局关系进行操作而不必考虑数据的分片。当分片模式改变时，只要改变全局模式到分片模式的映像，而不影响全局模式和应用程序。全局模式不变，应用程序不必改写，这就是分片透明性。</p><p>（2）位置透明性是分布透明性的下一层次。所谓位置透明性是指，用户或应用程序应当了解分片情况，但不必了解片段的存储场地。</p><p>（3）局部数据模型（逻辑透明）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151201",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395773",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 18,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "19",
                    "correlation_time": "0",
                    "question_id": "151202",
                    "difficulty_id": "3",
                    "question_title": "分布透明性指用户不必关心数据的逻辑分片，不必关心数据存储的物理位置分配细节，也不必关心局部场地上数据库的数据模型。（ ）是分布透明性的最高层次。（ &nbsp;）指用户或应用程序应当了解分片情况，但不必了解片段的存储场地。（请作答此空）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。",
                    "option": [
                        " 分片透明性 ",
                        " 逻辑透明性 ",
                        " 位置透明性 ",
                        " 全局透明性 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>分布透明性包括：分片透明性、位置透明性和局部数据模型透明性。</p><p>（1）分片透明性是分布透明性的最高层次。所谓分片透明性是指用户或应用程序只对全局关系进行操作而不必考虑数据的分片。当分片模式改变时，只要改变全局模式到分片模式的映像，而不影响全局模式和应用程序。全局模式不变，应用程序不必改写，这就是分片透明性。</p><p>（2）位置透明性是分布透明性的下一层次。所谓位置透明性是指，用户或应用程序应当了解分片情况，但不必了解片段的存储场地。</p><p>（3）局部数据模型（逻辑透明）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151202",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395818",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 19,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "20",
                    "correlation_time": "0",
                    "question_id": "151203",
                    "difficulty_id": "3",
                    "question_title": "给定关系模式 R&lt;U,F&gt;;其中 U 为属性集，F 是 U 上的一组函数依赖，那么Armstroog 公理系统的增广律是指（ &nbsp;）。",
                    "option": [
                        " 若 X→Y，X→Z，则 X→YZ 为 F 所蕴涵 ",
                        " 若 X→Y，WY→Z，则 XW→Z 为 F 所蕴涵 ",
                        " 若 X→Y，Y→Z 为 F 所蕴涵，则 X→Z 为 F 所蕴涵 ",
                        " 若 X→Y，为 F 所蕴涵，且 Z?U,则入 XZ→YZ 为 F 所蕴涵 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>从已知的一些函数依赖，可以推导出另外一些函数依赖，这就需要一系列推理规则。函数依赖的推理规则最早出现在1974年W.W.Armstrong 的论文里，这些规则常被称作“Armstrong 公理”</p><p>设U 是关系模式R 的属性集，F 是R 上成立的只涉及U 中属性的函数依赖集。函数依赖的推理规则有以下三条：</p><p>自反律：若属性集Y 包含于属性集X，属性集X 包含于U，则X→Y 在R 上成立。(此处X→Y是平凡函数依赖)</p><p>增广律：若X→Y 在R 上成立，且属性集Z 包含于属性集U，则XZ→YZ 在R 上成立。</p><p>传递律：若X→Y 和 Y→Z在R 上成立，则X →Z 在R 上成立。</p><p>其他的所有函数依赖的推理规则可以使用这三条规则推导出。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151203",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395863",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 20,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "21",
                    "correlation_time": "0",
                    "question_id": "151204",
                    "difficulty_id": "3",
                    "question_title": "<p>给定关系模式&nbsp;R(A,&nbsp;B,&nbsp;C,&nbsp;D),&nbsp;S(C,&nbsp;D,&nbsp;E),&nbsp;与&nbsp;π<sub>1,3,5</sub>(σ<sub>2=&#39;软件工程&#39;</sub>(R⋈S))&nbsp;等价的SQL语句如下：SELECT&nbsp;(请作答此空)&nbsp;FROM&nbsp;R,&nbsp;S&nbsp;WHERE&nbsp;(&nbsp;)；下列查询&nbsp;B=&#39;信息&#39;&nbsp;且&nbsp;E=&#39;北京&#39;&nbsp;的&nbsp;A、B、E&nbsp;的关系代数表示式中，查询效率最高的是&nbsp;(&nbsp;)。</p>",
                    "option": [
                        " A,C,S.C ",
                        " A,B,E ",
                        " A,R.C,E ",
                        " A,R.C,S.D "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>本题考查关系代数运算与SQL查询方面的基础知识。<br/>一小题的正确答案为选项C。π<sub>1,3,5</sub>(σ<sub>2=&#39;软件工程&#39;</sub>(R⋈S))的含义是从R⋈S结果集中选取B=&#39;软件工程&#39;的元组，再进行 R.A、R.C 和 S.E 投影。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151204",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569395918",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 21,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "22",
                    "correlation_time": "0",
                    "question_id": "177881",
                    "difficulty_id": "3",
                    "question_title": "<p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210414/1618380189842998.png\" title=\"1618380189842998.png\" alt=\"image.png\"/></p>",
                    "option": [
                        " B=软件工程OR R. C=S. C AND R. D=S. D ",
                        " B=‘软件工程’OR R. C=S. C AND R. D=S. D ",
                        " B=‘软件工程’OR R. C=S. C OR R. D=S. D ",
                        " B=‘软件工程’AND R. C=S. C AND R. D=S. D "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>B的最长查询语句最短，因此可以并行执行，提高效率。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177881",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412307",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 22,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "23",
                    "correlation_time": "0",
                    "question_id": "151206",
                    "difficulty_id": "3",
                    "question_title": "<p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210414/1618379686341838.png\" title=\"1618379686341838.png\" alt=\"image.png\"/><span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        "选择A  ",
                        " 选择B ",
                        " 选择C ",
                        " 选择D "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>B的最长查询语句最短，因此可以并行执行，提高效率。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151206",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396057",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 23,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "24",
                    "correlation_time": "0",
                    "question_id": "151207",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（请作答此空）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "option": [
                        " 可用性 ",
                        " 可靠性 ",
                        " 性能 ",
                        " 容错性 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151207",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396090",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 24,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "25",
                    "correlation_time": "0",
                    "question_id": "151208",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（请作答此空）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "option": [
                        " 可用性 ",
                        " 可修改性 ",
                        " 可靠性 ",
                        " 安全性 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151208",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396125",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 25,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "26",
                    "correlation_time": "0",
                    "question_id": "151209",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（请作答此空）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "option": [
                        " 可用性 ",
                        " 可修改性 ",
                        " 可靠性 ",
                        " 安全性 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151209",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396170",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 26,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "27",
                    "correlation_time": "0",
                    "question_id": "151210",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（请作答此空）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151210",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396213",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 27,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "28",
                    "correlation_time": "0",
                    "question_id": "151211",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（请作答此空）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151211",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396306",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 28,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "29",
                    "correlation_time": "0",
                    "question_id": "151212",
                    "difficulty_id": "3",
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（ ）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（请作答此空）。</p>",
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151212",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396457",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 29,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "30",
                    "correlation_time": "0",
                    "question_id": "151213",
                    "difficulty_id": "3",
                    "question_title": "对于开发模型来说，（请作答此空）复用好、开发过程无间隙、节省时间。（）是瀑布与原型（演化）模型结合体，适用于复杂项目。（）需要用户参与，模块化要求高，不适用新技术。（）是用例驱动、架构为中心、迭代、增量。",
                    "option": [
                        " RAD模型 ",
                        " 螺旋模型 ",
                        " RUP模型 ",
                        " 喷泉模型 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>开发模型的特点如下：</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190925/1569396523928379.jpg\" title=\"1569396523928379.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151213",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396552",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 30,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "31",
                    "correlation_time": "0",
                    "question_id": "151214",
                    "difficulty_id": "3",
                    "question_title": "对于开发模型来说，（ ）复用好、开发过程无间隙、节省时间。（请作答此空）是瀑布与原型（演化）模型结合体，适用于复杂项目。（）需要用户参与，模块化要求高，不适用新技术。（）是用例驱动、架构为中心、迭代、增量。",
                    "option": [
                        " RAD模型 ",
                        " 螺旋模型 ",
                        " RUP模型 ",
                        " 喷泉模型 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>开发模型的特点如下：</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190925/1569396582417625.jpg\" title=\"1569396582417625.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151214",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396585",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 31,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "32",
                    "correlation_time": "0",
                    "question_id": "151215",
                    "difficulty_id": "3",
                    "question_title": "对于开发模型来说，（ ）复用好、开发过程无间隙、节省时间。（ ）是瀑布与原型（演化）模型结合体，适用于复杂项目。（请作答此空）需要用户参与，模块化要求高，不适用新技术。（）是用例驱动、架构为中心、迭代、增量。",
                    "option": [
                        " RAD模型 ",
                        " 螺旋模型 ",
                        " RUP模型 ",
                        " 喷泉模型 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>开发模型的特点如下：</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190925/1569396637510592.jpg\" title=\"1569396637510592.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151215",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396640",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 32,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "33",
                    "correlation_time": "0",
                    "question_id": "151310",
                    "difficulty_id": "3",
                    "question_title": "对于开发模型来说，（ ）复用好、开发过程无间隙、节省时间。（ ）是瀑布与原型（演化）模型结合体，适用于复杂项目。（ &nbsp;）需要用户参与，模块化要求高，不适用新技术。（请作答此空）是用例驱动、架构为中心、迭代、增量。",
                    "option": [
                        " RAD模型 ",
                        " 螺旋模型 ",
                        " RUP模型 ",
                        " 喷泉模型 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "软件设计师",
                    "analyze": "<p>开发模型的特点如下：</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190925/1569401878969573.jpg\" title=\"1569401878969573.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151310",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569401893",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "263",
                    "three_id": "239",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "开发方法（结构化与面向对象）"
                    ],
                    "single_score": 0,
                    "index": 33,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "34",
                    "correlation_time": "0",
                    "question_id": "151217",
                    "difficulty_id": "3",
                    "question_title": "在面向对象分析中，利用（请作答此空）表示需求，并从中提炼出中（），以上两者形成（），之后再进行后续的开发工作。",
                    "option": [
                        " 类图 ",
                        " 数据流图 ",
                        " 包图 ",
                        " 用例与用例图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在面向对象分析中，利用用例与用例图表示需求，从用例模型中提炼形成领域模型，用例的实现可以用交互图表示。从领域模型和用例图形成类图，用包图和类图形成体系结构图。之后再进行后续的开发工作。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151217",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396723",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 34,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "35",
                    "correlation_time": "0",
                    "question_id": "151218",
                    "difficulty_id": "3",
                    "question_title": "在面向对象分析中，利用（ ）表示需求，并从中提炼出中（请作答此空），以上两者形成（），之后再进行后续的开发工作。",
                    "option": [
                        " 领域模型 ",
                        " 架构模型 ",
                        " 体系结构图 ",
                        " 类图 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在面向对象分析中，利用用例与用例图表示需求，从用例模型中提炼形成领域模型，用例的实现可以用交互图表示。从领域模型和用例图形成类图，用包图和类图形成体系结构图。之后再进行后续的开发工作。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151218",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396754",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 35,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "36",
                    "correlation_time": "0",
                    "question_id": "177895",
                    "difficulty_id": "3",
                    "question_title": "在面向对象分析中，利用（ &nbsp;）表示需求，并从中提炼出中（ &nbsp;），以上两者形成（请作答此空），之后再进行后续的开发工作。",
                    "option": [
                        " 领域模型 ",
                        " 包图 ",
                        " 体系结构图 ",
                        " 类图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在面向对象分析中，利用用例与用例图表示需求，从用例模型中提炼形成领域模型，用例的实现可以用交互图表示。从领域模型和用例图形成类图，用包图和类图形成体系结构图。之后再进行后续的开发工作。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177895",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412882",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 36,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "37",
                    "correlation_time": "0",
                    "question_id": "151220",
                    "difficulty_id": "3",
                    "question_title": "<p>关于集中式负载均衡的特点不正确的是（ ）</p>",
                    "option": [
                        " 系统的可扩展性不强，均衡器需要记录所有计算机的负载信息。 ",
                        " 安全性较差，如果均衡器所在的计算机瘫痪，则会导致整个集群系统的瘫痪。 ",
                        " 与分布式负载均衡方式相比，实现简单。 ",
                        " 实现灵活，负载均衡器可以根据不同场景的特性配置不同的均衡策略。 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>与分布式负载均衡方式相比，集中式负载均衡实现简单，但也存在以下缺点：</p><p>（1）系统的可扩展性不强，均衡器需要记录所有计算机的负载信息。</p><p>（2）安全性较差，如果均衡器所在的计算机瘫痪，则会导致整个集群系统的瘫痪。</p><p>（3）实现不够灵活，负载均衡器很难根据不同场景的特性配置不同的均衡策略。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151220",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569396838",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 37,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "38",
                    "correlation_time": "0",
                    "question_id": "151221",
                    "difficulty_id": "3",
                    "question_title": "（ ）是一种静态的故障屏蔽技术，采用前向恢复的策略；N版本程序的设计思想是用N个具有相同功能的程序同时执行一项计算，结果通过多数表决来选择。",
                    "option": [
                        " N版本程序设计 ",
                        " M模冗余 ",
                        " 恢复块方法 ",
                        " 防卫式程序设计等 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "N版本程序的设计思想是用N个具有相同功能的程序同时执行一项计算，结果通过多数表决来选择。其中N个版本的程序必须由不同的人（小组）独立设计，使用不同的方法、不同的设计语言、不同的开发环境和工具来实现，目的是减少N个版本的程序在表决点上相关错误的概率。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151221",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397004",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 38,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "39",
                    "correlation_time": "0",
                    "question_id": "151222",
                    "difficulty_id": "3",
                    "question_title": "（请作答此空）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（）模式最适合。",
                    "option": [
                        " 组合 ",
                        " 外观 ",
                        " 享元 ",
                        " 装饰器 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151222",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397078",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 39,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "40",
                    "correlation_time": "0",
                    "question_id": "151223",
                    "difficulty_id": "3",
                    "question_title": "（ ）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（请作答此空）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（）模式最适合。",
                    "option": [
                        " 工厂方法 ",
                        " 享元 ",
                        " 观察者 ",
                        " 中介者 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151223",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397131",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 40,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "41",
                    "correlation_time": "0",
                    "question_id": "151224",
                    "difficulty_id": "3",
                    "question_title": "（ ）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（ ）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（请作答此空）模式最适合。",
                    "option": [
                        " 装饰器 ",
                        " 享元 ",
                        " 观察者 ",
                        " 中介者 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151224",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397176",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 41,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "42",
                    "correlation_time": "0",
                    "question_id": "151225",
                    "difficulty_id": "3",
                    "question_title": "在uml图中，（请作答此空）展现了一组对象、接口、协作和它们之间的关系。（）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "option": [
                        " 类图 ",
                        " 对象图 ",
                        " 部署图 ",
                        " 定时图 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151225",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397218",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 42,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "43",
                    "correlation_time": "0",
                    "question_id": "151226",
                    "difficulty_id": "3",
                    "question_title": "在uml图中，（ ）展现了一组对象、接口、协作和它们之间的关系。（请作答此空）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "option": [
                        " 类图 ",
                        " 包图 ",
                        " 部署图 ",
                        " 定时图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151226",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397250",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 43,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "44",
                    "correlation_time": "0",
                    "question_id": "151227",
                    "difficulty_id": "3",
                    "question_title": "在uml图中，（ ）展现了一组对象、接口、协作和它们之间的关系。（ ）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（请作答此空）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "option": [
                        " 类图 ",
                        " 对象图 ",
                        " 部署图 ",
                        " 交互图 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151227",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397283",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 44,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "45",
                    "correlation_time": "0",
                    "question_id": "177904",
                    "difficulty_id": "3",
                    "question_title": "在uml图中，（ &nbsp;）展现了一组对象、接口、协作和它们之间的关系。（ &nbsp;）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（ &nbsp;）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（请作答此空）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "option": [
                        " 类图 ",
                        " 包图 ",
                        " 部署图 ",
                        " 交互图 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177904",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413218",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 45,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "46",
                    "correlation_time": "0",
                    "question_id": "151229",
                    "difficulty_id": "3",
                    "question_title": "一般来说，架构可以分为三个层次。（请作答此空）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（ ）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151229",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397388",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 46,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "47",
                    "correlation_time": "0",
                    "question_id": "151230",
                    "difficulty_id": "3",
                    "question_title": "一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（请作答此空）结构来实现，其中的（ ）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "option": [
                        " MVC ",
                        " spring ",
                        " AOP ",
                        " Hibernate "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151230",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397462",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 47,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "48",
                    "correlation_time": "0",
                    "question_id": "151231",
                    "difficulty_id": "3",
                    "question_title": "一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（请作答此空）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "option": [
                        " 模型 ",
                        " 控制器 ",
                        " 视图 ",
                        " 处理器 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151231",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397514",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 48,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "49",
                    "correlation_time": "0",
                    "question_id": "151232",
                    "difficulty_id": "3",
                    "question_title": "一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ &nbsp;）结构来实现，其中的（ &nbsp;）负责接收用户的请求，并决定应该调用哪个模型来处理。（请作答此空）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151232",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397606",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 49,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "50",
                    "correlation_time": "0",
                    "question_id": "177909",
                    "difficulty_id": "3",
                    "question_title": "软件架构设计主要关注软件构件的（请作答此空）、属性和（ &nbsp;），并通过多种视图全面描述特定系统的架构。",
                    "option": [
                        " 功能 ",
                        " 实现 ",
                        " 组成元素 ",
                        " 结构 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件架构设计主要关注软件构件的结构、属性和交互作用 ，并通过多种视图全面描述特定系统的架构。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177909",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413421",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 50,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "51",
                    "correlation_time": "0",
                    "question_id": "151234",
                    "difficulty_id": "3",
                    "question_title": "<p>软件架构设计主要关注软件构件的（ ）、属性和（请作答此空），并通过多种视图全面描述特定系统的架构。</p>",
                    "option": [
                        " 实现方式 ",
                        " 交互作用 ",
                        " 设计方案 ",
                        " 测试方式 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件架构设计主要关注软件构件的结构、属性和交互作用 ，并通过多种视图全面描述特定系统的架构。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151234",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569397673",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 51,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "52",
                    "correlation_time": "0",
                    "question_id": "177911",
                    "difficulty_id": "3",
                    "question_title": "某公司拟开发一个新闻系统，该系统可根据用户的注册兴趣，向用户推送其感兴趣的新闻内容，该系统应该采用（ &nbsp;）架构风格最为合适。",
                    "option": [
                        " 虚拟机 ",
                        " 基于规则的系统 ",
                        " 独立构件 ",
                        " 主程序-子程序 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "用户会注册自己的兴趣，然后系统也会把新闻按兴趣分类，如果某个新闻事件发生，可以通过事件来触发推送动作，将新闻推送给对其感兴趣的用户。这是典型独立构件中的事件驱动系统应用场景。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177911",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413472",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 52,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "53",
                    "correlation_time": "0",
                    "question_id": "177912",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个漫步者机器人，用来完成火星探测任务。机器人的控制者首先定义探测任务和任务之间的时序依赖性，机器人接受任务后，需要根据自身状态和外界环境进行动态调整，最终自动完成任务。针对这些需求，该机器人应该采用（ &nbsp;）架构风格最为合适。",
                    "option": [
                        " 虚拟机 ",
                        " 黑板风格 ",
                        " 面向对象风格 ",
                        " 管道-过滤器 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "根据“机器人接受任务后，需要根据自身状态和外界环境进行动态调整”这句话判断采用虚拟机风格更加合适。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177912",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413499",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 53,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "54",
                    "correlation_time": "0",
                    "question_id": "177913",
                    "difficulty_id": "3",
                    "question_title": "传统的编译器采用（请作答此空）风格。现代编译器的集成开发环境则采用（ &nbsp;）风格。",
                    "option": [
                        " 虚拟机 ",
                        " 管道过滤器风格 ",
                        " 数据共享风格 ",
                        " 进程通信 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "管道过滤器风格的完整流程为：「读端口」获取需要处理的信息，通过管道传递给过滤器链，每个过滤器自行判断是否需要对信息进行处理，一个过滤器处理完后通过管道将消息传递给下一个或多个过滤器，直到所有的过滤器全部处理完毕，通过写端口，将处理完成的信息写出到目标位置。而传统编译器（包括词法分析、语法分析、语义分析和代码生成）一个阶段的输出是另一个阶段的输入，符合管道过滤器风格的特点。集成开发环境集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，针对这种需求，采用数据共享风格架构风格比较合适。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177913",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413528",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 54,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "55",
                    "correlation_time": "0",
                    "question_id": "177914",
                    "difficulty_id": "3",
                    "question_title": "传统的编译器采用（ &nbsp;）风格。现代编译器的集成开发环境则采用（请作答此空）风格。",
                    "option": [
                        " 数据流 ",
                        " 管道过滤器风格 ",
                        " 数据共享风格 ",
                        " 进程通信 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "管道过滤器风格的完整流程为：「读端口」获取需要处理的信息，通过管道传递给过滤器链，每个过滤器自行判断是否需要对信息进行处理，一个过滤器处理完后通过管道将消息传递给下一个或多个过滤器，直到所有的过滤器全部处理完毕，通过写端口，将处理完成的信息写出到目标位置。而传统编译器（包括词法分析、语法分析、语义分析和代码生成）一个阶段的输出是另一个阶段的输入，符合管道过滤器风格的特点。集成开发环境集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，针对这种需求，采用数据共享风格架构风格比较合适。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177914",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413554",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 55,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "56",
                    "correlation_time": "0",
                    "question_id": "177915",
                    "difficulty_id": "3",
                    "question_title": "（ &nbsp;）架构风格的核心是资源抽象，将系统中的每一个实体抽象成一种资源。",
                    "option": [
                        " 虚拟机 ",
                        " Rest风格 ",
                        " 层次风格 ",
                        " 数据共享 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在REST中，资源可以简单的理解为URI，表示一个网络实体。比如，/users/1/name，对应id=1的用户的属性name。既然资源是URI，就会具有以下特征：名词，代表一个资源；它对应唯一的一个资源，是资源的地址。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177915",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413604",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 56,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "57",
                    "correlation_time": "0",
                    "question_id": "151240",
                    "difficulty_id": "3",
                    "question_title": "与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（请作答此空）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（ ）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（ ）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。",
                    "option": [
                        " UDDI ",
                        " Rest ",
                        " WSDL ",
                        " SOAP "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查zhao服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查zhao服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151240",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398038",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 57,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "58",
                    "correlation_time": "0",
                    "question_id": "151241",
                    "difficulty_id": "3",
                    "question_title": "与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（ ）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（请作答此空）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（ ）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。",
                    "option": [
                        " UDDI ",
                        " Rest ",
                        " WSDL ",
                        " SOAP "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查zhao服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查zhao服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151241",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398090",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 58,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "59",
                    "correlation_time": "0",
                    "question_id": "151242",
                    "difficulty_id": "3",
                    "question_title": "与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（ ）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（ ）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（请作答此空）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。",
                    "option": [
                        " UDDI ",
                        " Rest ",
                        " WSDL ",
                        " SOAP "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查zhao服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查zhao服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151242",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398134",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 59,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "60",
                    "correlation_time": "0",
                    "question_id": "177919",
                    "difficulty_id": "3",
                    "question_title": "SOA的一种实现方式, （ &nbsp;）在服务请求者和提供者之间传递数据,以及对这些数据进行转换的能力,并支持由实践中总结出来的一些模式如同步模式、异步模式等；",
                    "option": [
                        " Sharding ",
                        " ESB ",
                        " BPEL ",
                        " bind "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "ESB是SOA的一种实现方式, ESB在面向服务的架构中起到的是总线作用,将各种服务进行连接与整合，在服务请求者和提供者之间传递数据,以及对这些数据进行转换的能力,并支持由实践中总结出来的一些模式如同步模式、异步模式等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177919",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413783",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 60,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "61",
                    "correlation_time": "0",
                    "question_id": "151244",
                    "difficulty_id": "3",
                    "question_title": "<p>在软件设计中，（请作答此空）的主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成软件（ ）。而为每个具体任务选择适当的技术手段和处理方法的过程称为（ ）。</p>",
                    "option": [
                        " 详细设计 ",
                        " 概要设计 ",
                        " 架构设计 ",
                        " 数据结构设计 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>系统设计的主要内容包括概要设计和详细设计。概要设计又称为系统总体结构设计，它是系统开发过程中很关键的一步，其主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成软件的模块结构图，即系统结构图。在概要设计中，将系统开发的总任务分解成许多个基本的、具体的任务，为每个具体任务选择适当的技术手段和处理方法的过程称为详细设计。根据任务的不同，详细设计又可分为多种，例如，网络设计、代码设计、输入/输出设计、处理流程设计、数据存储设计、用户界面设计、安全性和可靠性设计等。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151244",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398209",
                    "review_status": "2",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": null,
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 61,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "62",
                    "correlation_time": "0",
                    "question_id": "151245",
                    "difficulty_id": "3",
                    "question_title": "在软件设计中，（ ）的主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成形成软件（请作答此空）。而为每个具体任务选择适当的技术手段和处理方法的过程称为（ ）。",
                    "option": [
                        " 数据流图 ",
                        " 4+1视图 ",
                        " IPO图 ",
                        " 系统结构图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "系统设计的主要内容包括概要设计和详细设计。概要设计又称为系统总体结构设计，它是系统开发过程中很关键的一步，其主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成软件的模块结构图，即系统结构图。在概要设计中，将系统开发的总任务分解成许多个基本的、具体的任务，为每个具体任务选择适当的技术手段和处理方法的过程称为详细设计。根据任务的不同，详细设计又可分为多种，例如，网络设计、代码设计、输入/输出设计、处理流程设计、数据存储设计、用户界面设计、安全性和可靠性设计等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151245",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398245",
                    "review_status": "2",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": null,
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 62,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "63",
                    "correlation_time": "0",
                    "question_id": "177922",
                    "difficulty_id": "3",
                    "question_title": "在软件设计中，（ &nbsp;）的主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成形成软件（ &nbsp;）。而为每个具体任务选择适当的技术手段和处理方法的过程称为（请作答此空）。",
                    "option": [
                        " 详细设计 ",
                        " 概要设计 ",
                        " 架构设计 ",
                        " 数据结构设计 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "系统设计的主要内容包括概要设计和详细设计。概要设计又称为系统总体结构设计，它是系统开发过程中很关键的一步，其主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成软件的模块结构图，即系统结构图。在概要设计中，将系统开发的总任务分解成许多个基本的、具体的任务，为每个具体任务选择适当的技术手段和处理方法的过程称为详细设计。根据任务的不同，详细设计又可分为多种，例如，网络设计、代码设计、输入/输出设计、处理流程设计、数据存储设计、用户界面设计、安全性和可靠性设计等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177922",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413867",
                    "review_status": "2",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": null,
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 63,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "64",
                    "correlation_time": "0",
                    "question_id": "151247",
                    "difficulty_id": "3",
                    "question_title": "<p>甲公司从市场上购买乙公司生产的部件,作为甲公司计算机产品的部件。丙公司已经取得该软件的发明权,并许可乙公司生产销售该软件。下列说法中正确的是（ ）。</p>",
                    "option": [
                        " 甲公司的行为构成对丙公司权利的侵犯 ",
                        " 甲公司的行为不构成对丙公司权利的侵犯 ",
                        " 甲公司的行为不侵犯丙公司的权利,乙公司侵犯了丙公司的权利 ",
                        " 甲公司的行为与乙公司的行为共同构成对丙公司权利的侵犯 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>此题中丙公司享有著作权，乙公司拥有生产与销售权，甲公司合法购买了使用权，各环节都合法，互不侵权。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151247",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398317",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "知识产权"
                    ],
                    "single_score": 0,
                    "index": 64,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "65",
                    "correlation_time": "0",
                    "question_id": "151248",
                    "difficulty_id": "3",
                    "question_title": "数字签名首先需要生成消息摘要，然后发送方用自己的私钥对报文摘要进行加密， 接收方用发送方的公钥验证真伪。生成消息摘要的目的是（请作答此空），对摘要进行加密的目的是（ &nbsp;）。",
                    "option": [
                        " 防止窃听 ",
                        " 防止抵赖 ",
                        " 防止篡改 ",
                        " 防止重放 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>报文摘要用于对发送的报文生成一个非常小的摘要信息。这个摘要信息保证原报文的完整性，即原报文只要有一位被改变，则摘要信息就会不匹配。</p><p>用私钥对摘要做加密，不仅保证了摘要的私密性，还可以防止抵赖。因为只有匹配的公钥能够解开。也就是说，如果用某人的公钥能够解开报文，说明就是某人做的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151248",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398356",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 65,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "66",
                    "correlation_time": "0",
                    "question_id": "151249",
                    "difficulty_id": "3",
                    "question_title": "数字签名首先需要生成消息摘要，然后发送方用自己的私钥对报文摘要进行加密， 接收方用发送方的公钥验证真伪。生成消息摘要的目的是（ ），对摘要进行加密的目的是（请作答此空）。",
                    "option": [
                        " 防止窃听 ",
                        " 防止抵赖 ",
                        " 防止篡改 ",
                        " 防止重放 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>报文摘要用于对发送的报文生成一个非常小的摘要信息。这个摘要信息保证原报文的完整性，即原报文只要有一位被改变，则摘要信息就会不匹配。</p><p>用私钥对摘要做加密，不仅保证了摘要的私密性，还可以防止抵赖。因为只有匹配的公钥能够解开。也就是说，如果用某人的公钥能够解开报文，说明就是某人做的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151249",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398396",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 66,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "67",
                    "correlation_time": "0",
                    "question_id": "151250",
                    "difficulty_id": "3",
                    "question_title": "<p>系统的（ ）性能指标有系统的可靠性、系统的吞吐率（量)、系统响应时间、 系统资源利用率、可移植性。</p>",
                    "option": [
                        " 计算机 ",
                        " 操作系统 ",
                        " 数据库 ",
                        " web服务器 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>操作系统的系统的性能指标有系统的可靠性、系统的吞吐率（量)、系统响应时间、 系统资源利用率、可移植性。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151250",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398434",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 67,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "68",
                    "correlation_time": "0",
                    "question_id": "151251",
                    "difficulty_id": "3",
                    "question_title": "<p>假如有 4 块 80T 的硬盘，采用 RAID6 组建磁盘阵列的容量是（ ）。</p>",
                    "option": [
                        " 40T ",
                        " 80T ",
                        " 160T ",
                        " 240T "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>RAID6的容量是(N-2)*最低容量 = (4-2)*80T = 160T。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151251",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398473",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 68,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "69",
                    "correlation_time": "0",
                    "question_id": "151252",
                    "difficulty_id": "3",
                    "question_title": "甲、乙两个独立的网站都主要靠广告收入来支撑发展，目前都采用较高的价格销售广告。这两个网站都想通过降价争夺更多的客户和更丰厚的利润。假设这两个网站在现有策略下各可以获得1000万元的利润。如果一方单独降价，就能扩大市场份额，可以获得1500万元利润，此时，另一方的市场份额就会缩小，利润将下降到200万元。如果这两个网站同时降价，则他们都将只能得到700万元利润。这两个网站的主管各自经过独立的理性分析后决定，（）。",
                    "option": [
                        " 甲采取高价策略，乙采取低价策略 ",
                        " 甲采取高价策略，乙采取高价策略 ",
                        " 甲采取低价策略，乙采取低价策略 ",
                        " 甲采取低价策略，乙采取高价策略 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>这是一个简单的博弈问题，可以将问题表示为下图所示的得益矩阵。该矩阵分别列出了A网站与B网站在各种价格策略下的利润情况。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190925/1569398528118093.jpg\" title=\"1569398528118093.jpg\" alt=\"1.jpg\"/></p><p>站在A网站的立场上看，假设B网站采用高价策略，那么自己采用高价策略得1000万元，采用低价策略得1500万元，显然应该采用低价策略；如果B网站采用低价策略，那么自己采用高价策略得200万元，采用低价策略得700万元，显然也应该采用低价策略。</p><p>同样，站在B网站的立场上看，也是这样，不管A网站采用什么价格策略，自己都应采用低价策略为好。</p><p>由于A、B网站的主管都独立理性地分析了这种情况，因此，这个博弈的最终结果一定是两个网站都采用低价策略，各得到700万元的利润。</p><p>这是一个非合作博弈之例。参与博弈的任何一方都无法信任对方，都要防备对方抢占自己的市场份额，但也都能独立理性地分析自己的策略与得益。所以，双方博弈的结果对双方都不是理想的结果，但都认为是可以接受的。而合作双赢（都采用高价策略），却涉嫌市场垄断。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151252",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398532",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "应用数学\t"
                    ],
                    "single_score": 0,
                    "index": 69,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "70",
                    "correlation_time": "0",
                    "question_id": "151253",
                    "difficulty_id": "3",
                    "question_title": "<p>2019 年我国将在多地展开5G试点,届时将在人口密集区为用户提供( )bps的用户体验速率。</p>",
                    "option": [
                        " 100M ",
                        " 1G ",
                        " 10G ",
                        " 1T "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>无</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151253",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398621",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 70,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "71",
                    "correlation_time": "0",
                    "question_id": "151254",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （请作答此空）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ ）. The first physical DFD to be drawn is the （ ）. The next step is to distribute data stores to different processors. Data（ ）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ ）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " logical DFDs and ERD ",
                        " ideal object model and analysis class model ",
                        " use case models and interface prototypes ",
                        " physical DFDs and database schema "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151254",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398664",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 71,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "72",
                    "correlation_time": "0",
                    "question_id": "151350",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ ）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （请作答此空）. The first physical DFD to be drawn is the （ ）. The next step is to distribute data stores to different processors. Data（ ）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of（ ）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " the database management system ",
                        " the feasibility of techniques used ",
                        " the network topology and technology ",
                        " the user interface and process methods "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "软件设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151350",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569404194",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "263",
                    "three_id": "239",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 72,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "73",
                    "correlation_time": "0",
                    "question_id": "151256",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ ）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ ）. The first physical DFD to be drawn is the （请作答此空）. The next step is to distribute data stores to different processors. Data（ ）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ ）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " context DFD ",
                        " system DFD ",
                        " network architecture DFD ",
                        " event-response DFD "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151256",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569398734",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 73,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "74",
                    "correlation_time": "0",
                    "question_id": "151352",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ ）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ ）. The first physical DFD to be drawn is the （ ）. The next step is to distribute data stores to different processors. Data（请作答此空）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of（ ）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " vertical partitioning and horizontal replication ",
                        " vertical replication and horizontal partitioning ",
                        " integration and distribution ",
                        " partitioning and replication "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "软件设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151352",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569404272",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "263",
                    "three_id": "239",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 74,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "75",
                    "correlation_time": "0",
                    "question_id": "151353",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ ）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ ）. The first physical DFD to be drawn is the （ ）. The next step is to distribute data stores to different processors. Data（ ）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of（请作答此空）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " storing all data on a single server ",
                        " storing specific tables on different servers ",
                        " storing subsets of specific tables on different servers ",
                        " duplicating specific tables or subsets on different servers "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "软件设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "151353",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1569404326",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "263",
                    "three_id": "239",
                    "show_type_name": "单选题",
                    "examine_id": "7653",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "8",
                    "max_score": "75",
                    "exam_num": "1236",
                    "person_num": "757",
                    "avg_time": "50.5",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 75,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                }
            ],
            "summary": {
                "radio": {
                    "total_question": 75,
                    "total_score": 75,
                    "question_types": [
                        1,
                        9,
                        11
                    ]
                },
                "multiple": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        2,
                        12
                    ]
                },
                "budingxiang": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        7
                    ]
                },
                "judge": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        3,
                        13
                    ]
                },
                "cloze": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        8
                    ]
                },
                "fill": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        4
                    ]
                },
                "qanda": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        5,
                        14
                    ]
                },
                "program": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        6
                    ]
                },
                "material": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        10
                    ]
                }
            }
        },
        "pagination": {
            "curPage": 1,
            "pageSize": 250,
            "total": 75,
            "hasNextPage": false
        },
        "totalOrder": [
            {
                "index": 1,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 2,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 3,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 4,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 5,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 6,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 7,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 8,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 9,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 10,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 11,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 12,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 13,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 14,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 15,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 16,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 17,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 18,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 19,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 20,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 21,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 22,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 23,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 24,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 25,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 26,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 27,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 28,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 29,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 30,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 31,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 32,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 33,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 34,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 35,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 36,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 37,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 38,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 39,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 40,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 41,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 42,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 43,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 44,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 45,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 46,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 47,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 48,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 49,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 50,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 51,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 52,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 53,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 54,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 55,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 56,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 57,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 58,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 59,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 60,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 61,
                "belong_page": 1,
                "is_right": null,
                "user_answer": [],
                "result": 0
            },
            {
                "index": 62,
                "belong_page": 1,
                "is_right": null,
                "user_answer": [],
                "result": 0
            },
            {
                "index": 63,
                "belong_page": 1,
                "is_right": null,
                "user_answer": [],
                "result": 0
            },
            {
                "index": 64,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 65,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 66,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 67,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 68,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 69,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 70,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 71,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 72,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 73,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 74,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 75,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            }
        ]
    }
}
