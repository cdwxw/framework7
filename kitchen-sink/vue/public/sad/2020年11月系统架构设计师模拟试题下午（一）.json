{
    "msg": "成功",
    "status": 0,
    "data": {
        "data": {
            "examine": {
                "examine_id": 10356,
                "answer_id": "3939990",
                "title": "2020年11月系统架构设计师模拟试题下午（一）",
                "len_time": 0,
                "total_score": "125",
                "get_score": "0",
                "total_question": 14,
                "proposal": "",
                "proposalList": [
                    {
                        "proposal": "",
                        "comment_time": "0",
                        "log_id": "8588568"
                    }
                ],
                "platform_id": "2",
                "submit_limit_num": "0",
                "version_id": "0",
                "version_year": "0",
                "mark_question_ids": []
            },
            "question": [
                {
                    "every_score": "12",
                    "rank": "1",
                    "correlation_time": "1599890427",
                    "question_id": "270288",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题1]（12分）</p><p>&nbsp;请分析比较两种集成方案的优点和不足，将表中的(1)～(6)空缺处的内容填写完整。</p><p>应用系统集成方案对比表</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200429/1588132911531834.jpg\" title=\"1588132911531834.jpg\" alt=\"1.jpg\"/>",
                    "option": "",
                    "answer": [
                        "<p>[问题1]（12分）</p>"
                    ],
                    "knowledge": "系统分析师",
                    "analyze": "<p>【问题一】</p><p>&nbsp;&nbsp; &nbsp;如果企业只是进行小规模或较浅层次的“战术”级应用集成，采用传统的集成方式即可较好的完成任务。但是如果企业想从集成系统的灵活性和可扩展角度考虑，能够持续地集成已有信息系统，并进行“战略”意义上的长远规划，那么面向服务的架构无疑是一种更加优越的方法。采用SOA架构思想进行应用集成，企业现有的应用系统都可以看做广义上的服务提供者，因此(1)空缺处应该填写“将现有系统看做抽象的服务提供者，集成方法统一明确”。</p><p>&nbsp;&nbsp; &nbsp;传统的应用集成方式往往采用分层的方式对待整个集成活动，因此在(2)空缺处应该填写“不同层次的集成方法关注点不同，功能组合方面能力较弱”。而采用SOA架构的应用集成方案中，(3)空缺处应该填写“强调功能的暴露与服务的组合，便于提供增值服务”。</p><p>&nbsp;&nbsp; &nbsp;对于(4)空缺处，传统的集成方式大多会采用中心辐射型的集成架构，系统的耦合程度较高。而对于(5)空缺处，SOA架构的ESB采用总线结构模式，简化了应用之间的集成拓扑，系统的耦合度较低。</p><p>&nbsp;&nbsp; &nbsp;采用SOA架构的应用集成方案通过源白实践的模式，提供了基于标准的通用连接服务，使得服务请求者和服务提供者之间可以以松散耦合、动态的方式交互，从而在不同层次上使得解决方案是一个松散耦合、灵活的架构。因此在(6)空缺处应该填写“集成系统具有模块化、松耦合的特点，可扩展性较强”。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题一（25分）<br/>阅读以下关于企业应用集成的叙述，根据要求回答问题。</p><p>[说明]</p><p>&nbsp;&nbsp; &nbsp;某大型企业随着信息化的进展，积累了许多异构的遗产信息系统，这些系统分别采用J2EE、.NET等技术进行开发，分布在不同的地理位置，采用不同的协议进行数据传输。企业要求集成后的系统能够实现功能整合，并在组织现有功能的基础上提供增值服务。FT软件开发公司承接了某大型企业应用系统集成任务。为了按时保质完成任务，选择合适的企业应用集成方法和架构非常重要。项目组在讨论方案时，提出了两种集成思路。</p><p>&nbsp;&nbsp; 魏工建议采用传统的应用集成方法，将应用集成分为多个层次，并采用消息代理中间件连接遗产系统。</p><p>&nbsp;&nbsp; 陈工建议采用基于SOA的方法进行应用集成，将现有遗产系统采用Web Service的方式进行包装，暴露统一格式的接口，并采用企业服务总线(ESB.进行连接。</p><p>&nbsp;&nbsp;&nbsp;项目组仔细分析比较了两种方案的优点和不足后，认为魏工和陈工的建议都合理，但是结合当前项目的实际情况，最后决定采用陈工的建议。</p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "270287",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1588133012",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "241",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 1,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "9",
                    "rank": "2",
                    "correlation_time": "1599890427",
                    "question_id": "270289",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题2]（9分）</p><p>&nbsp;&nbsp; &nbsp;企业数据的分布性和异构性是应用系统方便访问企业数据和在企业数据之上提供增值服务的主要障碍。基于SOA的企业集成通过信息服务提供集成数据的能力，针对该企业的集成实际情况，请用300字以内的文字列举3种基于SOA的企业集成中的“数据整合——信息服务”，并给出简要说明。</p>",
                    "option": "",
                    "answer": [
                        ",(1)联邦服务(Federation,Service)：提供将各种类型的数据聚合的能力，它既支持关系型数据，也支持XML数据、文本数据和内容数据等非关系型数据。同时，所有的数据仍然按照自己本身的方式管理。<p>&nbsp;&nbsp;,&nbsp;(2)复制服务(Replication,Service)：提供远程数据的本地访问能力，它通过自动的实时复制和数据转换，在本地维护一个数据源的副本。本地数据和数据源在技术实现上可以是独立的。</p><p>&nbsp;&nbsp;,&nbsp;(3)转换服务(Transformation,Service)：用于数据源格式到目标格式的转换，可以是批量的或者是基于记录的。</p><p>(4)搜索服务(Search,Service)：提供对企业数据的查询和检索服务，既支持数据库等结构化数据，也支持如PDF等非结构化数据。,　</p><p>以上答案任选三条。</p>"
                    ],
                    "knowledge": "系统分析师",
                    "analyze": "<p>【问题二】</p><p>&nbsp;企业数据的分布性和异构性是应用系统方便访问企业数据和在企业数据之上提供增值服务的主要障碍。数据集成和聚合技术在这种背景下诞生，用于提供对分布式数据和异构数据的透明访问。以服务为中心的企业集成通过信息服务提供集成数据的能力，目前主要包括如下集中信息服务。</p><p>&nbsp;&nbsp; &nbsp;(1)联邦服务(Federation Service)：提供将各种类型的数据聚合的能力，它既支持关系型数据，也支持XML数据、文本数据和内容数据等非关系型数据。同时，所有的数据仍然按照自己本身的方式管理。</p><p>&nbsp;&nbsp; &nbsp;(2)复制服务(Replication Service)：提供远程数据的本地访问能力，它通过自动的实时复制和数据转换，在本地维护一个数据源的副本。本地数据和数据源在技术实现上可以是独立的。</p><p>&nbsp;&nbsp; &nbsp;(3)转换服务(Transformation Service)：用于数据源格式到目标格式的转换，可以是批量的或者是基于记录的。</p><p>(4)搜索服务(Search Service)：提供对企业数据的查询和检索服务，既支持数据库等结构化数据，也支持如PDF等非结构化数据。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题一（25分）<br/>阅读以下关于企业应用集成的叙述，根据要求回答问题。</p><p>[说明]</p><p>&nbsp;&nbsp; &nbsp;某大型企业随着信息化的进展，积累了许多异构的遗产信息系统，这些系统分别采用J2EE、.NET等技术进行开发，分布在不同的地理位置，采用不同的协议进行数据传输。企业要求集成后的系统能够实现功能整合，并在组织现有功能的基础上提供增值服务。FT软件开发公司承接了某大型企业应用系统集成任务。为了按时保质完成任务，选择合适的企业应用集成方法和架构非常重要。项目组在讨论方案时，提出了两种集成思路。</p><p>&nbsp;&nbsp; 魏工建议采用传统的应用集成方法，将应用集成分为多个层次，并采用消息代理中间件连接遗产系统。</p><p>&nbsp;&nbsp; 陈工建议采用基于SOA的方法进行应用集成，将现有遗产系统采用Web Service的方式进行包装，暴露统一格式的接口，并采用企业服务总线(ESB.进行连接。</p><p>&nbsp;&nbsp;&nbsp;项目组仔细分析比较了两种方案的优点和不足后，认为魏工和陈工的建议都合理，但是结合当前项目的实际情况，最后决定采用陈工的建议。</p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "270287",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1588133012",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "241",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 2,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "4",
                    "rank": "3",
                    "correlation_time": "1599890427",
                    "question_id": "270290",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题3]（4分）</p><p>&nbsp;&nbsp; &nbsp;结合你的系统架构设计经验，请用300字以内的文字简要说明FT公司项目组在对该企业构建SOA架构时，除了注意原有系统架构中的集成需求之外，还需要在服务构建时重点关注哪些问题。</p>",
                    "option": "",
                    "answer": [
                        "<p>问题三：</p><p>当基于SOA来构建一个企业级的系统架构时，一定要注意对原有系统架构中的集成需求进行细致的分析和整理。而关于系统中最重要的元素，也就是SOA系统中服务的构建有两点需要特别注意的地方：①是对于服务粒度的控制；②是对于无状态服务的设计。</p>"
                    ],
                    "knowledge": "系统分析师",
                    "analyze": "<p>【问题三】</p><p>SOA系统中服务粒度的控制是一项十分重要的设计任务。通常来说，对于将暴露在整个系统外部的服务推荐使用粗粒度的接口，而相对较细粒度的服务接口通常用于企业系统架构的内部。从技术上讲，粗粒度的服务接口可能是一个特定服务的完整执行，而细粒度的服务接口可能是实现这个粗粒度服务接口的具体的内部操作。虽然细粒度的接口能为服务请求者提供更加细化和更多的灵活性，但同时也意味着引入较难控制的交互模式易变性，也就是说服务的交互模式可能随着不同的服务请求者而不同。如果暴露这些易于变化的服务接口给系统的外部用户，就可能造成外部服务请求者难于支持不断变化的服务提供者所暴露的细粒度服务接口；而粗粒度服务接口保证了服务请求者将以一致的方式使用系统中所暴露出的服务。虽然SOA并不强制要求一定要使用粗粒度的服务接口，但是建议使用它们作为外部集成的接口。通常，可以使用业务流程(BPEL)来创建由细粒度操作组成的业务流程的粗粒度的服务接口。</p><p>&nbsp;&nbsp; &nbsp;SOA系统架构中的具体服务应该都是独立的、自包含的请求，在实现这些服务的时候不需要前一个请求的状态，也就是说服务不应该依赖于其他服务的上下文和状态，即SOA架构中的服务应该是无状态的服务。当某一个服务需要依赖时，最好把它定义成具体的业务流程(BPEL)。在服务的具体实现机制上，可以通过使用EJB组件来实现粗粒度的服务。通常，可以利用无状态的Session Bean来实现具体的服务，如果基于Web Service技术，就可以将无状态的Session Bean暴露为外部用户可以调用到的Web服务，也就是把传统的Session Facade模型转化为EJB的Web服务端点。这样，就可以向Web服务客户提供粗粒度的服务。</p><p>&nbsp;&nbsp; &nbsp;如果要在J2EE的环境下(基于WebSphere)构建Web服务，Web服务客户可以通过两种方式访问J2EE应用程序。客户可以访问用JAX-RPC API创建的Web服务(使用Servlet来实现)；Web服务客户也可以通过EJB的服务端点接口访问无状态的Session：Bean，但Web服务客户不能访问其他类型的企业Bean，如有状态的Session Bean、实体Bean和消息驱动Bean。对于后一种访问方式(公开无状态EJB组件作为Web服务)的优势在于，基于已有的EJB组件，可以利用现有的业务逻辑和流程。在许多企业中，现有的业务逻辑可能已经使用EJB组件编写，通过Web服务公开它可能是实现从外界访问这些服务的最佳选择。EJB端点是一种很好的选择，因为它使业务逻辑和端点位于同一层上。另外，EJB容器会自动提供对并发的支持，作为无状态Session Bean实现的EJB服务端点不必担心多线程访问，因为EJB容器必须串行化对无状态会话Bean任何特定实例的请求。由于EJB容器都会提供对于Security和Transaction的支持，因此Bean的开发人员可以无须编写安全代码及事务处理代码。性能问题对于Web服务来说一直都是一个问题，由于几乎所有EJB容器都提供了对无状态会话Bean群集的支持，以及对无状态Session Bean池与资源管理的支持，因此当负载增加时，可以向集群中增加服务器数目。Web服务请求可以定向到这些不同的服务器，同时由于无状态Session Bean池改进了资源利用和内存管理，使Web服务能够有效地响应多个客户请求。由此可以看到，通过把Web服务模型化为EJB端点，可以使服务具有更强的可伸缩性，并增强了系统整体的可靠性。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题一（25分）<br/>阅读以下关于企业应用集成的叙述，根据要求回答问题。</p><p>[说明]</p><p>&nbsp;&nbsp; &nbsp;某大型企业随着信息化的进展，积累了许多异构的遗产信息系统，这些系统分别采用J2EE、.NET等技术进行开发，分布在不同的地理位置，采用不同的协议进行数据传输。企业要求集成后的系统能够实现功能整合，并在组织现有功能的基础上提供增值服务。FT软件开发公司承接了某大型企业应用系统集成任务。为了按时保质完成任务，选择合适的企业应用集成方法和架构非常重要。项目组在讨论方案时，提出了两种集成思路。</p><p>&nbsp;&nbsp; 魏工建议采用传统的应用集成方法，将应用集成分为多个层次，并采用消息代理中间件连接遗产系统。</p><p>&nbsp;&nbsp; 陈工建议采用基于SOA的方法进行应用集成，将现有遗产系统采用Web Service的方式进行包装，暴露统一格式的接口，并采用企业服务总线(ESB.进行连接。</p><p>&nbsp;&nbsp;&nbsp;项目组仔细分析比较了两种方案的优点和不足后，认为魏工和陈工的建议都合理，但是结合当前项目的实际情况，最后决定采用陈工的建议。</p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "270287",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1588133012",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "241",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 3,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "11",
                    "rank": "4",
                    "correlation_time": "1600940599",
                    "question_id": "281376",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题1]（11分）</p><p>流程图和数据流图是软件系统分析设计中常用的两种手段，请用300字以内文字简要说明流程图与数据流图的含义及其区别，并说明项目组为何确定采用数据流图作为建模手段。</p>",
                    "option": "",
                    "answer": [
                        "<p>[问题1]<br/>数据流图作为一种图形化工具，用来说明业务处理过程、系统边界内所包含的功能和系统中的数据流。</p><p>流程图以图形化的方式展示应用程序从数据输入开始到获得输出为止的逻辑过程，描述处理过程的控制流。</p><p>两者的区别主要包括：</p><p>(1) 数据流图中的处理过程可并行；流程图在某个时间点只能处于一个处理过程。</p><p>(2) 数据流图展现系统的数据流；流程图展现系统的控制流。</p><p>(3) 数据流图展现全局的处理过程，过程之间遵循不同的计时标准；流程图中处理过程遵循一致的计时标准。</p><p>(4) 数据流图适用于系统分析中的逻辑建模阶段；流程图适用于系统设计中的物理建模阶段。</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题一】</p><p>数据流图和流程图是结构化建模中使用的重要工具，能够帮助开发人员更好地分析和设计系统，增强系统开发人员之间交流的准确性和有效性。数据流图作为一种图形化工具，用来说明业务处理过程、系统边界内所包含的功能和系统中的数据流，适用于系统分析中的逻辑建模阶段。流程图以图形化的方式展示应用程序从数据输入开始到获得输出为止的逻辑过程，描述处理过程的控制流，往往涉及到具体的技术和环境，适用于系统设计中的物理建模阶段。</p><p>本题项目组为了更好地对情报数据处理流程及其与外部角色的关联进行建模，符合数据流图的应用场景要求，因此，首先构建数据流图以反映数据流向和系统边界。</p><p>数据流图和流程图是为了达到不同的目的而产生的，其所采用的标准符号集合也不相同。在实际应用中，区别主要包括是否可以描述处理过程的并发性；描述内容是数据流还是控制流等几个方面。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题二（25分）</p><p>某公司拟开发一个商业情报处理系统，使公司能够及时针对市场环境的变化及时调整发展战略，以获取最大的商业利益。项目组经过讨论，决定采用结构化分析和设计方法。在系统分析阶段，为了更好地对情报数据处理流程及其与外部角色的关联进行建模，项目组成员分别给出了自己的设计思路：<br/>(1) 小张提出先构建系统流程图(System Flowcharts)，以便更精确地反映系统的业务处理过程及数据的输入和输出。<br/>(2) 小李提出先构建系统数据流图(Data Flow Diagrams)，来展现系统的处理过程和定义业务功能边界，并给出了情报分类子系统的0层和1层数据流图，后者如下图所示。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200912/1599890567689303.jpg\" title=\"1599890567689303.jpg\" alt=\"1.jpg\"/><br/><p>项目组经讨论确定以数据流图作为本阶段的建模手段。工程师老王详细说明了流程图和数据流图之间的区别与联系，并指出了上图所示数据流图中存在的错误。</p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281375",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1599890672",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 4,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "8",
                    "rank": "5",
                    "correlation_time": "1600940599",
                    "question_id": "281377",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题2]（8分）</p><p>请分析指出上图所示的数据流图中存在的错误及其原因，并针对1层数据流图绘制出情报分类子系统的0层数据流图。</p>",
                    "option": "",
                    "answer": [
                        "【问题二】<br/><p>如图所示的数据流图中存在的错误有以下4种：</p><p>(1) “分类训练”加工：只有输入没有输出，产生数据黑洞；</p><p>(2) “分类处理”加工：只有输出没有输入，无中生有；</p><p>(3) “规则文件”数据流：外部实体没有经过加工处理，直接到数据存储；</p><p>(4) “配置信息”数据流：外部实体之间没有加工处理，存在直接数据流。</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题二】</p><p>数据流图中常见的错误分为两种类型：一类是语法错误，包括外部实体之间、数据存储之间或外部实体与数据存储之间不经过加工而存在直接数据流；另一类是逻辑错误，包括数据黑洞(只有输入没有产生输出)、灰洞(输入不足以产生输出)和无输入。</p><p>“分类训练”加工属于数据黑洞错误；</p><p>“分类处理”加工属于无输入错误；</p><p>“规则文件”和“配置信息”数据流属于语法错误。</p><p>对于复杂系统，一般采用分层数据流图逐步细化系统的内部处理逻辑。0层数据流图是1层数据流图更高级别的抽象。“分类训练”和“分类处理”加工属于内部加工，“分类规则”数据流属于内部数据流，抽象为“情报分类子系统”加工。其中，“样本数据”、“规则文件”和“配置信息”为输入数据流；“分类结果”为输出数据流。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题二（25分）</p><p>某公司拟开发一个商业情报处理系统，使公司能够及时针对市场环境的变化及时调整发展战略，以获取最大的商业利益。项目组经过讨论，决定采用结构化分析和设计方法。在系统分析阶段，为了更好地对情报数据处理流程及其与外部角色的关联进行建模，项目组成员分别给出了自己的设计思路：<br/>(1) 小张提出先构建系统流程图(System Flowcharts)，以便更精确地反映系统的业务处理过程及数据的输入和输出。<br/>(2) 小李提出先构建系统数据流图(Data Flow Diagrams)，来展现系统的处理过程和定义业务功能边界，并给出了情报分类子系统的0层和1层数据流图，后者如下图所示。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200912/1599890567689303.jpg\" title=\"1599890567689303.jpg\" alt=\"1.jpg\"/><br/><p>项目组经讨论确定以数据流图作为本阶段的建模手段。工程师老王详细说明了流程图和数据流图之间的区别与联系，并指出了上图所示数据流图中存在的错误。</p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281375",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1599890672",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 5,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "6",
                    "rank": "6",
                    "correlation_time": "1600940599",
                    "question_id": "281378",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题3]（6分）</p><p>高质量的数据流图是可读的、内部一致的并能够准确表示系统需求。请用300字以内文字说明在设计高质量的数据流图时应考虑的三个原则。</p>",
                    "option": "",
                    "answer": [
                        "【问题三】<br/><p>高质量数据流图设计时应考虑的三个原则：</p><p>(1) 复杂性最小化原则。DFD分层结构就是把信息划分为小的且相对独立的一大批子集例子，这样就可以单独考查每一个DFD。如果要了解某个过程更加详细的信息，可以跳转到该过程的下一层；如果要知道一个DFD如何与其他DFD相关联，可以跳转到上一层的DFD进行考查。</p><p>(2) 接口最小化原则。接口最小化是复杂性最小化的一种具体规则，在设计模型时，应使得模型中各个元素之间的接口数或连接数最小化。</p><p>(3) 数据流一致性原则。一个过程和它的过程分解在数据流内容中是否有差别 是否存在有数据流出但没有相应的数据流入的加工 是否存在有数据流入但没有相应的数据流出的加工。</p><p>以上所有答案意思表达正确即可。<span style=\"font-size: 16px;\"></span></p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题三】</p><p>高质量的数据流图首先要求满足数据流一致性要求，即数据流的输入输出应该匹配，输入数据的信息量足以产生输出数据，所有的输出数据都能够从输入数据中找到数据的来源。对于复杂性系统，可以采用DFD分层结构将系统的复杂性逐步分解降低，以提高数据流图的有效性。高质量的数据流图应该简化复杂的接口，最小化接口或连接的数目。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题二（25分）</p><p>某公司拟开发一个商业情报处理系统，使公司能够及时针对市场环境的变化及时调整发展战略，以获取最大的商业利益。项目组经过讨论，决定采用结构化分析和设计方法。在系统分析阶段，为了更好地对情报数据处理流程及其与外部角色的关联进行建模，项目组成员分别给出了自己的设计思路：<br/>(1) 小张提出先构建系统流程图(System Flowcharts)，以便更精确地反映系统的业务处理过程及数据的输入和输出。<br/>(2) 小李提出先构建系统数据流图(Data Flow Diagrams)，来展现系统的处理过程和定义业务功能边界，并给出了情报分类子系统的0层和1层数据流图，后者如下图所示。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200912/1599890567689303.jpg\" title=\"1599890567689303.jpg\" alt=\"1.jpg\"/><br/><p>项目组经讨论确定以数据流图作为本阶段的建模手段。工程师老王详细说明了流程图和数据流图之间的区别与联系，并指出了上图所示数据流图中存在的错误。</p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281375",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1599890672",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 6,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "7",
                    "rank": "7",
                    "correlation_time": "1600940751",
                    "question_id": "281380",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题1]</p><p>用150字以内的文字，说明公司制定的TLS软件架构的层次特点，并针对上述功能需求(1)～(4)，说明架构中各层内涵。</p>",
                    "option": "",
                    "answer": [
                        "【问题一】<p>TLS结构框架的主要特点：</p><p>(1),应用软件仅与操作系统服务相关，不直接操作硬件。</p><p>(2),操作系统通过模块支持原软件访问硬件，可与具体硬件无关。</p><p>(3),模块支持层将硬件抽象成标准操作。</p><p>(4),通过三层栈的划分可实现硬件的快速更改与升级，应用软件的升级不会引起硬件的变更。</p><p>TLS结构框架的各层内涵是：</p><p>(1),应用层主要完成宇航设备的具体工作，由多个功能任务组成，各功能任务间的隔离由操作系统层实现。</p><p>(2),操作系统层实现应用软件与硬件的隔离，为应用软件提供更加丰富的计算机资源服务。操作系统为应用软件提供标准的API接口(如POSIX)，确保了应用软件的可升级性。</p><p>(3),模块支持层为操作系统管理硬件资源提供统一管理方法，用一种抽象的标准接口实现软件与硬件的无关性，达到硬件的升级要求，便于硬件的外场快速更换。</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题一】</p><p>本题给出的TLS结构框架主要通过硬件抽象，形成模块支持层软件，将操作系统对硬件资源的管理抽象成对一种逻辑上相关的抽象资源的管理，这样就将操作系统软件与硬件进行了分离。而应用软件访问硬件资源靠操作系统提供的服务进行，这样，应用软件仅仅和具体功能实现有关，而不需关心硬件配置。因此，TLS结构框架的主要特点可概述为以下4点：</p><p>(1) 应用软件仅与操作系统服务相关，不直接操作硬件。</p><p>(2) 操作系统通过模块支持原软件访问硬件，可与具体硬件无关。</p><p>(3) 模块支持层将硬件抽象成标准操作。</p><p>(4) 通过三层栈的划分可实现硬件的快速更改与升级，应用软件的升级不会引起硬件的变更。</p><p>基于这种思想，TLS结构框架实现了宇航设备中软件功能服务，这样考生就可以完整地叙述各层软件的设计内涵，即：</p><p>(1) 应用层主要完成宇航设备的具体工作，由多个功能任务组成，各功能任务间的隔离由操作系统层实现。</p><p>(2) 操作系统层实现应用软件与硬件的隔离，为应用软件提供更加丰富的计算机资源服务。操作系统为应用软件提供标准的API接口(如POSIX)，确保了应用软件的可升级性。</p><p>(3) 模块支持层为操作系统管理硬件资源提供统一管理方法，用一种抽象的标准接口实现软件与硬件的无关性，达到硬件的升级要求，便于硬件的外场快速更换。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题三（25分）&nbsp;&nbsp;</p><p>某公司承担了一项宇航嵌入式设备的研制任务。本项目除对硬件设备环境有很高的要求外，还要求支持以下功能：</p><p>(1) 设备由多个处理机模块组成，需要时外场可快速更换(即LRM结构)；</p><p>(2) 应用软件应与硬件无关，便于软硬件的升级；</p><p>(3) 由于宇航嵌入式设备中要支持不同功能，系统应支持完成不同功能任务间的数据隔离；</p><p>(4) 宇航设备可靠性要求高，系统要有故障处理能力。</p><p>公司在接到此项任务后，进行了反复论证，提出三层栈(TLS)软件总体架构，如下图所示，并将软件设计工作交给了李工，要求他在三周内完成软件总体设计工作，给出总体设计方案。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210419/1618801516472025.png\" title=\"1618801516472025.png\" alt=\"TLS.png\"/></p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281379",
                    "sort_son": "1",
                    "creater_name": "wx5f1e961739eb1",
                    "create_time": "1599890838",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 7,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "13",
                    "rank": "8",
                    "correlation_time": "1600940751",
                    "question_id": "281381",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题2]</p><p>在TLS软件架构的基础上，关于选择哪种类型的嵌入式操作系统问题，李工与总工程师发生了严重分歧。李工认为，宇航系统是实时系统，操作系统的处理时间越快越好，隔离意味着以时间作代价，没有必要，建议选择类似于VxWorks5.5的操作系统；总工程师认为，应用软件间隔离是宇航系统安全性要求，宇航系统在选择操作系统时必须考虑这一点，建议选择类似于Linux的操作系统。</p><p>请说明两种操作系统的主要差异，完成下表中的空白部分，并针对本任务要求，用200字以内的文字说明你选择操作系统的类型和理由。</p><p>两种操作系统的主要差异</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://static1.51ctocdn.cn/edu/exam/ueditor1.4.3/themes/default/images/spacer.gif\"/></p><table><tbody><tr class=\"firstRow\"><td width=\"152.33333333333334\" valign=\"top\" style=\"word-break: break-all;\"><p>两种操作系统的主要差异比较类型</p></td><td width=\"168.33333333333334\" valign=\"top\" style=\"word-break: break-all;\"><p>VxWork5.5</p></td><td width=\"120.33333333333333\" valign=\"top\" style=\"word-break: break-all;\"><p>Linux</p></td></tr><tr><td width=\"153\" valign=\"top\" style=\"word-break: break-all;\"><p>工作方式</p></td><td width=\"168.33333333333334\" valign=\"top\" style=\"word-break: break-all;\"><p>操作系统与应用程序处于同一存储空间</p></td><td width=\"120.33333333333333\" valign=\"top\" style=\"word-break: break-all;\"><p>①</p></td></tr><tr><td width=\"153\" valign=\"top\" style=\"word-break: break-all;\"><p>多任务支持</p></td><td width=\"168.33333333333334\" valign=\"top\" style=\"word-break: break-all;\"><p>多支持任务(线程)操作</p></td><td width=\"120.33333333333333\" valign=\"top\" style=\"word-break: break-all;\"><p>②</p></td></tr><tr><td width=\"153\" valign=\"top\" style=\"word-break: break-all;\"><p>实时性</p></td><td width=\"168.33333333333334\" valign=\"top\" style=\"word-break: break-all;\"><p>③</p></td><td width=\"120.33333333333333\" valign=\"top\" style=\"word-break: break-all;\"><p>实时系统</p></td></tr><tr><td width=\"153\" valign=\"top\" style=\"word-break: break-all;\"><p>安全性</p></td><td width=\"168.33333333333334\" valign=\"top\" style=\"word-break: break-all;\"><p>④</p></td><td width=\"120.33333333333333\" valign=\"top\" style=\"word-break: break-all;\"><p>⑤</p></td></tr><tr><td width=\"153\" valign=\"top\" style=\"word-break: break-all;\"><p>标准API</p></td><td width=\"168.33333333333334\" valign=\"top\" style=\"word-break: break-all;\"><p>支持</p></td><td width=\"120.33333333333333\" valign=\"top\" style=\"word-break: break-all;\">支持</td></tr></tbody></table><p><br/></p>",
                    "option": "",
                    "answer": [
                        "【问题二】<br/>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题二】</p><p>选择操作系统的依据是本题第三项的用户要求，主要考查考生对目前常用的嵌入式操作系统的了解程度。第一小问的表格给出的VxWorks和Linux两个操作系统是嵌入式系统常用的软件，两个软件在资源管理上存在本质区别，考生必须明确差异后，方能回答第二小问。两种操作系统的差异如下表所示。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200912/1599890765597564.jpg\" title=\"1599890765597564.jpg\" alt=\"1.jpg\"/><p>通过比较，显然选用类似于Linux的嵌入式操作系统适用本题要求。理由包括三点：</p><p>(1) Linux操作系统是一种安全性较强的操作系统。内核工作在系统态，应用软件工作在用户态(这点是系统安全性要求)，可以有效防止应用软件对操作系统的破坏。</p><p>(2) Linux操作系统调度的最小单位是线程，线程归属于进程，进程具有自己独立的资源。进程通过存储器管理部件(MMU)实现多功能应用间隔离。</p><p>(3) 嵌入式Linux操作系统支持硬件抽象，可有效实现TLS结构，并将硬件抽象与操作系统分离，可方便实现硬件的外场快速更换。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题三（25分）&nbsp;&nbsp;</p><p>某公司承担了一项宇航嵌入式设备的研制任务。本项目除对硬件设备环境有很高的要求外，还要求支持以下功能：</p><p>(1) 设备由多个处理机模块组成，需要时外场可快速更换(即LRM结构)；</p><p>(2) 应用软件应与硬件无关，便于软硬件的升级；</p><p>(3) 由于宇航嵌入式设备中要支持不同功能，系统应支持完成不同功能任务间的数据隔离；</p><p>(4) 宇航设备可靠性要求高，系统要有故障处理能力。</p><p>公司在接到此项任务后，进行了反复论证，提出三层栈(TLS)软件总体架构，如下图所示，并将软件设计工作交给了李工，要求他在三周内完成软件总体设计工作，给出总体设计方案。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210419/1618801516472025.png\" title=\"1618801516472025.png\" alt=\"TLS.png\"/></p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281379",
                    "sort_son": "2",
                    "creater_name": "wx5f1e961739eb1",
                    "create_time": "1599890838",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 8,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "5",
                    "rank": "9",
                    "correlation_time": "1600940751",
                    "question_id": "281382",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题3]</p><p>故障处理是宇航系统软件设计中极为重要的组成部分。故障处理主要包括故障监视、故障定位、故障隔离和系统容错(重组)。用150字以内的文字说明嵌入式系统中故障主要分哪几类 并分别给出两种常用的故障滤波算法和容错算法。</p>",
                    "option": "",
                    "answer": [
                        "【问题三】<p>(1),嵌入式系统中故障主要分为：</p><p>①硬件故障：如CPU、存储器和定时器等；</p><p>②应用软件故障：如数值越界、异常和超时等；</p><p>③操作系统故障：如越权访问、死锁和资源枯竭等。</p><p>(2),滤波算法：</p><p>①门限算法</p><p>②递减算法</p><p>③递增算法</p><p>④周期滤波算法</p><p>(3),容错算法：</p><p>①N+1备份</p><p>②冷备</p><p>③温备</p><p>④热备</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题三】</p><p>作为宇航系统的嵌入式设备，硬/软件故障是宇航系统最为关注的内容，根据宇航系统的特点和系统组成，故障一般分为三类，即硬件故障、应用软件故障和操作系统故障，在设计中，应考虑这三类故障的处理方法。硬件故障一般包括CPU运算错误、存储器访问/越界错误、MMU配置错误、定时器计数错误和内总线错误等；应用软件故障一般包括计算越界、除0、溢出和超时等各种异常情况；操作系统故障一般包括越权访问、死锁、资源枯竭、调度超时、配置越界和操作系统异常等。</p><p>一般情况下，宇航系统的故障分为瞬态故障和永久故障，瞬态故障是指偶然发生的错误，而永久故障是指发生后不可消失的错误。在容错系统中，故障一般是由瞬态故障向永久故障转变，将鉴别瞬态故障和永久故障的算法称为滤波算法。在嵌入式实时系统中，常用的滤波算法包括门限算法、递减算法、递增算法和周期滤波算法等。</p><p>故障的鉴别目的是实现宇航系统的容错与重构。常用的容错算法是N+1备份、冷备、温备和热备。N+1备份是指N个通用模块之一的任何一个模块发生故障后，将故障模块的任务迁移到备份模块运行：冷备、温备和热备是三种备份方式，可根据宇航系统的总体备份时间或重要程度安排不同的备份算法。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题三（25分）&nbsp;&nbsp;</p><p>某公司承担了一项宇航嵌入式设备的研制任务。本项目除对硬件设备环境有很高的要求外，还要求支持以下功能：</p><p>(1) 设备由多个处理机模块组成，需要时外场可快速更换(即LRM结构)；</p><p>(2) 应用软件应与硬件无关，便于软硬件的升级；</p><p>(3) 由于宇航嵌入式设备中要支持不同功能，系统应支持完成不同功能任务间的数据隔离；</p><p>(4) 宇航设备可靠性要求高，系统要有故障处理能力。</p><p>公司在接到此项任务后，进行了反复论证，提出三层栈(TLS)软件总体架构，如下图所示，并将软件设计工作交给了李工，要求他在三周内完成软件总体设计工作，给出总体设计方案。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210419/1618801516472025.png\" title=\"1618801516472025.png\" alt=\"TLS.png\"/></p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281379",
                    "sort_son": "3",
                    "creater_name": "wx5f1e961739eb1",
                    "create_time": "1599890838",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 9,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "13",
                    "rank": "10",
                    "correlation_time": "1600940839",
                    "question_id": "284746",
                    "difficulty_id": "3",
                    "question_title": "【问题一】（13分）在该企业所邀请的数据库专家会诊意见中，针对每条SQL语句都建立索引的建议是否合适请简要说明理由。",
                    "option": "",
                    "answer": [
                        "<p>【问题一】</p><p>不适当，理由如下。</p><p>①如果建立索引不当，数据库管理系统将不利用已经建立的索引，而采取全表扫描。</p><p>②当更新操作成为系统瓶颈时，因为每次更新操作会重建表的索引，则需要考虑删除某些索引。</p><p>③应该针对不同应用情况选择适当的索引类型。例如，如果经常使用范围查询，则B树索引比散列索引更加高效。</p><p>④应该将有利于大多数据查询和更新的索引设为聚类索引。</p><p>⑤需要对建立的索引进行实际的测试，因为索引的使用是由数据库管理系统(数据库优化器)决定的。</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "略",
                    "question_type": "14",
                    "material_text": "<p>试题四（25分）</p><p>某大中型企业采用Oracle数据库建立一个经济信息统计方面的大型数据库应用系统。尽管配置了比较良好的硬件和网络环境，但该数据库应用系统实施后的整体性能表现较差。特别是随着业务量与信息量的迅速扩大，数据库系统的存取速度显著减慢，存储效率也明显下降。</p><p>该企业通过反复实践与摸索，并邀请数据库专家一起会诊，认为可以从以下4个方面进一步优化数据库应用系统。</p><p>(1)由于数据库应用中最主要的查询与修改数据操作大多需通过I/O来完成，因此需要通过调整服务器配置(即对硬件设备进行升级)、操作系统配置与数据库管理系统的有关参数，优化系统的I/O性能，尤其是改进磁盘I/O的效率与性能。</p><p>(2)优化“索引”的建立与使用机制，尽可能提高数据查询的速度或效率。</p><p>(3)合理使用聚类(Culster)，改进查询响应时间和系统的综合性能。其中，“聚类”是指把单独组织的，但在逻辑上经常需要连接的，较为稳定的几个基本表聚集在一起(在物理上实现邻近存放)，可以显著减少数据的搜索时间，从而提高性能。</p><p>(4)对应用系统中使用的SQL语句进行调优，针对每条SQL语句都建立对应的索引等。</p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "284745",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1602646304",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 10,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "12",
                    "rank": "11",
                    "correlation_time": "1600940839",
                    "question_id": "284747",
                    "difficulty_id": "3",
                    "question_title": "【问题二】（12分）结合你的经验，请列举出4条SQL语句优化的基本策略。",
                    "option": "",
                    "answer": [
                        "<p>【问题二】</p><p>SOL语句优化的常见策略如下(包含但不限于以下内容，列举出其中5个小点即可，每小点1分)。</p><p>①建立物化视图或尽可能减少多表查询。</p><p>②以不相干子查询替代相干子查询。</p><p>③只检索需要的列。</p><p>④用带IN的条件子句等价替换OR子句。</p><p>⑤经常提交COMMIT，以尽早释放锁。</p><p>⑥避免嵌套的游标(Cursor)和多重循环等</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "略",
                    "question_type": "14",
                    "material_text": "<p>试题四（25分）</p><p>某大中型企业采用Oracle数据库建立一个经济信息统计方面的大型数据库应用系统。尽管配置了比较良好的硬件和网络环境，但该数据库应用系统实施后的整体性能表现较差。特别是随着业务量与信息量的迅速扩大，数据库系统的存取速度显著减慢，存储效率也明显下降。</p><p>该企业通过反复实践与摸索，并邀请数据库专家一起会诊，认为可以从以下4个方面进一步优化数据库应用系统。</p><p>(1)由于数据库应用中最主要的查询与修改数据操作大多需通过I/O来完成，因此需要通过调整服务器配置(即对硬件设备进行升级)、操作系统配置与数据库管理系统的有关参数，优化系统的I/O性能，尤其是改进磁盘I/O的效率与性能。</p><p>(2)优化“索引”的建立与使用机制，尽可能提高数据查询的速度或效率。</p><p>(3)合理使用聚类(Culster)，改进查询响应时间和系统的综合性能。其中，“聚类”是指把单独组织的，但在逻辑上经常需要连接的，较为稳定的几个基本表聚集在一起(在物理上实现邻近存放)，可以显著减少数据的搜索时间，从而提高性能。</p><p>(4)对应用系统中使用的SQL语句进行调优，针对每条SQL语句都建立对应的索引等。</p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "284745",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1602646304",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 11,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "6",
                    "rank": "12",
                    "correlation_time": "1600940884",
                    "question_id": "281387",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题1]（6分）</p><p>&nbsp;&nbsp; &nbsp;Java企业级应用框架一般被划分为3个层次，请用150字以内的文字说明都有哪3个层次?功能分别是什么?</p>",
                    "option": "",
                    "answer": [
                        "【问题一】<br/><span style=\"font-size: 16px;\">（1）表现层。对应视图(View)。用于为从客户端发来的请求服务的对象及其行为，用于展现数据以及负责View组件实现模式、组件在View显示粒度、页面跳转，以及事件触发等功能。</span><p>（2）业务逻辑组件层。对应控制器(Controller)。用于支持由表现层发起的(某些情况下也可能由持久层直接发起)业务数据的逻辑处理。</p><p>（3）持久层。实现持久化存储，对应模型(Model)。用于支持外部资源通信。例如，与数据库交互数据等。</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题一】</p><p>Java企业应用框架一般被划分为表现层、业务逻辑组件层和持久层等3个逻辑层次。</p><p>其中，表现层用来建立应用系统的界面，对应视图(View)。该层集中于为从客户端发来的请求服务的对象及其行为，用于展现数据；负责View组件实现模式、组件在View显示粒度、页面跳转，以及事件触发等功能。例如，表现层采用JSF(Java Server Face)，JSF的开发流程的核心是事件驱动，组件和标签的封装程度非常高，很多典型应用已经不需要开发者去处理HTTP，整个过程是通过IoC(依赖注入)来实现的，即可以帮助对客户端请求进行先期及后期的处理等。</p><p>业务逻辑组件层用来开发应用逻辑，对应控制器(Controller)。例如，业务逻辑组件层采用EJB3.0的Session Bean。EJB 3.0允许开发者使用耦合松散的组件来开发应用，实现一个EJB所有使用的类和接口都减少了。该层集中于支持由表现层发起的(某些情况下也可能由持久层直接发起)业务数据的逻辑处理。例如，隐藏业务对象的复杂性，集中工作流的处理；分离表现层与持久层，并为服务提供外观和代理接口等。</p><p>持久层是实现持久化存储，对应模型(Model)。例如，采用EJB 3.0实体Bean持久化模型，吸收了Hibernate的一些思想采用O/R MappinR模式。该层集中于支持外部资源通信。例如，与数据库交互数据；抽象数据源，提供透明的数据访问；帮助进行EJB组件中的异步处理等。&nbsp;</p>",
                    "question_type": "14",
                    "material_text": "<p>试题五（25分）</p><p>阅读以下关于Java企业级应用系统开发架构的叙述，根据要求回答问题。</p><p>[说明]</p><p>&nbsp;&nbsp; &nbsp;某软件公司承担了某中小型企业应用软件开发任务，进度要求紧迫。为了按时完成任务，选择合适的企业应用系统开发架构非常重要。项目组在进行方案论证时，项目组成员提出了两种开发思路。</p><p>&nbsp;&nbsp; 刘工建议采用J2EE 5.0和EJB 3.0进行开发。理由是J2EE定义了标准的应用开发体系结构和部署环境，EJB是J2EE的基础和核心。J2EE 5.0主要目标是简化开发，相比EJB 2.1，EJB 3.0具有很多改进和提高。</p><p>&nbsp;&nbsp; 杜工建议采用Struts、Spring和Hibenate轻量级开源框架相结合的方式。理由是随着Java开源项目阵营的发展壮大，一些基于POJOs(Plan Old Java Objects)的开源框架被广泛地引入到Java企业应用开发中来，与重量级的EJB框架相比，这些轻量级的框架有很多优点。</p><p>&nbsp;&nbsp; &nbsp;项目组仔细比较分析了两种方案的特点、优点和不足之处。认为杜工和刘工的建议都合理，但是从结合当前项目实际情况出发，最后决定采用杜工的建议。<span style=\"font-size: 16px;\"></span></p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281386",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1599891048",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 12,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "12",
                    "rank": "13",
                    "correlation_time": "1600940884",
                    "question_id": "281388",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题2]（12分）</p><p>&nbsp;&nbsp; &nbsp;请用200字以内的文字叙述Struts、Spring和Hibernate开源框架特点和结合方式。</p>",
                    "option": "",
                    "answer": [
                        "【问题二】<br/><span style=\"font-size: 16px;\">（1）Struts框架的组件在页面中显示的粗粒度，以及框架类的限制在很多情况下会表现得过于死板，给表示层的开发会带来一些额外的代码开销。</span><p>Spring框架采用依赖注入使得它可以很容易地实现Bean的装配，提供了简洁的AOP并据此实现事务管理等，但是它不具备处理应用分布式的能力。</p><p>Hiberhate是一个开源的O/R Mapping框架，它对JDBC进行了非常轻量级的对象封装，可以应用在任何使用JDBC的场合，可以在应用EJB的J2EE框架中取代CMP，完成数据持久化的重任。Hibernat使用Java反射机制而不是字节码增强程序来实现透明性；使用简单；映射的灵活性很出色，它支持各种关系数据库，从一对一(1:1)到多对多(m:n)的各种复杂关系。其缺点是限制所使用的对象模型(例如，一个持久性类不能映射到多个表)。</p><p>以上意思对即可给分。</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题二】</p><p>Struts框架由于出现时间早，因此使用相对广泛，很容易找到很多现成的开源功能标签以供使用，以及样例程序可供参考。但是它的组件在页面中显示的粗粒度，以及框架类的限制在很多情况下会表现得过于死板，给表示层的开发会带来一些额外的代码开销。</p><p>Spring是业务组件层轻量级框架。Spring框架是一个基于IoC(依赖注入)和AOP(面向方面编程)的构架。用户可以通过Spring来利用普通Java对象(POJO)编程，使用依赖注入解析POJO间的依赖性，然后使用面向方面编程(AOP)将服务与它们相关联。采用依赖注入使得它可以很容易地实现Bean的装配，提供了简洁的AOP并据此实现事务管理等，但是它不具备处理应用分布式的能力。Spring的核心要点是支持不绑定到特定J2EE服务的可重用业务和数据访问对象。这样的对象可以在不同的J2EE环境(Web或EJB)、独立应用程序和测试环境之间重用。</p><p>Spring框架处于应用服务器和服务库的上方，服务整合的代码属于框架，并暴露于应用开发者。它与应用服务器整合的能力相对EJB 3.0要弱。但是Spting框架模块的可分离配置体现了它优于EJB 3.0的灵活性。</p><p>Hiberhate是一个开源的O/R Mapping框架，它对JDBC进行了非常轻量级的对象封装，可以应用在任何使用JDBC的场合，可以在应用EJB的J2EE框架中取代CMP，完成数据持久化的重任。相对而言，Hibernate基本优势表现在：使用Java反射机制而不是字节码增强程序来实现透明性；使用简单；映射的灵活性很出色，它支持各种关系数据库，从一对一(1:1)到多对多(m:n)的各种复杂关系。其缺点是限制所使用的对象模型(例如，一个持久性类不能映射到多个表)。</p><p>iBATIS是一个简易的SQL Map工具，它是将手工编写的在XML。配置文件中的SQL语句映射成Java对象。使用iBATIS提供的O/R Mapping机制，对业务逻辑实现人员而言，面对的是纯粹的Java对象，这一层与通过Hibernate实现O/R．Mapping而言基本一致，而对于具体的数据操作，HiberTlate会自动生成SOL语句，而iBATIS则要求开发者编写具体的SQL语句。相对Hibernate等“全自动”O/R Mapping机制而言，iBATIS以SQL开发的工作量和数据库移植性上的让步，为系统设计提供了更大的自由空间。作为“全自动”ORM实现的一种有益补充，iBATIS的出现显得别具意义。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题五（25分）</p><p>阅读以下关于Java企业级应用系统开发架构的叙述，根据要求回答问题。</p><p>[说明]</p><p>&nbsp;&nbsp; &nbsp;某软件公司承担了某中小型企业应用软件开发任务，进度要求紧迫。为了按时完成任务，选择合适的企业应用系统开发架构非常重要。项目组在进行方案论证时，项目组成员提出了两种开发思路。</p><p>&nbsp;&nbsp; 刘工建议采用J2EE 5.0和EJB 3.0进行开发。理由是J2EE定义了标准的应用开发体系结构和部署环境，EJB是J2EE的基础和核心。J2EE 5.0主要目标是简化开发，相比EJB 2.1，EJB 3.0具有很多改进和提高。</p><p>&nbsp;&nbsp; 杜工建议采用Struts、Spring和Hibenate轻量级开源框架相结合的方式。理由是随着Java开源项目阵营的发展壮大，一些基于POJOs(Plan Old Java Objects)的开源框架被广泛地引入到Java企业应用开发中来，与重量级的EJB框架相比，这些轻量级的框架有很多优点。</p><p>&nbsp;&nbsp; &nbsp;项目组仔细比较分析了两种方案的特点、优点和不足之处。认为杜工和刘工的建议都合理，但是从结合当前项目实际情况出发，最后决定采用杜工的建议。<span style=\"font-size: 16px;\"></span></p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281386",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1599891048",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 13,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                },
                {
                    "every_score": "7",
                    "rank": "14",
                    "correlation_time": "1600940884",
                    "question_id": "281389",
                    "difficulty_id": "3",
                    "question_title": "<p>[问题3]（7分）</p><p>请用200字以内的文字说明基于Struts、Spring和Hibernate的轻量级框架与基于EJB的重量级框架解决问题的侧重点有什么不同?</p>",
                    "option": "",
                    "answer": [
                        "<p>【问题三】<br/>轻量级框架侧重于减小开发的复杂度，相应的它的处理能力便有所减弱(如事务功能弱、不具备分布式处理能力)，比较适用于开发中小型企业应用。</p><p>重量级框架的EJB框架则强调高可伸缩性，适用于开发大型企业应用。在EJB体系结构中，一切与基础结构服务相关的问题和底层分配问题都由应用程序容器或服务器来处理，且EJB容器通过减少数据库访问次数及分布式处理等方式提供了专门的系统性能解决方案，能够充分解决系统性能问题。</p>"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>【问题三】</p><p>轻量级框架侧重于减小开发的复杂度，相应的它的处理能力便有所减弱(如事务功能弱、不具备分布式处理能力)，比较适用于开发中小型企业应用。采用轻量级框架后，一方面因为采用基于POJOs的方法进行开发，使应用不依赖于任何容器，这可以提高开发调试效率；另一方面轻量级框架多数是开源项目，开源社区提供了良好的设计和许多快速构建工具，以及大量现成可供参考的开源代码，这有利于项目的快速开发。例如，目前Tomcat+Spring+Hibernate已经成为许多开发者开发J2EE中小型企业应用偏爱的一种架构选择。</p><p>作为重量级框架的EJB框架则强调高可伸缩性，适用于开发大型企业应用。在EJB体系结构中，一切与基础结构服务相关的问题和底层分配问题都由应用程序容器或服务器来处理，且EJB容器通过减少数据库访问次数及分布式处理等方式提供了专门的系统性能解决方案，能够充分解决系统性能问题。</p><p>轻量级框架的产生并非是对重量级框架的否定，在某种程度上可以说二者是互补的。轻量级框架旨在开发具有更强大、功能更完备的企业应用；而EJB3.0规范则在努力简化J2EE的使用，以使得EJB不仅仅是擅长处理大型企业系统，也利用开发中小型系统，这也是EJB轻量化的一种努力。对于大型企业的应用及将来可能涉及能力扩展的中小型应用，结合使用轻量级框架和重量级框架也不失为一种较好的解决方案。</p>",
                    "question_type": "14",
                    "material_text": "<p>试题五（25分）</p><p>阅读以下关于Java企业级应用系统开发架构的叙述，根据要求回答问题。</p><p>[说明]</p><p>&nbsp;&nbsp; &nbsp;某软件公司承担了某中小型企业应用软件开发任务，进度要求紧迫。为了按时完成任务，选择合适的企业应用系统开发架构非常重要。项目组在进行方案论证时，项目组成员提出了两种开发思路。</p><p>&nbsp;&nbsp; 刘工建议采用J2EE 5.0和EJB 3.0进行开发。理由是J2EE定义了标准的应用开发体系结构和部署环境，EJB是J2EE的基础和核心。J2EE 5.0主要目标是简化开发，相比EJB 2.1，EJB 3.0具有很多改进和提高。</p><p>&nbsp;&nbsp; 杜工建议采用Struts、Spring和Hibenate轻量级开源框架相结合的方式。理由是随着Java开源项目阵营的发展壮大，一些基于POJOs(Plan Old Java Objects)的开源框架被广泛地引入到Java企业应用开发中来，与重量级的EJB框架相比，这些轻量级的框架有很多优点。</p><p>&nbsp;&nbsp; &nbsp;项目组仔细比较分析了两种方案的特点、优点和不足之处。认为杜工和刘工的建议都合理，但是从结合当前项目实际情况出发，最后决定采用杜工的建议。<span style=\"font-size: 16px;\"></span></p>",
                    "answer_type": "5",
                    "score_rule": "",
                    "new_parent_id": "281386",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1599891048",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "[材料型]问答题",
                    "examine_id": "10356",
                    "type": "3",
                    "title": "2020年11月系统架构设计师模拟试题下午（一）",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "75",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "0",
                    "max_score": "0",
                    "exam_num": "176",
                    "person_num": "78",
                    "avg_time": "60.5",
                    "is_right": "0",
                    "chapter_name": [
                        "案例分析"
                    ],
                    "single_score": 0,
                    "index": 14,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "qanda",
                    "show_son": 1
                }
            ],
            "summary": {
                "radio": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        1,
                        9,
                        11
                    ]
                },
                "multiple": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        2,
                        12
                    ]
                },
                "budingxiang": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        7
                    ]
                },
                "judge": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        3,
                        13
                    ]
                },
                "cloze": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        8
                    ]
                },
                "fill": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        4
                    ]
                },
                "qanda": {
                    "total_question": 14,
                    "total_score": 125,
                    "question_types": [
                        5,
                        14
                    ]
                },
                "program": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        6
                    ]
                },
                "material": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        10
                    ]
                }
            }
        },
        "pagination": {
            "curPage": 1,
            "pageSize": 250,
            "total": 14,
            "hasNextPage": false
        },
        "totalOrder": [
            {
                "index": 1,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 2,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 3,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 4,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 5,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 6,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 7,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 8,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 9,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 10,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 11,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 12,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 13,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 14,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            }
        ]
    }
}
