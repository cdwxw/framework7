{
    "msg": "成功",
    "status": 0,
    "data": {
        "data": {
            "question": [
                {
                    "index": 1,
                    "belong_page": 1,
                    "question_id": 43229,
                    "question_title": "<p><br/></p><p style=\"margin: 0px; line-height: 150%; text-indent: 21pt; layout-grid-mode: char;\"><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\"><span style=\"font-family:华文楷体\">基于架构的软件开发</span>(Architecture Based Software Development，ABSD.强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用(</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\">11</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\">)来描述软件架构，采用(</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\">12</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\">)来描述需求。【回答括号11】</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43229,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p style=\"margin: 0px; line-height: 150%; text-indent: 21pt; layout-grid-mode: char;\"><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\"><span style=\"font-family:华文楷体\">根据定义，基于软件架构的开发</span>(Architecture Based Software Development，ABSD)强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\"></span></p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 类图和序列图 ",
                        " 视角与视图&nbsp; ",
                        " 构件和类图 ",
                        " 构件与功能 "
                    ]
                },
                {
                    "index": 2,
                    "belong_page": 1,
                    "question_id": 43230,
                    "question_title": "<p><br/></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\"><span style=\"font-family:华文楷体\">基于架构的软件开发</span>(Architecture Based Software Development，ABSD.强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用(</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\">11</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\">)来描述软件架构，采用(</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\">12</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\">)来描述需求。【回答括号12】</span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43230,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p style=\"margin: 0px; line-height: 150%; text-indent: 21pt; layout-grid-mode: char;\"><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\"><span style=\"font-family:华文楷体\">根据定义，基于软件架构的开发</span>(Architecture Based Software Development，ABSD)强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。</span><span style=\"margin: 0px; font-family: 华文楷体; font-size: 11pt;\"></span></p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 用例与类图&nbsp; ",
                        " 用例与视角 ",
                        " 用例与质量场景 ",
                        " 视角与质量场景 "
                    ]
                },
                {
                    "index": 3,
                    "belong_page": 1,
                    "question_id": 43307,
                    "question_title": "<p><br/></p><p style=\"margin: 0px;\"><span style=\"margin: 0px; font-family: &quot;Kaiti SC&quot;; font-size: 11pt;\"><span style=\"font-family:Kaiti SC\">构件组装模型的优点有：</span></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43307,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 构件的自包容性让系统的扩展变得复杂 ",
                        " 构件的粒度较整个系统更大，可以将开发团队分成若干组，并行地独立开发构件。 ",
                        " 设计良好的构件更容易被重用，降低软件开发成本 ",
                        " 在考虑软件的重用度时可以对系统性能等方面进行让步。 "
                    ]
                },
                {
                    "index": 4,
                    "belong_page": 1,
                    "question_id": 43537,
                    "question_title": "<p><br/></p><p><br/></p><p class=\"MsoNormal\" style=\"mso-pagination:widow-orphan;text-align:left;\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;font-size:12.0000pt;mso-font-kerning:0.0000pt;\"><span style=\"font-family:宋体\">软件架构是降低成本、改进质量、按时和按需交付产品的关键因素。软件架构设计需满足系统的（</span> &nbsp;<span style=\"font-family:宋体\">），如性能、安全性和可修改性等，并能够指导设计人员和实现人员的工作。</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;font-size:12.0000pt;mso-font-kerning:0.0000pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43537,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 功能需求 ",
                        " 性能需求 ",
                        " 质量属性 ",
                        " 业务属性 "
                    ]
                },
                {
                    "index": 5,
                    "belong_page": 1,
                    "question_id": 43751,
                    "question_title": "<p><br/></p><p><br/></p><p class=\"MsoNormal\" style=\"text-indent:20.7000pt;text-align:left;\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">以下关于软件架构风格与系统性能关系的叙述中，错误的是</span></span><span style=\"text-decoration:underline;\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;text-decoration:underline;text-underline:single;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">（</span></span></span><span style=\"text-decoration:underline;\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;text-decoration:underline;text-underline:single;font-size:10.5000pt;mso-font-kerning:1.0000pt;\">16</span></span><span style=\"text-decoration:underline;\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;text-decoration:underline;text-underline:single;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">）</span></span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">。</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-hansi-font-family:&#39;Times New Roman&#39;;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43751,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 对于采用层次化架构风格的系统，划分的层次越多，系统的性能越差 ",
                        " 对于采用隐式调用架构风格的系统，可以通过处理函数的并发调用提高系统处理性能 ",
                        " 采用面向对象架构风格的系统，可以通过引入对象管理层提高系统性能 ",
                        " 对于采用解释器架构风格的系统，可以通过部分解释代码预先编译的方式提高系统性能。 "
                    ]
                },
                {
                    "index": 6,
                    "belong_page": 1,
                    "question_id": 43775,
                    "question_title": "<p><br/></p><p><br/></p><p>软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。架构风格反映领域中众多系统所共有的结构和(请作答此空），强调对架构(&nbsp; )的重用。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43775,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>&nbsp;软件架构设计的一个核心问题是能否使用重复的架构模式，即能否达到架构级的软件重用。也就是说，能否在不同的软件系统中，使用同一架构。基于这个目的，学者们开始研究和实践软件架构的风格和类型问题。软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。它反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。按这种方式理解，软件架构风格定义了用于描述系统的术语表和一组指导构件系统的规则</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 语义特性 ",
                        " 功能需求&nbsp;&nbsp; ",
                        " 质量属性&nbsp; ",
                        " 业务规则 "
                    ]
                },
                {
                    "index": 7,
                    "belong_page": 1,
                    "question_id": 43776,
                    "question_title": "<p><br/></p><p><br/></p><p>软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。架构风格反映领域中众多系统所共有的结构和( ），强调对架构(请作答此空)的重用。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43776,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>&nbsp;软件架构设计的一个核心问题是能否使用重复的架构模式，即能否达到架构级的软件重用。也就是说，能否在不同的软件系统中，使用同一架构。基于这个目的，学者们开始研究和实践软件架构的风格和类型问题。软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。它反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。按这种方式理解，软件架构风格定义了用于描述系统的术语表和一组指导构件系统的规则</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 分析&nbsp; ",
                        " 设计&nbsp;&nbsp; ",
                        " 实现&nbsp; ",
                        " 评估 "
                    ]
                },
                {
                    "index": 8,
                    "belong_page": 1,
                    "question_id": 43777,
                    "question_title": "<p><br/></p><p><br/></p><p>软件架构是降低成本、改进质量、按时和按需交付产品的关键因素。软件架构设计需要满足系统的(42)，如性能、安全性和可修改性等，并能够指导设计人员和实现人员的工作。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43777,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>软件架构是降低成本、改进质量、按时和按需交付产品的关键因素，软件架构设计需要满足系统的质量属性，如性能、安全性和可修改性等，软件架构设计需要确定组件之间的依赖关系，支持项目计划和管理活动，软件架构能够指导设计人员和实现人员的工作。一般在设计软件架构之初，会根据用户需求，确定多个候选架构，并从中选择一个较优的架构，并随着软件的开发，对这个架构进行微调，以达到最佳效果。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 功能需求 ",
                        " 性能需求 ",
                        " 质量属性&nbsp; ",
                        " 业务属性 "
                    ]
                },
                {
                    "index": 9,
                    "belong_page": 1,
                    "question_id": 43779,
                    "question_title": "<p><br/></p><p>基于架构的软件开发(Architecture Based Software Development，ABSD.强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用(请作答此空)来描述软件架构，采用()来描述需求。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43779,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p>根据定义，基于软件架构的开发(Architecture Based Software Development，ABSD)强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 类图和序列图&nbsp; ",
                        " 视角与视图&nbsp;&nbsp; ",
                        " 构件和类图&nbsp; ",
                        " 构件与功能 "
                    ]
                },
                {
                    "index": 10,
                    "belong_page": 1,
                    "question_id": 43781,
                    "question_title": "<p>某公司拟开发一个地面清洁机器人。机器人的控制者首先定义清洁任务和任务之间的关系，机器人接受任务后，需要响应外界环境中触发的一些突发事件，根据自身状态进行动态调整，最终自动完成任务。针对上述需求，该机器人应该采用（ ）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43781,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>机器人需要根据自身状态的外界环境进行自动调整，这是一个典型的根据外部事件进行响应的场景。比较4个候选项，规则系统比较适合根据外部事件，以自身状态为基础自动进行处理和动作的场景。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 面向对象&nbsp; ",
                        " 主程序—子程序 ",
                        " 规则系统&nbsp;&nbsp; ",
                        " 管道—过滤器 "
                    ]
                },
                {
                    "index": 11,
                    "belong_page": 1,
                    "question_id": 43782,
                    "question_title": "<p>某公司拟开发一个语音识别系统，其语音识别的主要过程包括分割原始语音信号、识别音素、产生候选词、判定语法片断、提供语义解释等，每个过程都需要进行基于先验知识的条件判断并进行相应的识别动作。针对该系统的特点，采用( )架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43782,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据题目描述，语音识别系统是一个十分典型的专家系统，其特点是求解的正确结果不止一个，求解过程比较复杂，需要通过专家知识和反馈逐步得到正确结果。因此对比4个候选项，黑板结构特别适合求解这类问题。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 解释器&nbsp; ",
                        " 面向对象 ",
                        " 黑板 ",
                        " 隐式调用 "
                    ]
                },
                {
                    "index": 12,
                    "belong_page": 1,
                    "question_id": 43783,
                    "question_title": "<p>某公司拟开发一个轿车巡航定速系统，系统需要持续测量车辆当前的实时速度，并根据设定的期望速度自动控制轿车的油门和刹车。针对上述需求，采用( )架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43783,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>&nbsp;根据题目描述，轿车巡航定速系统是一个十分典型的控制系统，其特点是不断采集系统当前状态，与系统中的设定状态进行对比，并通过将当前状态与设定状态进行对比从而进行控制</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 解释器&nbsp; ",
                        " 过程控制 ",
                        " 分层 ",
                        " 管道—过滤器 "
                    ]
                },
                {
                    "index": 13,
                    "belong_page": 1,
                    "question_id": 43784,
                    "question_title": "<p>某公司拟开发一套在线游戏系统，该系统的设计目标之一是支持用户自行定义游戏对象的属性、行为和对象之间的交互关系。为了实现上述目标，公司应该采用( )架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43784,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>该软件系统特别强调用户定义系统中对象的关系和行为这一特性，这需要在软件架构层面提供一种运行时的系统行为定义与改变的能力，根据常见架构风格的特点和适用环境，可以知道最合适的架构设计风格应该是解释器风格</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 管道—过滤器&nbsp; ",
                        " 隐式调用&nbsp;&nbsp; ",
                        " 主程序—子程序 ",
                        " 解释器 "
                    ]
                },
                {
                    "index": 14,
                    "belong_page": 1,
                    "question_id": 43785,
                    "question_title": "<p>某公司为其研发的硬件产品设计实现了一种特定的编程语言，为了方便开发者进行软件开发，公司拟开发一套针对该编程语言的集成开发环境，包括代码编辑、语法高亮、代码编译、运行调试等功能。针对上述描述，该集成开发环境应采用（ ）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43785,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>编程语言的集成开发环境需要提供代码编辑、语法高亮、代码编译、运行调试等功能，这些功能的特点是以软件代码为中心进行对应的编译处理与辅助操作。根据常见架构风格的特点和适用环境，可以知道最合适的架构设计风格应该是数据仓库风格。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 管道—过滤器 ",
                        " 数据仓储 ",
                        " 主程序—子程序 ",
                        " 解释器 "
                    ]
                },
                {
                    "index": 15,
                    "belong_page": 1,
                    "question_id": 43787,
                    "question_title": "<p><br/></p><p><br/></p><p>软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动，是一个迭代的过程。架构设计主要关注软件组件的结构、属性和( )，并通过多种(请作答此空)_全面描述特定系统的架构。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43787,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动，是一个迭代的过程。架构设计主要关注软件组件的结构、属性和交互作用，并通过多种视图全面描述特定系统的架构。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 对象&nbsp; ",
                        " 代码&nbsp; ",
                        " 文档&nbsp; ",
                        " 视图 "
                    ]
                },
                {
                    "index": 16,
                    "belong_page": 1,
                    "question_id": 43788,
                    "question_title": "<p><br/></p><p><br/></p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA.以一个特定问题领域为对象，形成由领域参考模型、参考需求、(请作答此空)_等组成的开发基础架构，支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得( )，从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得( )，从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并实现基础软件架构。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43788,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 参考设计 ",
                        " 参考规约&nbsp;&nbsp; ",
                        " 参考架构&nbsp; ",
                        " 参考实现 "
                    ]
                },
                {
                    "index": 17,
                    "belong_page": 1,
                    "question_id": 43789,
                    "question_title": "<p><br/></p><p><br/></p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA.以一个特定问题领域为对象，形成由领域参考模型、参考需求、()_等组成的开发基础架构，支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得(请作答此空)，从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得( )，从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并实现基础软件架构。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43789,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 领域边界&nbsp; ",
                        " 领域信息&nbsp; ",
                        " 领域对象&nbsp; ",
                        " 领域模型 "
                    ]
                },
                {
                    "index": 18,
                    "belong_page": 1,
                    "question_id": 43790,
                    "question_title": "<p><br/></p><p><br/></p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA.以一个特定问题领域为对象，形成由领域参考模型、参考需求、( )_等组成的开发基础架构，支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得( )，从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得(请作答此空)，从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并实现基础软件架构。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43790,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 特定领域软件需求 ",
                        " 特定领域软件架构 ",
                        " 特定领域软件设计模型&nbsp; ",
                        " 特定领域软件重用模型 "
                    ]
                },
                {
                    "index": 19,
                    "belong_page": 1,
                    "question_id": 43792,
                    "question_title": "<p><br/></p><p><br/></p><p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与()质量属性相关，通常可采用(请作答此空)架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与()质量属性相关，通常可采用()架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与()_质量属性相关，通常可采用()架构策略实现该属性。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43792,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 主动冗余&nbsp; ",
                        " 信息隐藏&nbsp; ",
                        " 抽象接口 ",
                        " 记录/回放 "
                    ]
                },
                {
                    "index": 20,
                    "belong_page": 1,
                    "question_id": 43794,
                    "question_title": "<p><br/></p><p><br/></p><p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与()质量属性相关，通常可采用()架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与()质量属性相关，通常可采用(请作答此空)架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与()_质量属性相关，通常可采用()架构策略实现该属性。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43794,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 操作串行化&nbsp; ",
                        " 资源调度&nbsp; ",
                        " 心跳&nbsp; ",
                        " 内置监控器 "
                    ]
                },
                {
                    "index": 21,
                    "belong_page": 1,
                    "question_id": 43795,
                    "question_title": "<p><br/></p><p><br/></p><p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与()质量属性相关，通常可采用()架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与()质量属性相关，通常可采用()架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（请作答此空）质量属性相关，通常可采用()架构策略实现该属性。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43795,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性 ",
                        " 安全性 ",
                        " 可测试性&nbsp; ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 22,
                    "belong_page": 1,
                    "question_id": 43796,
                    "question_title": "<p><br/></p><p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与()质量属性相关，通常可采用()架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与()质量属性相关，通常可采用()架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与()_质量属性相关，通常可采用(试题录入中)架构策略实现该属性。</p><br/><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43796,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 内置监控器&nbsp; ",
                        " 记录/回放&nbsp;&nbsp; ",
                        " 追踪审计&nbsp; ",
                        " 维护现有接口 "
                    ]
                },
                {
                    "index": 23,
                    "belong_page": 1,
                    "question_id": 43797,
                    "question_title": "<p><br/></p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是在基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)基础之上发展起来的，主要包括场景和需求收集、(请作答此空)、属性模型构造和分析、属性模型折中等4个阶段。ATAM方法要求在系统开发之前，首先对这些质量属性进行_(63)和折中。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43797,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>ATAM是在基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)基础之上发展起来的，主要包括场景和需求收集、架构视图和场景实现、属性模型构造和分析、属性模型折中等4个阶段。ATAM方法要求在系统开发之前，首先对这些质量属性进行评价和折中。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 架构视图和场景实现&nbsp; ",
                        " 架构风格和场景分析 ",
                        " 架构设计和目标分析&nbsp;&nbsp; ",
                        " 架构描述和需求评估 "
                    ]
                },
                {
                    "index": 24,
                    "belong_page": 1,
                    "question_id": 43798,
                    "question_title": "<p><br/></p><p><br/></p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是在基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)基础之上发展起来的，主要包括场景和需求收集、()、属性模型构造和分析、属性模型折中等4个阶段。ATAM方法要求在系统开发之前，首先对这些质量属性进行_(请作答此空)和折中。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43798,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p><br/></p><p>ATAM是在基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)基础之上发展起来的，主要包括场景和需求收集、架构视图和场景实现、属性模型构造和分析、属性模型折中等4个阶段。ATAM方法要求在系统开发之前，首先对这些质量属性进行评价和折中。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 设计&nbsp; ",
                        " 实现&nbsp; ",
                        " 测试&nbsp; ",
                        " 评价 "
                    ]
                },
                {
                    "index": 25,
                    "belong_page": 1,
                    "question_id": 43837,
                    "question_title": "<p>MVC模式强制性地将一个应用处理流程按照模型、视图、控制的方式进行分离，三者的协作关系如下图所示：<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200212/1581515112575183.png\" title=\"1581515112575183.png\" alt=\"image.png\"/><br/>以下选项（&nbsp; &nbsp; &nbsp; ）属于上图位置“（1）”<br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43837,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>结合本题，正确答案是A。<br/>（1）应该是“选择视图”。<br/>同时我们还要知道：<br/>（2）应该是“业务处理”；<br/>（3）应该是“状态查询”。<br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 选择视图 ",
                        " 业务处理&nbsp;&nbsp;&nbsp;&nbsp; ",
                        " 状态查询&nbsp;&nbsp;&nbsp;&nbsp; ",
                        " 触发事件 "
                    ]
                },
                {
                    "index": 26,
                    "belong_page": 1,
                    "question_id": 43838,
                    "question_title": "<p>MVC模式强制性地将一个应用处理流程按照模型、视图、控制的方式进行分离，三者的协作关系如图所示。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211130/1638254482206316.png\" title=\"1638254482206316.png\" alt=\"屏幕截图 2021-11-30.png\"/></p><p>图中的(2)是（ ）。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43838,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "略<p></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 选择视图&nbsp;&nbsp;&nbsp;&nbsp; ",
                        " 业务处理 ",
                        " 状态查询 ",
                        " 触发事件 "
                    ]
                },
                {
                    "index": 27,
                    "belong_page": 1,
                    "question_id": 43839,
                    "question_title": "MVC模式强制性地将一个应用处理流程按照模型、视图、控制的方式进行分离，三者的协作关系如图所示。<p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211130/1638239660146394.png\" title=\"1638239660146394.png\" alt=\"屏幕截图 2021-11-30.png\"/><br/>图中的(3)是（ ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43839,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p><p></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 选择视图 ",
                        " 业务处理 ",
                        " 状态查询 ",
                        " 触发事件 "
                    ]
                },
                {
                    "index": 28,
                    "belong_page": 1,
                    "question_id": 43840,
                    "question_title": "<p>基于XML的界面管理技术可实现灵活的界面配置、界面动态生成和界面定制，其思路是用XML生成配置文件及界面所需的元数据，按不同需求生成界面元素及软件界面，其技术框图如图4-2所示：<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200212/1581517769848363.png\" title=\"1581517769848363.png\" alt=\"image.png\"/><br/></p><p>图中的（1）应该是（&nbsp; &nbsp; &nbsp; &nbsp;）</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43840,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>结合本题，（1）应该是“界面定制”。因此正确答案是A。<br/><br/>同时本题（2）应该是界面动态生成；（3）应该是界面配置。<br/><br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 界面定制 ",
                        " 界面动态生成 ",
                        " 界面配置 ",
                        " 界面修改 "
                    ]
                },
                {
                    "index": 29,
                    "belong_page": 1,
                    "question_id": 43841,
                    "question_title": "<p>基于&nbsp;XML&nbsp;的界面管理技术可实现灵活的界面配置、界面动态生成和界面定制，其思路是用&nbsp;XML&nbsp;生成配置文件及界面所需的元数据，按不同需求生成界面元素及软件界面，其技术框图如图所示。图中空（2）应为（&nbsp;）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210419/1618819637844561.png\" title=\"1618819637844561.png\" alt=\"xml-ui.png\"/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43841,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>系统架构设计师<br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 界面定制 ",
                        " 界面动态生成 ",
                        " 界面配置 ",
                        " 界面修改 "
                    ]
                },
                {
                    "index": 30,
                    "belong_page": 1,
                    "question_id": 43842,
                    "question_title": "<p>基于&nbsp;XML&nbsp;的界面管理技术可实现灵活的界面配置、界面动态生成和界面定制，其思路是用&nbsp;XML&nbsp;生成配置文件及界面所需的元数据，按不同需求生成界面元素及软件界面，其技术框图如图所示。图中空（3）应为（&nbsp;）。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210419/1618824425299218.png\" title=\"1618824425299218.png\" alt=\"xml-ui.png\"/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43842,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 界面定制 ",
                        " 界面动态生成 ",
                        " 界面配置 ",
                        " 界面修改 "
                    ]
                },
                {
                    "index": 31,
                    "belong_page": 1,
                    "question_id": 43843,
                    "question_title": "<p><br/></p><p><br/></p><p class=\"MsoNormal\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">使用</span>MVC<span style=\"font-family:宋体\">设计表现层，具有</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">的</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">优点</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">不包括（</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\">&nbsp;</span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">）</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43843,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 在MVC模式中，视图与模型通过接口发生联系，如果增加新类型的用户界面，只要修改视图与模型即可 ",
                        " 控制器和视图随着模型的扩展而扩展，只要保持公共接口，控制器和视图的旧版本可以继续使用 ",
                        " 用户界面与模型方法调用组合起来，使程序的使用更清晰，可将友好的界面发布给用户 ",
                        " 在MVC模式中，视图与模型没有必然的联系，都是通过控制器发生联系，如果增加新类型的用户界面，只需修改响应的控制器和视图即可，模型无需变动 "
                    ]
                },
                {
                    "index": 32,
                    "belong_page": 1,
                    "question_id": 43844,
                    "question_title": "<p><br/></p><p><br/></p><p class=\"MsoNormal\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">一般来说，架构可以分为（</span> <span style=\"font-family:宋体\">）、中间层和持久层三个层次</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Courier;mso-hansi-font-family:Courier;mso-bidi-font-family:Courier;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43844,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 视图层 ",
                        " 表现层&nbsp; ",
                        " 控制层&nbsp; ",
                        " 用户界面 "
                    ]
                },
                {
                    "index": 33,
                    "belong_page": 1,
                    "question_id": 43845,
                    "question_title": "<p>（请作答此空）主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。该层主要通过（ ）结构来实现。（ ）负责接收用户的请求，并决定应该调用哪个模型来处理；然后，（ ）根据用户请求调用（ ）进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的（ ）来格式化模型返回的数据，并通过视图呈现给用户。<br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43845,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 视图层&nbsp;&nbsp;&nbsp;&nbsp; ",
                        " 表现层&nbsp; ",
                        " 中间层&nbsp; ",
                        " 用户界面&nbsp; "
                    ]
                },
                {
                    "index": 34,
                    "belong_page": 1,
                    "question_id": 43846,
                    "question_title": "<p>（ ）主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。该层主要通过（请作答此空）结构来实现。（ ）负责接收用户的请求，并决定应该调用哪个模型来处理；然后，（ ）根据用户请求调用（ ）进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的（ ）来格式化模型返回的数据，并通过视图呈现给用户。<br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43846,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " CLR&nbsp; ",
                        " JVM&nbsp; ",
                        " MVC&nbsp; ",
                        " DAO "
                    ]
                },
                {
                    "index": 35,
                    "belong_page": 1,
                    "question_id": 43847,
                    "question_title": "<p>（&nbsp;）主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。该层主要通过（&nbsp;）结构来实现。（请作答此空）负责接收用户的请求，并决定应该调用哪个模型来处理；然后，（&nbsp;）根据用户请求调用（&nbsp;）进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的（&nbsp;）来格式化模型返回的数据，并通过视图呈现给用户。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43847,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 浏览器&nbsp; ",
                        " 视图&nbsp; ",
                        " 控制器&nbsp;&nbsp; ",
                        " 模型 "
                    ]
                },
                {
                    "index": 36,
                    "belong_page": 1,
                    "question_id": 43848,
                    "question_title": "（&nbsp;）主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。该层主要通过（&nbsp;）结构来实现。（&nbsp;）负责接收用户的请求，并决定应该调用哪个模型来处理；然后，（请作答此空）根据用户请求调用（&nbsp;）进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的（&nbsp;）来格式化模型返回的数据，并通过视图呈现给用户。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43848,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 浏览器&nbsp; ",
                        " 视图&nbsp; ",
                        " 控制器 ",
                        " 模型 "
                    ]
                },
                {
                    "index": 37,
                    "belong_page": 1,
                    "question_id": 43849,
                    "question_title": "<p>（ ）主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。该层次主要通过（ ）结构实现，（ ）负责接收用户的请求，并决定应该调用哪个模型来处理；然后，（ ）根据用户请求调用（请作答此空）进行响应的业务逻辑处理，并返回数据；最后，控制器调用的（ ）来格式化模型返回的数据，并通过视图呈现给用户。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43849,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控 制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 视图层 ",
                        " 表现层&nbsp; ",
                        " 中间层&nbsp; ",
                        " 用户界面&nbsp; "
                    ]
                },
                {
                    "index": 38,
                    "belong_page": 1,
                    "question_id": 43850,
                    "question_title": "<p>（ ）主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。该层主要通过（ ）结构来实现。（ ）负责接收用户的请求，并决定应该调用哪个模型来处理；然后，（ ）根据用户请求调用（ ）进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的（请作答此空）来格式化模型返回的数据，并通过视图呈现给用户。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43850,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 浏览器 ",
                        " 视图 ",
                        " 控制器&nbsp; ",
                        " 模型 "
                    ]
                },
                {
                    "index": 39,
                    "belong_page": 1,
                    "question_id": 43865,
                    "question_title": "<p><br/></p><p class=\"MsoNormal\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">基于</span>ODP的架构开发过程中企业业务架构不包括（ ）</span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43865,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 业务行为 ",
                        " 业务目标 ",
                        " 业务对象 ",
                        " 业务策略 "
                    ]
                },
                {
                    "index": 40,
                    "belong_page": 1,
                    "question_id": 43866,
                    "question_title": "<p><br/></p><p><br/></p><p>基于ODP的架构开发过程中逻辑信息架构不包括（ ）</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43866,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 信息对象 ",
                        " 信息行为 ",
                        " 信息联合 ",
                        " 业务对象 "
                    ]
                },
                {
                    "index": 41,
                    "belong_page": 1,
                    "question_id": 43867,
                    "question_title": "<p><br/></p><p><br/></p><p class=\"MsoNormal\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">计算接口架构不包括（</span> <span style=\"font-family:宋体\">）</span></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43867,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 子系统的一致性 ",
                        " 应用程序接口 ",
                        " 应用程序对象 ",
                        " 接口行为 "
                    ]
                },
                {
                    "index": 42,
                    "belong_page": 1,
                    "question_id": 43875,
                    "question_title": "J2EE&nbsp;平台采用了多层分布式应用程序模型，实现不同逻辑功能的应用程序被封装到不同的构件中，处于不同层次的构件可被分别部署到不同的机器中。<p>图中的（1）应该为：<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210419/1618824977823439.png\" title=\"1618824977823439.png\" alt=\"j2ee.png\"/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43875,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " Applet ",
                        " Servlet&nbsp; ",
                        " EJB容器 ",
                        " SessionBean&nbsp;&nbsp; "
                    ]
                },
                {
                    "index": 43,
                    "belong_page": 1,
                    "question_id": 43876,
                    "question_title": "<p>J2EE平台采用了多层分布式应用程序模型，实现不同逻辑功能的应用程序被封装到不同的构件中，处于不同层次的构件可被分别部署到不同的机器中。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211130/1638255282741484.png\" title=\"1638255282741484.png\" alt=\"屏幕截图 2021-11-30.png\"/></p><p>图中(2)为（ ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43876,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " Applet ",
                        " Servlet&nbsp; ",
                        " EJB容器 ",
                        " SessionBean&nbsp; "
                    ]
                },
                {
                    "index": 44,
                    "belong_page": 1,
                    "question_id": 43877,
                    "question_title": "<p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/201807/d1b549d54eefa358515040c7e7cf7ef5297bc9.png\"/><br/>请作答(3)空</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43877,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " Applet&nbsp; ",
                        " Servlet ",
                        " EJB容器 ",
                        " SessionBean&nbsp;&nbsp; "
                    ]
                },
                {
                    "index": 45,
                    "belong_page": 1,
                    "question_id": 43878,
                    "question_title": "<p>J2EE平台采用了多层分布式应用程序模型，实现不同逻辑功能的应用程序被封装到不同的构件中，处于不同层次的构件可被分别部署到不同的机器中。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211130/1638255219666169.png\" title=\"1638255219666169.png\" alt=\"屏幕截图 2021-11-30.png\"/></p><p>图中(4)为（ ）。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43878,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " Applet ",
                        " Servlet&nbsp; ",
                        " EntityBean ",
                        " SessionBean&nbsp;&nbsp;&nbsp; "
                    ]
                },
                {
                    "index": 46,
                    "belong_page": 1,
                    "question_id": 43879,
                    "question_title": "J2EE 平台采用了多层分布式应用程序模型，实现不同逻辑功能的应用程序被封装到不同的构件中，处于不同层次的构件可被分别部署到不同的机器中。<p>图中的（5）应该为：<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210419/1618799680236032.png\" title=\"1618799680236032.png\" alt=\"j2ee.png\"/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43879,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " Applet ",
                        " Servlet ",
                        " EntityBean&nbsp; ",
                        " SessionBean&nbsp;&nbsp;&nbsp; "
                    ]
                },
                {
                    "index": 47,
                    "belong_page": 1,
                    "question_id": 43881,
                    "question_title": "<p><br/></p><p class=\"MsoNormal\" style=\"text-align:left;\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:&#39;Times New Roman&#39;;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">中间件的作用表述不正确的是（</span> <span style=\"font-family:宋体\">）</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:&#39;Times New Roman&#39;;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43881,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 负责客户机与服务器之间的连接和通信，以及客户机与应用层之间的高效率的通信机制 ",
                        " 提供应用层相同服务之间的互操作机制，以及应用层与数据库之间的高效率通信机制 ",
                        " 提供一个多层架构的应用开发和运行平台，以及一个应用开发框架，支持模块化的应用开发 ",
                        " 屏蔽硬件、操作系统、网络和数据库的差异 "
                    ]
                },
                {
                    "index": 48,
                    "belong_page": 1,
                    "question_id": 43882,
                    "question_title": "<p><br/></p><p><br/></p><p class=\"MsoNormal\" style=\"text-align:left;\"><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:&#39;Times New Roman&#39;;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"><span style=\"font-family:宋体\">以下说法错误的是（）</span></span><span style=\"mso-spacerun:&#39;yes&#39;;font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:&#39;Times New Roman&#39;;font-size:10.5000pt;mso-font-kerning:1.0000pt;\"></span></p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43882,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p>本体考察的是和COM相关连的内容的理解。一旦公布，COM接口和其他的规范不允许以任何形式改变，既解决了语法问题，也解决了弱基类问题。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " COM接口可通过（单）接口继承从其他COM接口中派生。 ",
                        " COM支持系统注册器，它类似CORBA存储器。 ",
                        " COM的接口继承与其支持的多态无关。 ",
                        " 即使公布了，COM接口和它的规范也可以以某种特定的形式改变。 "
                    ]
                },
                {
                    "index": 49,
                    "belong_page": 1,
                    "question_id": 43885,
                    "question_title": "<p>远程过程调用中的远程既可以指（请作答此空），也可以指同一台计算机上的（ ）。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43885,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 相同的计算机 ",
                        " 不同的计算机&nbsp; ",
                        " 不同的通信模块 ",
                        " 相同的通信模块 "
                    ]
                },
                {
                    "index": 50,
                    "belong_page": 1,
                    "question_id": 43886,
                    "question_title": "<p>远程过程调用中的远程既可以指（），也可以指同一台计算机上的（请作答此空）。</p><br/><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 43886,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 不同的进程 ",
                        " 相同的进程&nbsp; ",
                        " 不同的通信模块&nbsp; ",
                        " 相同的通信模块 "
                    ]
                },
                {
                    "index": 51,
                    "belong_page": 1,
                    "question_id": 46854,
                    "question_title": "<p>以下关于软件架构风格与系统性能关系的叙述，错误的是（）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46854,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查对软件架构风格与系统性能之间关系的理解。</p><p>对于采用层次化架构风格的系统，划分的层次越多，系统完成某项功能需要的中间调用操作越多，其性能越差。</p><p>对于采用管道一过滤器架构风格的系统，可以通过引入过滤器的数据并发处理可以有效提高系统性能。</p><p>对于采用面向对象架构风格的系统，可以通过减少功能调用层次提高系统性能。</p><p>对于采用过程调用架构风格的系统，将显式调用策略替换为隐式调用策略能够提高系统的灵活性，但会降低系统的性能。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 对于采用层次化架构风格的系统，划分的层次越多，系统的性能越差 ",
                        " 对于采用管道一过滤器架构风格的系统，可以通过引入过滤器的数据并发处理提高系统性能 ",
                        " 对于采用面向对象架构风格的系统，可以通过减少功能调用层次提高系统性能 ",
                        " 对于采用过程调用架构风格的系统，可以通过将显式调用策略替换为隐式调用策略提高系统性能 "
                    ]
                },
                {
                    "index": 52,
                    "belong_page": 1,
                    "question_id": 46861,
                    "question_title": "<p>以下关于软件中间件的叙述，错误的是（）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46861,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。</p><p>软件中间件的作用是为处于自己上层的应用软件提供运行与开发的环境，帮助用户开发和集成应用软件。它不仅仅要实现互连，还要实现应用之间的互操作。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 中间件通过标准接口实现与应用程序的关联，提供特定功能的服务 ",
                        " 使用中间件可以提高应用软件可移植性 ",
                        " 使用中间件将增加应用软件设计的复杂度 ",
                        " 使用中间件有助于提高开发效率 "
                    ]
                },
                {
                    "index": 53,
                    "belong_page": 1,
                    "question_id": 46940,
                    "question_title": "<p>软件构件是一个独立可部署的软件单元，与程序设计中的对象不同，构件（）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46940,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>构件的特性是:</p><p>（1）独立部署单元；</p><p>（2）作为第三方的组装单元；</p><p>（3）没有（外部的）可见状态。<br/>构件创建的对象（对这些对象的引用）可以与对象分离开来，并对构件的客户可见。<br/></p><p>一个构件可以包含多个类元素，但是一个类元素只能属于一个构件。将一个类拆分进行部署通常没什么意义。</p><p>对象的特性是：</p><p>（1）一个实例单元，具有唯一的标志。</p><p>（2）可能具有状态，此状态外部可见。</p><p>（3）封装了自己的状态和行为。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 是一个实例单元，具有唯一的标志 ",
                        " 可以利用容器管理自身对外的可见状态 ",
                        " 利用工厂方法(如构造函数〉来创建自己的实例 ",
                        " <span style=\"line-height: 125%; font-family: 宋体; font-size: 12pt; mso-bidi-font-family: 宋体; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">之间可以共享一个类元素</span> "
                    ]
                },
                {
                    "index": 54,
                    "belong_page": 1,
                    "question_id": 46950,
                    "question_title": "<p>应用系统构建中可以采用多种不同的技术，逆向工程可以将软件某种形式的描述转换为更高级的抽象表现形式，而利用这些获取的信息，( ) 能够对现有系统进行修改或重构，从而产生系统的一个新版本。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46950,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>所谓软件的逆向工程就是分析已有的程序，寻求比源代码更高级的抽象表现形式。一般认为，凡是在软件生命周期内将软件某种形式的描述转换成更为抽象形式的活动都可称为逆向工程。与之相关的概念是：重构（restructuring），指在同一抽象级别上转换系统描述形式；设计恢复（design recovery)，指借助工具从已有程序中抽象出有关数据设计、总体结构设计和过程设计的信息（不一定是原设计）；再工程（re-engineering），也称修复和改造工程，它是在逆向工程所获信息的基础上修改或重构已有的系统，产生系统的一个新版本。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 逆向工程（(Reverse Engineering) ",
                        " 系统改进 (System Improvement) ",
                        " 设计恢复 (Design Recovery ) ",
                        " 再工程 (Re-engineering) "
                    ]
                },
                {
                    "index": 55,
                    "belong_page": 1,
                    "question_id": 46952,
                    "question_title": "<p>系统移植也是系统构建的一种实现方法，在移植工作中，()需要最终确定移植方法。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46952,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>移植工作大体上分为计划阶段、准备阶段、转换阶段、测试阶段、验证阶段。</p><p>1、计划阶段，在计划阶段，要进行现有系统的调查整理，从移植技术、系统内容（是否进行系统提炼等）、系统运行三个方面，探讨如何转换成新系统，决定移植方法，确立移植工作体制及移植日程。</p><p>2、准备阶段，在准备阶段要进行移植方面的研究，准备转换所需的资料。该阶段的作业质量将对以后的生产效率产生很大的影响。</p><p>3、转换阶段，这一阶段是将程序设计和数据转换成新机器能根据需要工作的阶段。提高转换工作的精度，减轻下一阶段的测试负担是提高移植工作效率的基本内容。</p><p>4、测试阶段，这一阶段是进行程序单元、工作单元测试的阶段。在本阶段要核实程序能否在新系统中准确地工作。所以，当有不能准确工作的程序时，就要回到转换阶段重新工作。</p><p>5、验证阶段，这是测试完的程序使新系统工作，最后核实系统，准备正式运行的阶段。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 计划阶段 ",
                        " 准备阶段 ",
                        " 转换阶段 ",
                        " 验证阶段 "
                    ]
                },
                {
                    "index": 56,
                    "belong_page": 1,
                    "question_id": 46955,
                    "question_title": "<p>在基于体系结构的软件设计方法中，采用（ ）来描述软件架构。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46955,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据基于软件架构的设计的定义，基于软件架构的设计（Architecture Based Software Development，ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 类图和序列图 ",
                        " 视角与视图 ",
                        " 构件和类图 ",
                        " 构件与功能 "
                    ]
                },
                {
                    "index": 57,
                    "belong_page": 1,
                    "question_id": 46958,
                    "question_title": "<p>体系结构文档化有助于辅助系统分析人员和程序员去实现体系结构。体系结构文档化过程的主要输出包括（）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46958,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构文档化过程的主要输出结果是体系结构规格说明和测试体系结构需求的质量设计说明书这两个文档。软件体系结构的文档要求与软件开发项目中的其他文档是类似的。文档的完整性和质量是软件体系结构成功的关键因素。文档要从使用者的角度进行编写，必须分发给所有与系统有关的开发人员，且必须保证开发者手上的文档是最新的。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 体系结构规格说明、测试体系结构需求的质量设计说明书 ",
                        " 质量属性说明书、体系结构描述 ",
                        " 体系结构规格说明、软件功能需求说明 ",
                        " 多视图体系结构模型、体系结构验证说明 "
                    ]
                },
                {
                    "index": 58,
                    "belong_page": 1,
                    "question_id": 46959,
                    "question_title": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的（）特征。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46959,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为客户/服务器模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 语法和语义 ",
                        " 结构和语义 ",
                        " 静态和动态 ",
                        " 行为和约束 "
                    ]
                },
                {
                    "index": 59,
                    "belong_page": 1,
                    "question_id": 46960,
                    "question_title": "<p>对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用（）架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46960,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>语音识别是黑板风格的经典应用场景。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 管道-过滤器 ",
                        " 解释器 ",
                        " 黑板 ",
                        " 过程控制 "
                    ]
                },
                {
                    "index": 60,
                    "belong_page": 1,
                    "question_id": 46961,
                    "question_title": "<p>对于因数据输入某个构件，经过内部处理，产生数据输出的系统，通常会采用（）架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46961,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>输入某个构件，经过内部处理，产生数据输出的系统，正是管道-过滤器中过滤器的职能，把多个过滤器使用管道相联的风格为管道-过滤器风格。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 事件驱动系统 ",
                        " 黑板 ",
                        " 管道-过滤器 ",
                        " 分层系统 "
                    ]
                },
                {
                    "index": 61,
                    "belong_page": 1,
                    "question_id": 46962,
                    "question_title": "<p>某公司拟开发一个 VIP 管理系统，系统需要根据不同商场活动，不定期更新 VIP 会员的审核标准和 VIP 折扣标准。针对上述需求，采用（）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46962,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据题目中描述，VIP管理系统会根据不同商场活动，不定期更新VIP会员的审核标准和折扣标准，属于典型规则系统应用场景。<br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 规则系统 ",
                        " 过程控制 ",
                        " 分层 ",
                        " 管道-过滤器 "
                    ]
                },
                {
                    "index": 62,
                    "belong_page": 1,
                    "question_id": 46963,
                    "question_title": "<p>某公司拟开发一个新闻系统，该系统可根据用户的注册兴趣，向用户推送其感兴趣的新闻内容，该系统应该采用（）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46963,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>用户会注册自己的兴趣，然后系统也会把新闻按兴趣分类，如果某个新闻事件发生，可以通过事件来触发推送动作，将新闻推送给对其感兴趣的用户。这是典型的事件驱动系统应用场景。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 事件驱动系统 ",
                        " 主程序-子程序 ",
                        " 黑板 ",
                        " 管道-过滤器 "
                    ]
                },
                {
                    "index": 63,
                    "belong_page": 1,
                    "question_id": 46964,
                    "question_title": "<p>系统中的构件和连接件都有一个顶部和一个底部，构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接的顶部，构件和构件之间不允许直接连接，连接件直接连接时，必须由其中一个的底部连接到另一个的顶部。上述构件和连接件的组织规则描述的是（&nbsp;&nbsp;&nbsp;&nbsp;）架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46964,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>C2体系结构风格可以概括为：通过连接件绑定在一起按照一组规则运作的并行构件网络。C2风格中的系统组织规则如下。</p><p>①系统中的构件和连接件都有一个顶部和一个底部。</p><p>②构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接件的顶部。而构件与构件之间的直接连接是不允许的。</p><p>③一个连接件可以和任意数目的其他构件和连接件连接。</p><p>④当两个连接件进行直接连接时，必须由其中一个的底部到另一个的顶部。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 管道-过滤器 ",
                        " 分层系统 ",
                        " C2 ",
                        " 面向对象 "
                    ]
                },
                {
                    "index": 64,
                    "belong_page": 1,
                    "question_id": 46969,
                    "question_title": "<p>某公司欲开发一个在线交易网站，在架构设计阶段，公司的架构师识别出 3 个核心质量属性场景。其中&quot;网站正常运行时，用户发起的交易请求应该在 3 秒内完成&quot; 主要与（）质量属性相关；</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46969,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>对于题干描述：“用户的交易请求需要在3秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性 ",
                        " 性能 ",
                        " 易用性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 65,
                    "belong_page": 1,
                    "question_id": 46970,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段公司的架构师识别出 3 个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（请作答此空）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46970,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 内置监控器 ",
                        " 记录/回放 ",
                        " 追踪审计 ",
                        " 维护现有接口 "
                    ]
                },
                {
                    "index": 66,
                    "belong_page": 1,
                    "question_id": 46972,
                    "question_title": "<p>某公司欲开发一个在线交易网站，在架构设计阶段，公司的架构师识别出 3 个核心质量属性场景。&quot;在线交易主站宕机后，能够在 3 秒内自动切换至备用站点并恢复正常运行&quot;主要与可用性质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 46972,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>对于题干描述：“用户的交易请求需要在3秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“在线交易主站宕机后，需要在3秒内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性。“系统应该具备一定的安全保护措施， 从而能够抵挡恶意的入侵破坏行为，并对所有针对网站的攻击行为进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 记录/回放&nbsp;&nbsp;&nbsp;&nbsp; ",
                        " 操作串行化 ",
                        " 心跳 ",
                        " 增加计算资源 "
                    ]
                },
                {
                    "index": 67,
                    "belong_page": 1,
                    "question_id": 49867,
                    "question_title": "<p>在基于体系结构的软件设计方法中，采用（请作答此空 ）来描述软件架构，采用（）但来描述功能需求，采用（）来描述质量需求。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49867,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据基于软件架构的设计的定义，基于软件架构的设计（Architecture Based Software Development，ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。进一步来说，用例描述的是功能需求，质量属性场景描述的是质量需求（或侧重于非功能需求）。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 类圈和序列图 ",
                        " 视角与视图 ",
                        " 构件和类圈 ",
                        " 构件与功能 "
                    ]
                },
                {
                    "index": 68,
                    "belong_page": 1,
                    "question_id": 49868,
                    "question_title": "<p>在基于体系结构的软件设计方法中，采用（ ）来描述软件架构，采用（请作答此空）但来描述功能需求，采用（ ）来描述质量需求。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49868,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据基于软件架构的设计的定义，基于软件架构的设计（Architecture Based Software Development，ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。进一步来说，用例描述的是功能需求，质量属性场景描述的是质量需求（或侧重于非功能需求）。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 类图 ",
                        " 视角 ",
                        " 用例 ",
                        " 质量场景 "
                    ]
                },
                {
                    "index": 69,
                    "belong_page": 1,
                    "question_id": 49869,
                    "question_title": "<p>在基于体系结构的软件设计方法中，采用（）来描述软件架构，采用（）但来描述功能需求，采用（ 请作答此空）来描述质量需求。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49869,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据基于软件架构的设计的定义，基于软件架构的设计（Architecture Based Software Development，ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。进一步来说，用例描述的是功能需求，质量属性场景描述的是质量需求（或侧重于非功能需求）。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 连接件 ",
                        " 用例 ",
                        " 质量场景 ",
                        " 视角 "
                    ]
                },
                {
                    "index": 70,
                    "belong_page": 1,
                    "question_id": 49870,
                    "question_title": "<p>体系结构文档化有助于辅助系统分析人员和程序员去实现体系结构。体系结构文档化过程的主要输出包括（ ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49870,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构文档化过程的主要输出结果是体系结构规格说明和测试体系结构需求的质量设计说明书这两个文档。软件体系结构的文档要求与软件开发项目中的其他文档是类似的。文档的完整性和质量是软件体系结构成功的关键因素。文档要从使用者的角度进行编写，必须分发给所有与系统有关的开发人员，且必须保证开发者手上的文档是最新的。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 体系结构规格说明、测试体系结构需求的质量设计说明书 ",
                        " 质量属性说明书、体系结构描述 ",
                        " 体系结构规格说明、软件功能需求说明 ",
                        " 多视图体系结构模型、体系结构验证说明 "
                    ]
                },
                {
                    "index": 71,
                    "belong_page": 1,
                    "question_id": 49871,
                    "question_title": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的（请作答此空 ）特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用（）架构风格。对于因数据输入某个构件，经过内部处理，产生数据输出的系统，通常会采用（）架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49871,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为客户/服务器模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p><p>语音识别是黑板风格的经典应用场景。</p><p>输入某个构件，经过内部处理，产生数据输出的系统，正是管道-过滤器中过滤器的职能，把多个过滤器使用管道相联的风格为管道-过滤器风格。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 语法和语义 ",
                        " 结构和语义 ",
                        " 静态和动态 ",
                        " 行为和约束 "
                    ]
                },
                {
                    "index": 72,
                    "belong_page": 1,
                    "question_id": 49872,
                    "question_title": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的（ ）特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用（请作答此空 ）架构风格。对于因数据输入某个构件，经过内部处理，产生数据输出的系统，通常会采用（）架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49872,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为客户/服务器模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p><p>语音识别是黑板风格的经典应用场景。</p><p>输入某个构件，经过内部处理，产生数据输出的系统，正是管道-过滤器中过滤器的职能，把多个过滤器使用管道相联的风格为管道-过滤器风格。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 管道-过滤器 ",
                        " 解释器 ",
                        " 黑板 ",
                        " 过程控制 "
                    ]
                },
                {
                    "index": 73,
                    "belong_page": 1,
                    "question_id": 49873,
                    "question_title": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的（ ）特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用（）架构风格。对于因数据输入某个构件，经过内部处理，产生数据输出的系统，通常会采用（请作答此空 ）架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49873,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为客户/服务器模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p><p>语音识别是黑板风格的经典应用场景。</p><p>输入某个构件，经过内部处理，产生数据输出的系统，正是管道-过滤器中过滤器的职能，把多个过滤器使用管道相联的风格为管道-过滤器风格。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 事件驱动系统 ",
                        " 黑板 ",
                        " 管道-过滤器 ",
                        " 分层系统 "
                    ]
                },
                {
                    "index": 74,
                    "belong_page": 1,
                    "question_id": 49874,
                    "question_title": "<p>某公司拟开发一个 VIP 管理系统，系统需要根据不同商场活动，不定期更新 VIP 会员的审核标准和 VIP 折扣标准。针对上述需求，采用（ ）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49874,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据题目中描述，VIP管理系统会根据不同商场活动，不定期更新VIP会员的审核标准和折扣标准，属于典型规则系统应用场景。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 规则系统 ",
                        " 过程控制 ",
                        " 分层 ",
                        " 管道-过滤器 "
                    ]
                },
                {
                    "index": 75,
                    "belong_page": 1,
                    "question_id": 49875,
                    "question_title": "<p>某公司拟开发一个新闻系统，该系统可根据用户的注册兴趣，向用户推送其感兴趣的新闻内容，该系统应该采用（ ）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49875,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>用户会注册自己的兴趣，然后系统也会把新闻按兴趣分类，如果某个新闻事件发生，可以通过事件来触发推送动作，将新闻推送给对其感兴趣的用户。这是典型的事件驱动系统应用场景。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 事件驱动系统 ",
                        " 主程序-子程序 ",
                        " 黑板 ",
                        " 管道-过滤器 "
                    ]
                },
                {
                    "index": 76,
                    "belong_page": 1,
                    "question_id": 49876,
                    "question_title": "<p>系统中的构件和连接件都有一个顶部和一个底部，构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接的顶部，构件和构件之间不允许直接连接，连接件直接连接时，必须由其中一个的底部连接到另一个的顶部。上述构件和连接件的组织规则描述的是（ ）架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49876,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>C2体系结构风格可以概括为：通过连接件绑定在一起按照一组规则运作的并行构件网络。C2风格中的系统组织规则如下。</p><p>①系统中的构件和连接件都有一个顶部和一个底部。</p><p>②构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接件的顶部。而构件与构件之间的直接连接是不允许的。</p><p>③一个连接件可以和任意数目的其他构件和连接件连接。</p><p>④当两个连接件进行直接连接时，必须由其中一个的底部到另一个的顶部。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 管道-过滤器 ",
                        " 分层系统 ",
                        " C2 ",
                        " 面向对象 "
                    ]
                },
                {
                    "index": 77,
                    "belong_page": 1,
                    "question_id": 49880,
                    "question_title": "<p>按照设计模式的目的进行划分，现有的设计模式可以分为三类。其中创建型模式通过采用抽象类所定义的接口，封装了系统中对象如何创建、组合等信息，其代表有( )模式等;( )模式主要用于如何组合己有的类和对象以获得更大的结构，其代表有 Adapter 模式等;( )模式主要用于对象之间的职责及其提供服务的分配方式，其代表有( 请作答此空)模式等。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49880,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>按照设计模式的目的进行划分，现有的设计模式可以分为三类。</p><p>创建型模式通过采用抽象类所定义的接口，封装了系统中对象如何创建、组合等信息，其代表有Singleton模式等;</p><p>结构型模式主要用于如何组合己有的类和对象以获得更大的结构，其代表有 Adapter 模式等;</p><p>行为型模式主要用于对象之间的职责及其提供服务的分配方式，其代表有Visitor模式等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " Prototype ",
                        " Facade ",
                        " Proxy ",
                        " Visitor "
                    ]
                },
                {
                    "index": 78,
                    "belong_page": 1,
                    "question_id": 49883,
                    "question_title": "<p>某公司欲开发一个在线交易网站，在架构设计阶段，公司的架构师识别出 3 个核心质量属性场景。其中&quot;网站正常运行时，用户发起的交易请求应该在 3 秒内完成&quot; 主要与（）质量属性相关，通常可采用（）架构策略实现该属性; &quot;在线交易主站宕机后，能够在 3 秒内自动切换至备用站点并恢复正常运行&quot;主要与（ 请作答此空）质量属 性相关，通常可采用（）架构策略实现该属性; &quot;系统应该具备一定的安全保护措施， 从而能够抵挡恶意的入侵破坏行为，并对所有针对网站的攻击行为进行报警和记录&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49883,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>对于题干描述：&quot;用户的交易请求需要在3秒内得到响应&quot;，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。</p><p>&quot;在线交易主站宕机后，需要在3秒内恢复正常运行&quot;主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性。</p><p>&quot;系统应该具备一定的安全保护措施， 从而能够抵挡恶意的入侵破坏行为，并对所有针对网站的攻击行为进行报警和记录&quot;主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 易用性 ",
                        " 可用性 ",
                        " 互操作性 "
                    ]
                },
                {
                    "index": 79,
                    "belong_page": 1,
                    "question_id": 49884,
                    "question_title": "<p>某公司欲开发一个在线交易网站，在架构设计阶段，公司的架构师识别出 3 个核心质量属性场景。其中&quot;网站正常运行时，用户发起的交易请求应该在 3 秒内完成&quot; 主要与（）质量属性相关，通常可采用（）架构策略实现该属性; &quot;在线交易主站宕机后，能够在 3 秒内自动切换至备用站点并恢复正常运行&quot;主要与（）质量属 性相关，通常可采用（请作答此空 ）架构策略实现该属性; &quot;系统应该具备一定的安全保护措施， 从而能够抵挡恶意的入侵破坏行为，并对所有针对网站的攻击行为进行报警和记录&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49884,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>对于题干描述：&quot;用户的交易请求需要在3秒内得到响应&quot;，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。</p><p>&quot;在线交易主站宕机后，需要在3秒内恢复正常运行&quot;主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性。</p><p>&quot;系统应该具备一定的安全保护措施， 从而能够抵挡恶意的入侵破坏行为，并对所有针对网站的攻击行为进行报警和记录&quot;主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 记录/回放 ",
                        " 操作串行化 ",
                        " 心跳 ",
                        " 增加计算资源 "
                    ]
                },
                {
                    "index": 80,
                    "belong_page": 1,
                    "question_id": 49894,
                    "question_title": "<p>The architecture design specifies the overall architecture and the placement of software and hardware that will be used. Architecture design is a very complex process that is often left to experienced architecture designers and consultants. The first step is to refine the ( 请作答此空) into more detailed requirements that are then employed to help select the architecture to be used and the software components to be placed on each device. In a (), one also has to decide whether to use a two-tier, three-tier, or n-tier architecture. Then the requirements and the architecture</p><p>design are used to develop the hardware and software specification. There are four primary types of nonfunctional requirements that can be important in designing the architecture. () &nbsp;specify &nbsp;the operating environment(s) in which the system must perform and how those may change over time. () &nbsp;focus &nbsp;on the nonfunctional requirements issues such as response time, capacity, and reliability. () are the abilities to protect the information system from disruption and data loss, whether caused by an intentional act. Cultural and political requirements are specific to the countries in which the system will be used.<br/><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49894,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构设计指定了将使用的总体架构和软件和硬件的位置。架构设计是一个非常复杂的过程，通常留给经验丰富的架构设计师和顾问。第一步是将非功能需求细化为更详细的需求，然后使用这些需求来帮助选择要使用的体系结构和将要放置在每个设备上的软件组件。在客户端-服务器体系结构，也决定是否使用双层、三层或多层结构。然后，需求和体系结构设计用于开发硬件和软件规范。有四种主要类型的非功能需求在设计架构中是很重要的。操作要求指定操作环境，系统必须执行和那些可能会随时间而改变。性能要求关注非功能性需求的问题，如响应时间、容量和可靠性。安全要求的能力来保护信息系统的中断和数据丢失，无论是通过故意行为造成。文化和政治要求是具体的国家将使用该系统。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " functional requirements<br/>功能需求 ",
                        " nonfunctional requirements<br/>非功能需求 ",
                        " system constraint<br/>系统约束 ",
                        " system operational environment<br/>系统运行环境 "
                    ]
                },
                {
                    "index": 81,
                    "belong_page": 1,
                    "question_id": 49895,
                    "question_title": "<p>The architecture design specifies the overall architecture and the placement of software and hardware that will be used. Architecture design is a very complex process that is often left to experienced architecture designers and consultants. The first step is to refine the ( ) into more detailed requirements that are then employed to help select the architecture to be used and the software components to be placed on each device. In a (请作答此空), one also has to decide whether to use a two-tier, three-tier, or n-tier architecture. Then the requirements and the architecture design are used to develop the hardware and software specification. There are four primary types of nonfunctional requirements that can be important in designing the architecture. ( ) specify the operating environment(s) in which the system must perform and how those may change over time. ( ) focus on the nonfunctional requirements issues such as response time, capacity, and reliability. ( ) are the abilities to protect the information system from disruption and data loss, whether caused by an intentional act. Cultural and political requirements are specific to the countries in which the system will be used.</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49895,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构设计指定了将使用的总体架构和软件和硬件的位置。架构设计是一个非常复杂的过程，通常留给经验丰富的架构设计师和顾问。第一步是将非功能需求细化为更详细的需求，然后使用这些需求来帮助选择要使用的体系结构和将要放置在每个设备上的软件组件。在客户端-服务器体系结构，也决定是否使用双层、三层或多层结构。然后，需求和体系结构设计用于开发硬件和软件规范。有四种主要类型的非功能需求在设计架构中是很重要的。操作要求指定操作环境，系统必须执行和那些可能会随时间而改变。性能要求关注非功能性需求的问题，如响应时间、容量和可靠性。安全要求的能力来保护信息系统的中断和数据丢失，无论是通过故意行为造成。文化和政治要求是具体的国家将使用该系统。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " client-based architecture<br/>基于客户端的架构 ",
                        " server-based architecture<br/>基于服务器的体系结构 ",
                        " network architecture<br/>网络体系结构 ",
                        " client-server architecture<br/>客户机服务器体系结构 "
                    ]
                },
                {
                    "index": 82,
                    "belong_page": 1,
                    "question_id": 49896,
                    "question_title": "<p>The architecture design specifies the overall architecture and the placement of software and hardware that will be used. Architecture design is a very complex process that is often left to experienced architecture designers and consultants. The first step is to refine the () into more detailed requirements that are then employed to help select the architecture to be used and the software components to be placed on each device. In a (), one also has to decide whether to use a two-tier, three-tier, or n-tier architecture. Then the requirements and the architecture</p><p>design are used to develop the hardware and software specification. There are four primary types of nonfunctional requirements that can be important in designing the architecture. (请作答此空 ) &nbsp;specify &nbsp;the operating environment(s) in which the system must perform and how those may change over time. () &nbsp;focus &nbsp;on the nonfunctional requirements issues such as response time, capacity, and reliability. () are the abilities to protect the information system from disruption and data loss, whether caused by an intentional act. Cultural and political requirements are specific to the countries in which the system will be used.</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49896,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>体系结构设计指定了将使用的总体架构和软件和硬件的位置。架构设计是一个非常复杂的过程，通常留给经验丰富的架构设计师和顾问。第一步是将非功能需求细化为更详细的需求，然后使用这些需求来帮助选择要使用的体系结构和将要放置在每个设备上的软件组件。在客户端-服务器体系结构，也决定是否使用双层、三层或多层结构。然后，需求和体系结构设计用于开发硬件和软件规范。有四种主要类型的非功能需求在设计架构中是很重要的。操作要求指定操作环境，系统必须执行和那些可能会随时间而改变。性能要求关注非功能性需求的问题，如响应时间、容量和可靠性。安全要求的能力来保护信息系统的中断和数据丢失，无论是通过故意行为造成。文化和政治要求是具体的国家将使用该系统。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " Operational requirements  <br/> ",
                        " server-based architecture<br/>速度要求 ",
                        " Access control requirements  <br/> ",
                        " Customization requirements  <br/> "
                    ]
                },
                {
                    "index": 83,
                    "belong_page": 1,
                    "question_id": 49934,
                    "question_title": "<p>CORBA构件模型中，（ 请作答此空&nbsp;）的作用是在底层传输平台与接收调用并返回结果的对象实现之间进行协调，（ ）是最终完成客户请求的服务对象实现。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49934,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>POA是对象实现与ORB其它组件之间的中介，它将客户请求传送到伺服对象，按需创建子POA，提供管理伺服对象的策略。</p><p>CORBA对象可看作是一个具有对象标识、对象接口及对象实现的抽象实体。</p><p>之所以称为抽象的，是因为并没有硬性规定CORBA对象的实现机制。由于独立于程序设计语言和特定ORB产品，一个CORBA对象的引用又称可互操作的对象引用（Interoperable Object Reference）。从客户程序的角度看，IOR中包含了对象的标识、接口类型及其他信息以查找对象实现。</p><p>伺服对象（servant）是指具体程序设计语言的对象或实体，通常存在于一个服务程序进程之中。</p><p>客户程序通过对象引用发出的请求经过ORB担当中介角色，转换为对特定的伺服对象的调用。在一个CORBA对象的生命期中，它可能与多个伺服对象相关联，因而对该对象的请求可能被发送到不同的伺服对象。</p><p>象标识（Object ID）是一个用于在POA中标识一个CORBA对象的字符串。它既可由程序员指派，也可由对象适配器自动分配，这两种方式都要求对象标识在创建它的对象适配器中必须具有唯一性。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 伺服对象激活器 ",
                        " 适配器激活器 ",
                        " 伺服对象定位器 ",
                        " 可移植对象适配器POA "
                    ]
                },
                {
                    "index": 84,
                    "belong_page": 1,
                    "question_id": 49935,
                    "question_title": "<p>CORBA构件模型中，（）的作用是在底层传输平台与接收调用并返回结果的对象实现之间进行协调，（请作答此空 ）是最终完成客户请求的服务对象实现。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49935,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>POA是对象实现与ORB其它组件之间的中介，它将客户请求传送到伺服对象，按需创建子POA，提供管理伺服对象的策略。</p><p>CORBA对象可看作是一个具有对象标识、对象接口及对象实现的抽象实体。</p><p>之所以称为抽象的，是因为并没有硬性规定CORBA对象的实现机制。由于独立于程序设计语言和特定ORB产品，一个CORBA对象的引用又称可互操作的对象引用（Interoperable Object Reference）。从客户程序的角度看，IOR中包含了对象的标识、接口类型及其他信息以查找对象实现。</p><p>伺服对象（servant）是指具体程序设计语言的对象或实体，通常存在于一个服务程序进程之中。</p><p>客户程序通过对象引用发出的请求经过ORB担当中介角色，转换为对特定的伺服对象的调用。在一个CORBA对象的生命期中，它可能与多个伺服对象相关联，因而对该对象的请求可能被发送到不同的伺服对象。</p><p>象标识（Object ID）是一个用于在POA中标识一个CORBA对象的字符串。它既可由程序员指派，也可由对象适配器自动分配，这两种方式都要求对象标识在创建它的对象适配器中必须具有唯一性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " CORBA对象 ",
                        " 分布式对象标识 ",
                        " 伺服对象Servant ",
                        " 活动对象映射表 "
                    ]
                },
                {
                    "index": 85,
                    "belong_page": 1,
                    "question_id": 49936,
                    "question_title": "<p>关于构件的描述，正确的是（ &nbsp;）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49936,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>构件是一组通常需要同时部署的原子构件。 构件和原子构件之间的区别在于，大多数原子构件永远都不会被单独部署，尽管它们可以被单独部署。相反，大多数原子构件都属于一个构件家族，一次部署往往涉及整个家族。</p><p>一个原子构件是一个模块和一组资源。</p><p>原子构件是部署、版本控制和替换的基本单位。原子构件通常成组地部署，但是它也能够被单独部署。一个模块是不带单独资源的原子构件（在这个严格定义下，Java 包不是模块--在 Java 中部署的原子单元是类文件。一个单独的包被编译成多个单独的类文件--每个公共类都有一个）。</p><p>模块是一组类和可能的非面向对象的结构体，比如过程或者函数。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 构件包含了一组需要同时部署的原子构件 ",
                        " 构件可以单独部署，原子构件不能被单独部署 ",
                        " 一个原子构件可以同时在多个构件家族中共享 ",
                        " 一个模块可以看作带有单独资源的原子构件 "
                    ]
                },
                {
                    "index": 86,
                    "belong_page": 1,
                    "question_id": 49937,
                    "question_title": "<p>面向服务系统构建过程中，（请作答此空 ）用于实现Web服务的远程调用，（ ）用来将分散的、功能单一的Web服务组织成一个复杂的有机应用。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49937,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>UDDI（Universal Description，Discovery＆Integration），UDDI用于Web服务注册和服务查找；</p><p>WSDL（Web Service Description Language），WSDL用于描述Web服务的接口和操作功能；</p><p>SOAP（Simple Object Access Protocol），SOAP为建立Web服务和服务请求之间的通信提供支持。</p><p>BPEL（Business Process Execution Language For Web Services）翻译成中文的意思是面向Web 服务的业务流程执行语言，也有的文献简写成BPEL4WS，它是一种使用 Web 服务定义和执行业务流程的语言。使用BPEL，用户可以通过组合、编排和协调 Web 服务自上而下地实现面向服务的体系结构（SOA）。BPEL 提供了一种相对简单易懂的方法，可将多个 Web 服务组合到一个新的复合服务（称作业务流程）中。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " UDDI（Universal Description，Discovery and Integration） ",
                        " WSDL（Web Service Description Language) ",
                        " SOAP（Simple Object Access Protocol） ",
                        " BPEL（Business Process Execution Language） "
                    ]
                },
                {
                    "index": 87,
                    "belong_page": 1,
                    "question_id": 49938,
                    "question_title": "<p>面向服务系统构建过程中，（）用于实现Web服务的远程调用，（ 请作答此空）用来将分散的、功能单一的Web服务组织成一个复杂的有机应用。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49938,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>UDDI（Universal Description，Discovery＆Integration），UDDI用于Web服务注册和服务查找；</p><p>WSDL（Web Service Description Language），WSDL用于描述Web服务的接口和操作功能；</p><p>SOAP（Simple Object Access Protocol），SOAP为建立Web服务和服务请求之间的通信提供支持。</p><p>BPEL（Business Process Execution Language For Web Services）翻译成中文的意思是面向Web 服务的业务流程执行语言，也有的文献简写成BPEL4WS，它是一种使用 Web 服务定义和执行业务流程的语言。使用BPEL，用户可以通过组合、编排和协调 Web 服务自上而下地实现面向服务的体系结构（SOA）。BPEL 提供了一种相对简单易懂的方法，可将多个 Web 服务组合到一个新的复合服务（称作业务流程）中。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " UDDI（Universal Description，Discovery and Integration） ",
                        " WSDL（Web Service Description Language） ",
                        " SOAP（Simple Object Access Protocol） ",
                        " BPEL（Business Process Execution Language） "
                    ]
                },
                {
                    "index": 88,
                    "belong_page": 1,
                    "question_id": 49942,
                    "question_title": "<p>（ &nbsp;）架构风格可以概括为通过连接件绑定在一起按照一组规则运作的并行构件。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49942,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>C2体系结构风格可以概括为：通过连接件绑定在一起的按照一组规则运作的并行构件网络。C2风格中的系统组织规则如下：</p><p>&nbsp;(1)系统中的构件和连接件都有一个顶部和一个底部；</p><p>&nbsp;(2)构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接件的顶部，而构件与构件之间的直接连接是不允许的；</p><p>&nbsp;(3)一个连接件可以和任意数目的其它构件和连接件连接；</p><p>&nbsp;(4)当两个连接件进行直接连接时，必须由其中一个的底部到另一个的顶部。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " C2 ",
                        " 黑板系统 ",
                        " 规则系统 ",
                        " 虚拟机 "
                    ]
                },
                {
                    "index": 89,
                    "belong_page": 1,
                    "question_id": 49944,
                    "question_title": "<p>DSSA是在一个特定应用领域中为一组应用提供组织结构参考的软件体系结构，参与DSSA的人员可以划分为4种角色，包括领域专家、领域设计人员、领域实现人员和（ ），其基本活动包括领域分析、领域设计和（请作答此空 ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49944,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>DSSA的基本活动包括：领域分析、领域设计、领域实现：</p><p>1、领域分析</p><p>这个阶段的主要目标是获得领城模型。领域模型描述领域中系统之间的共同的需求，即领域模型所描述的需求为领域需求。在这个阶段中首先要进行一些准备性的活动，包括定义领域的边界。从而明确分析的对象；识别信息源，整个领域工程过程中信息的来源，可能的信息源包括现存系统、技术文献、问题域和系统开发的专家、用户调查和市场分析、领域演化的历史记录等，在此基础上就可以分析领域中系统的需求，确定哪些需求是领域中的系统广泛共享的，从而建立领域模型。当领域中存在大量系统时，需要选择它们的一个子集作为样本系统。对样本系统需求的考察将显示领城需求的一个变化范围。一些需求对所有被考察的系统是共同的，一些需求是单个系统所独有的。很多需求位于这两个极端之间，即被部分系统共享。</p><p>2、领域设计</p><p>这个阶段的目标是获得DSSA。DSSA描述在领域模型中表示的需求的解决方案，它不是单个系统的表示，而是能够适应领域中多个系统的需求的一个高层次的设计。建立了领域模型之后，就可以派生出满足这些被建模的领域需求的DSSA，由于领域模型中的领域需求具有一定的变化性，DSSA也要相应地具有变化性。它可以通过表示多选一的(alternative)、可选的(optional)解决方案等来做到这一点。模型和DSSA来组织的，因此在这个阶段通过获得DSSA，也就同时形成了重用基础设施的规约。</p><p>3、领域实现</p><p>这个阶段的主要目标是依据领域模型和DSSA开发和组织可重用信息。这些可重用信息可能是从现有系统中提取得到，也可能需要通过新的开发得到。它们依据领域模型和DSSA进行组织，也就是领域模型和DSSA定义了这些可重用信息的重用时机，从而支持了系统化的软件重用。这个阶段也可以看作重用基础设施的实现阶段。</p><p>值得注意的是，以上过程是一个反复的、逐渐求精的过程。在实施领域工程的每个阶段中，都可能返回到以前的步骤，对以前的步骤得到的结果进行修改和完善，再回到当前步骤，在新的基础上进行本阶段的活动。</p><p>参与DSSA的人员可以划分为四种角色：领城专家、领城分析师、领域设计人员和领域实现人员。</p><p>1、领域专家</p><p>领域专家可能包括该领域中系统的有经验的用户、从事该领域中系统的需求分析、设计、实现以及项目管理的有经验的软件工程师等。领域专家的主要任务包括提供关于领域中系统的需求规约和实现的知识，帮助组织规范的、一致的领域字典，帮助选择样本系统作为领域工程的依据，复审领域模型、DSSA等领域工程产品等。</p><p>领域专家应该熟悉该领域中系统的软件设计和实现、硬件限制、未来的用户需求及技术走向等。</p><p>2、领域分析人员</p><p>领域分析人员应由具有知识工程背景的有经验的系统分析员来担任。领域分析人员的主要任务包括控制整个领域分析过程，进行知识获取，将获取的知识组织到领域模型中，根据现有系统、标准规范等验证领域模型的准确性和一致性，维护领域模型。</p><p>领域分析人员应熟悉软件重用和领域分析方法；熟悉进行知识获取和知识表示所需的技术、语言和工具；应具有一定的该领域的经验，以便于分析领域中的问题及与领域专家进行交互；应具有较高的进行抽象、关联和类比的能力；应具有较高的与他人交互和合作的能力。</p><p>3、领域设计人员</p><p>领域设计人员应由有经验的软件设计人员来担任。领域设计人员的主要任务包括控制核个软件设计过程，根据领域模型和现有的系统开发出DSSA，对DSSA的准确性和一致性进行验证，建立领域模型和DSSA之间的联系。</p><p>领域设计人员应熟悉软件重用和领域设计方法；熟悉软件设计方法；应有一定的该领域的经验，以便于分析领域中的问题及与领域专家进行交互。</p><p>4、领域实现人员</p><p>领域实现人员应由有经验的程序设计人员来担任。领域实现人员的主要任务包括根据领域模型和DSSA，或者从头开发可重用构件，或者利用再工程的技术从现有系统中提取可重用构件，对可重用构件进行验证，建立DSSA与可重用构件间的联系。</p><p>领域实现人员应熟悉软件重用、领域实现及软件再工程技术；熟悉程序设计；具有一定的该领域的经验。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 领域建模 ",
                        " 架构设计 ",
                        " 领域实现 ",
                        " 领域评估 "
                    ]
                },
                {
                    "index": 90,
                    "belong_page": 1,
                    "question_id": 49947,
                    "question_title": "<p>软件架构风格是描述某-特定应用领域中系统组织方式的惯用模式。一个体系结构定义了一个词汇表和一组（ ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49947,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>架构风格定义一个系统家族，即一个体系结构定义一个词汇表和一组约束。词汇表中包含一些构件和连接件类型，而这组约束指出系统是如何将这些构件和连接件组合起来的。</p><p>架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 约束 ",
                        " 连接件 ",
                        " 拓扑结构 ",
                        " 规则 "
                    ]
                },
                {
                    "index": 91,
                    "belong_page": 1,
                    "question_id": 49948,
                    "question_title": "<p>架构风格反映领域中众多系统所共有的结构和（ &nbsp;）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49948,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>架构风格定义一个系统家族，即一个体系结构定义一个词汇表和一组约束。词汇表中包含一些构件和连接件类型，而这组约束指出系统是如何将这些构件和连接件组合起来的。</p><p>架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 语义特征 ",
                        " 功能需求 ",
                        " 质量属性 ",
                        " 业务规则 "
                    ]
                },
                {
                    "index": 92,
                    "belong_page": 1,
                    "question_id": 49949,
                    "question_title": "<p>某公司拟开发一个扫地机器人。机器人的控制者首先定义清洁流程和流程中任务之间的关系，机器人接受任务后，需要响应外界环境中触发的一些突发事件，根据自身状态进行动态调整，最终自动完成任务。针对上述需求，该机器人应该采用（ &nbsp;）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49949,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>在本题所述的应用环境中，强调了自定义流程，然后按自定义流程来执行，这属于虚拟机风格的特征，备选答案中，仅有C选项属于虚拟机风格。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 面向对象 ",
                        " 主程序一子程序 ",
                        " 规则系统 ",
                        " 管道一过滤器 "
                    ]
                },
                {
                    "index": 93,
                    "belong_page": 1,
                    "question_id": 49950,
                    "question_title": "<p>某企业内部现有的主要业务功能已封装成为Web服务。为了拓展业务范围，需要将现有的业务功能进行多种组合，形成新的业务功能。针对业务灵活组合这一要求，采用（ &nbsp;）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49950,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>题干要求将业务功能灵活组合形成新的业务功能，属于自定义类型的业务，需要采用虚拟机架构。选项A与选项D都属于虚拟机类型，但是选项A主要适合于专家系统，因此选D。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 规则系统 ",
                        " 面向对象 ",
                        " 黑板 ",
                        " 解释器 "
                    ]
                },
                {
                    "index": 94,
                    "belong_page": 1,
                    "question_id": 49951,
                    "question_title": "<p>某公司拟开发一个语音搜索系统，其语音搜索系统的主要工作过程包括分割原始语音信号、识别音素、产生候选词、判定语法片断、提供搜索关键词等，每个过程都需要进行基于先验知识的条件判断并进行相应的识别动作。针对该系统的特点，采用（ &nbsp;）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49951,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>黑板风格适用于需要解决冲突并处理可能存在的不确定性，从原始数据向高层结构转换的应用问题。例如：图、表、视觉、图像识别、语音识别、预警等应用领域。题干中提到了&quot;语音&quot;，因此适用于黑板风格。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 分层系统 ",
                        " 面向对象 ",
                        " 黑板 ",
                        " 隐式调用 "
                    ]
                },
                {
                    "index": 95,
                    "belong_page": 1,
                    "question_id": 49954,
                    "question_title": "<p>设计模式基于面向对象技术，是人们在长期的开发实践中良好经验的结晶，提供了一个简单、统一的描述方法，使得人们可以复用这些软件设计办法、过程管理经验。按照设计模式的目的进行划分，现有的设计模式可以分为创建型、（）和行为型三种类型。其中（）属于创建型模式，（请作答此空 ）属于行为型模式。（）模式可以将一个复杂的组件分成功能性抽象和内部实现两个独立的但又相关的继承层次结构，从而可以实现接口与实现分离。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49954,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>设计模式包括：创建型、结构型、行为型。</p><p>Singleton是单例模式，属于创建型设计模式。</p><p>Memento是备忘录模式，属于行为型设计模式。</p><p>Bridge是桥接模式，它的特点是实现接口与实现分离。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " Decorator ",
                        " Composite ",
                        " Memento ",
                        " Builder "
                    ]
                },
                {
                    "index": 96,
                    "belong_page": 1,
                    "question_id": 49956,
                    "question_title": "<p>某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;主要与（请作答此空 ）质量属性相关，通常可采用（）架构策略实现该属性；&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性；&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49956,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;属于可用性，因为场景描述的是故障恢复问题。主动冗余是可用性的常见策略。</p><p>&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;属于性能，资源调度是其常见策略。</p><p>&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;属于安全性，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 可用性 ",
                        " 性能 ",
                        " 易用性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 97,
                    "belong_page": 1,
                    "question_id": 49957,
                    "question_title": "<p>某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;主要与（）质量属性相关，通常可采用（请作答此空 ）架构策略实现该属性；&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性；&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49957,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;属于可用性，因为场景描述的是故障恢复问题。主动冗余是可用性的常见策略。</p><p>&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;属于性能，资源调度是其常见策略。</p><p>&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;属于安全性，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 抽象接口 ",
                        " 信息隐藏 ",
                        " 主动冗余 ",
                        " 记录/回放 "
                    ]
                },
                {
                    "index": 98,
                    "belong_page": 1,
                    "question_id": 49958,
                    "question_title": "<p>某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性；&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;主要与（请作答此空 ）质量属性相关，通常可采用（）架构策略实现该属性；&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49958,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;属于可用性，因为场景描述的是故障恢复问题。主动冗余是可用性的常见策略。</p><p>&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;属于性能，资源调度是其常见策略。</p><p>&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;属于安全性，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 易用性 ",
                        " 互操作性 ",
                        " 性能 "
                    ]
                },
                {
                    "index": 99,
                    "belong_page": 1,
                    "question_id": 49959,
                    "question_title": "<p>某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性；&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;主要与（）质量属性相关，通常可采用（ 请作答此空）架构策略实现该属性；&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49959,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;属于可用性，因为场景描述的是故障恢复问题。主动冗余是可用性的常见策略。</p><p>&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;属于性能，资源调度是其常见策略。</p><p>&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;属于安全性，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 资源调度 ",
                        " 操作串行化 ",
                        " 心跳 ",
                        " 内置监控器 "
                    ]
                },
                {
                    "index": 100,
                    "belong_page": 1,
                    "question_id": 49960,
                    "question_title": "<p>某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性；&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;主要与（）质量属性相关，通常可采用（）架构策略实现该属性；&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;主要与（请作答此空 ）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49960,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>&quot;机器人系统主电源断电后，能够在10秒内自动启动备用电源并进行切换，恢复正常运行&quot;属于可用性，因为场景描述的是故障恢复问题。主动冗余是可用性的常见策略。</p><p>&quot;机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1秒内停止并在2秒内选择一条新的运行路径&quot;属于性能，资源调度是其常见策略。</p><p>&quot;对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录&quot;属于安全性，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性 ",
                        " 安全性 ",
                        " 可测试性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 101,
                    "belong_page": 1,
                    "question_id": 49969,
                    "question_title": "<p>The objective of （请作答此空） is to determine what parts of the application software will be assigned to what hardware. The major software components of the system being developed have to be identified and then allocated to the various hardware components on which the system will operate. All software systems can be divided into four basic functions. The first is （）. Most information systems require data to be stored and retrieved, whether a small file, such as a memo produced by a word processor, or a large database, such as one that stores an organization&#39;s accounting records. The second function is the （）, the processing required to access data, which often means database queries in Structured Query Language. The third function is the （）, which is the logic documented in the DFDs, use cases, and functional requirements. The fourth function is the presentation logic, the display of information to the user and the acceptance of the user&#39;s commands. The three primary hardware components of a system are （）<br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49969,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>（架构设计）的目标是确定应用软件的哪些部分将分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功能。第一项是（）。大多数信息系统需要数据进行存储并检索，不论是一个小文件，比如一个字处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数据库。第二项功能是（），处理过程需要访问数据，这通常是指用SQL进行数据库查询。第三项功能是（），这些逻辑通过数据流图，用例和功能需求来记录。第四项功能是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是（）。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " architecture design<br/>架构设计 ",
                        " modular design<br/>模块化设计 ",
                        " physical design<br/>物理设计 ",
                        " distribution design<br/>分布式设计 "
                    ]
                },
                {
                    "index": 102,
                    "belong_page": 1,
                    "question_id": 49970,
                    "question_title": "<p>The objective of （ ） is to determine what parts of the application software will be assigned to what hardware. The major software components of the system being developed have to be identified and then allocated to the various hardware components on which the system will operate. All software systems can be divided into four basic functions. The first is （请作答此空）. Most information systems require data to be stored and retrieved, whether a small file, such as a memo produced by a word processor, or a large database, such as one that stores an organization&#39;s accounting records. The second function is the（）, the processing required to access data, which often means database queries in Structured Query Language. The third function is the（）, which is the logic documented in the DFDs, use cases,and functional requirements. The fourth function is the presentation logic, the display of information to the user and the acceptance of the user&#39;s commands. The three primary hardware components of a system are （）.<br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49970,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>（）的目标是确定应用软件的哪些部分将分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功能。第一项是（请作答此空）。大多数信息系统需要数据进行存储并检索，不论是一个小文件，比如一个字处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数据库。第二项功能是（），处理过程需要访问数据，这通常是指用SQL进行数据库查询。第三项功能是（），这些逻辑通过数据流图，用例和功能需求来记录。第四项功能是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是（）。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " data access components<br/>数据访问组件 ",
                        " database management system<br/>数据库管理系统 ",
                        " data storage<br/>数据存储 ",
                        " data entities<br/>数据实体 "
                    ]
                },
                {
                    "index": 103,
                    "belong_page": 1,
                    "question_id": 49971,
                    "question_title": "<p>The objective of（）is to determine what parts of the application software will be assigned to what hardware. The major software components of the system being developed have to be identified and then allocated to the various hardware components on which the system will operate. All software systems can be divided into four basic functions. The first is（）.Most information systems require data to be stored and retrieved, whether a small file,such as a memo produced by a word processor, or a large database, such as one that stores an organization&#39;s accounting records.The second function is the（请作答此空）,the processing required to access data, which often means database queries in Structured Query Language. The third function is the &nbsp;（）,which is the logic documented in the DFDs, use cases,and functional requirements.The fourth function is the presentation logic,the display of information to the user and the acceptance of the user&#39;s commands.The three primary hardware components of a system are （）.<br/>（）的目标是确定应用软件的哪些部分将分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功能。第一项是（）。大多数信息系统需要数据进行存储并检索，不论是一个小文件，比如一个字处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数据库。第二项功能是（请作答此空 ），处理过程需要访问数据，这通常是指用SQL进行数据库查询。第三项功能是（），这些逻辑通过数据流图，用例和功能需求来记录。第四项功能是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是（）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49971,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>无</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " data persistence<br/>数据持久化 ",
                        " data access objects<br/>数据访问对象 ",
                        " database connection<br/>数据库连接 ",
                        " data access logic<br/>数据访问逻辑 "
                    ]
                },
                {
                    "index": 104,
                    "belong_page": 1,
                    "question_id": 49972,
                    "question_title": "<p>The objective of（）is to determine what parts of the application software will be assigned to what hardware. The major software components of the system being developed have to be identified and then allocated to the various hardware components on which the system will operate. All software systems can be divided into four basic functions. The first is（）.Most information systems require data to be stored and retrieved, whether a small file,such as a memo produced by a word processor, or a large database, such as one that stores an organization&#39;s accounting records.The second function is the（）,the processing required to access data, which often means database queries in Structured Query Language. The third function is the（请作答此空 ）,which is the logic documented in the DFDs, use cases,and functional requirements.The fourth function is the presentation logic,the display of information to the user and the acceptance of the user&#39;s commands.The three primary hardware components of a system are （）.<br/>（）的目标是确定应用软件的哪些部分将分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功能。第一项是（）。大多数信息系统需要数据进行存储并检索，不论是一个小文件，比如一个字处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数据库。第二项功能是（），处理过程需要访问数据，这通常是指用SQL进行数据库查询。第三项功能是（请作答此空 ），这些逻辑通过数据流图，用例和功能需求来记录。第四项功能是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是（）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49972,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>无</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " system requirements<br/>系统需求 ",
                        " system architecture<br/>系统架构 ",
                        " application logic<br/>应用程序逻辑 ",
                        " application program<br/>应用程序 "
                    ]
                },
                {
                    "index": 105,
                    "belong_page": 1,
                    "question_id": 49973,
                    "question_title": "<p>The objective of（）is to determine what parts of the application software will be assigned to what hardware. The major software components of the system being developed have to be identified and then allocated to the various hardware components on which the system will operate. All software systems can be divided into four basic functions. The first is（）.Most information systems require data to be stored and retrieved, whether a small file,such as a memo produced by a word processor, or a large database, such as one that stores an organization&#39;s accounting records.The second function is the（）,the processing required to access data, which often means database queries in Structured Query Language. The third function is the &nbsp;（）,which is the logic documented in the DFDs, use cases,and functional requirements.The fourth function is the presentation logic,the display of information to the user and the acceptance of the user&#39;s commands.The three primary hardware components of a system are （请作答此空）.<br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 49973,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>（）的目标是确定应用软件的哪些部分将分配到何种硬件。识别出正在开发系统的主要软件构件并分配到系统将要运行的硬件构件。所有软件系统可分为四项基本功能。第一项是（）。大多数信息系统需要数据进行存储并检索，不论是一个小文件，比如一个字处理器产生的一个备忘录，还是一个大型数据库，比如存储一个企业会计记录的数据库。第二项功能是（），处理过程需要访问数据，这通常是指用SQL进行数据库查询。第三项功能是（），这些逻辑通过数据流图，用例和功能需求来记录。第四项功能是表示逻辑，给用户显示信息并接收用户命令。一个系统的三类主要硬件构件是（请作答此空）。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " computers,cables and network<br/>计算机、电缆和网络 ",
                        " clients,servers,and network<br/>客户机、服务器和网络 ",
                        " CPUs,memories and I/O devices<br/>CPU、存储器和I/O设备 ",
                        " CPUs,hard disks and I/O devices<br/>CPU、硬盘和I/O设备 "
                    ]
                },
                {
                    "index": 106,
                    "belong_page": 1,
                    "question_id": 50908,
                    "question_title": "<p>以下关于软件架构设计重要性的描述，（）是错误的。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50908,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件架构设计是降低成本、改进质量、按时和按需交付产品的关键因素。软件架构设计能够满足系统的性能、安全性、可维护性等品质；软件架构设计能够帮助项目干系人(Stakeholder)更好地理解软件结构；软件架构设计能够有效地管理系统的复杂性，并降低系统维护费用；软件架构设计对系统开发具有指导性；软件架构设计为系统复用奠定的基础；软件架构设计能够支持冲突分析。需要注意的是，软件架构设计与系统需求是直交的，两者并无必然联系。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 软件架构设计能够满足系统的性能、安全性、可维护性等品质 ",
                        " 软件架构设计能够帮助项目干系人(Stakeholder)更好地理解软件结构 ",
                        " 软件架构设计能够帮助架构师更好地捕获和细化系统需求 ",
                        " 软件架构设计能够有效地管理系统的复杂性，并降低系统维护费用 "
                    ]
                },
                {
                    "index": 107,
                    "belong_page": 1,
                    "question_id": 50918,
                    "question_title": "<p>某公司欲开发一个用于分布式登录的服务端程序，使用面向连接的TCP协议并发地处理多客户端登录请求。用户要求该服务端程序运行在Linux、Solaris和Windows NT等多种操作系统平台之上，而不同的操作系统的相关API函数和数据都有所不同。针对这种情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给()，调用成功后将结果返回。使用该模式（作答此空）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50918,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>针对题目给出的情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给操作系统API函数，调用成功后将结果返回。使用该模式提高了底层代码访问的一致性，但降低了服务端程序的调用性能。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 提高了底层代码访问的一致性，但降低了服务端程序的调用性能 ",
                        " 降低了服务端程序功能调用的灵活性，但提高了服务端程序的调用性能 ",
                        " 降低了服务端程序的可移植性，但提高了服务端程序的可维护性 ",
                        " 提高了系统的可复用性，但降低了系统的可配置性 "
                    ]
                },
                {
                    "index": 108,
                    "belong_page": 1,
                    "question_id": 50922,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“当系统面临断电故障后，需要在1小时内切换至备份站点并恢复正常运行”主要与(作答此空)质量属性相关，通常可采用（）架构策略实现该属性；“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（）质量属性相关，通常可采用（）架构策略实现该属性；“对系统的消息中间件进行替换时，替换工作需要在5人/月内完成”主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50922,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>“当系统面临断电故障后，需要在1小时内切换至备份站点并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“对系统的消息中间件进行替换时，替换工作需要在5人/月内完成”主要与可修改性质量属性相关，通常可采用接口-实现分类、抽象、信息隐藏等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 性能 ",
                        " 安全性 ",
                        " 可用性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 109,
                    "belong_page": 1,
                    "question_id": 50923,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“当系统面临断电故障后，需要在1小时内切换至备份站点并恢复正常运行”主要与()质量属性相关，通常可采用（作答此空）架构策略实现该属性；“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（）质量属性相关，通常可采用（）架构策略实现该属性；“对系统的消息中间件进行替换时，替换工作需要在5人/月内完成”主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50923,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>“当系统面临断电故障后，需要在1小时内切换至备份站点并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“对系统的消息中间件进行替换时，替换工作需要在5人/月内完成”主要与可修改性质量属性相关，通常可采用接口-实现分类、抽象、信息隐藏等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 操作隔离 ",
                        " 资源调度 ",
                        " 心跳 ",
                        " 内置监控器 "
                    ]
                },
                {
                    "index": 110,
                    "belong_page": 1,
                    "question_id": 50924,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“当系统面临断电故障后，需要在1小时内切换至备份站点并恢复正常运行”主要与()质量属性相关，通常可采用（）架构策略实现该属性；“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（作答此空）质量属性相关，通常可采用（）架构策略实现该属性；“对系统的消息中间件进行替换时，替换工作需要在5人/月内完成”主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50924,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>“当系统面临断电故障后，需要在1小时内切换至备份站点并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“对系统的消息中间件进行替换时，替换工作需要在5人/月内完成”主要与可修改性质量属性相关，通常可采用接口-实现分类、抽象、信息隐藏等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 性能 ",
                        " 易用性 ",
                        " 可用性 ",
                        " 互操作性 "
                    ]
                },
                {
                    "index": 111,
                    "belong_page": 1,
                    "question_id": 50925,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“当系统面临断电故障后，需要在1小时内切换至备份站点并恢复正常运行”主要与()质量属性相关，通常可采用（）架构策略实现该属性；“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（）质量属性相关，通常可采用（请作答此空）架构策略实现该属性；“对系统的消息中间件进行替换时，替换工作需要在5人/月内完成”主要与（）质量属性相关，通常可采用（）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50925,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>“当系统面临断电故障后，需要在1小时内切换至备份站点并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“对系统的消息中间件进行替换时，替换工作需要在5人/月内完成”主要与可修改性质量属性相关，通常可采用接口-实现分类、抽象、信息隐藏等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 主动冗余 ",
                        " 资源调度 ",
                        " 抽象接口 ",
                        " 记录/回放 "
                    ]
                },
                {
                    "index": 112,
                    "belong_page": 1,
                    "question_id": 50928,
                    "question_title": "<p>识别风险、非风险、敏感点和权衡点是进行软件架构评估的重要过程。“改变业务数据编码方式会对系统的性能和安全性产生影响”是对（请作答此空）的描述，“假设用户请求的频率为每秒1个，业务处理时间小于30毫秒，则将请求响应时间设定为1秒钟是可以接受的”是对（ ）的描述。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50928,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>风险是某个存在问题的架构设计决策，可能会导致问题；非风险与风险相对，是良好的架构设计决策；敏感点是一个或多个构件的特性；权衡点是影响多个质量属性的特性，是多个质量属性的敏感点。根据上述定义，可以看出“改变业务数据编码方式会对系统的性能和安全性产生影响”是对权衡点的描述，“假设用户请求的频率为每秒1个，业务处理时间小于30毫秒，则将请求响应时间设定为1秒钟是可以接受的”是对非风险的描述。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 风险点 ",
                        " 非风险 ",
                        " 敏感点 ",
                        " 权衡点 "
                    ]
                },
                {
                    "index": 113,
                    "belong_page": 1,
                    "question_id": 50929,
                    "question_title": "<p>识别风险、非风险、敏感点和权衡点是进行软件架构评估的重要过程。“改变业务数据编码方式会对系统的性能和安全性产生影响”是对（）的描述，“假设用户请求的频率为每秒1个，业务处理时间小于30毫秒，则将请求响应时间设定为1秒钟是可以接受的”是对（作答此空）的描述。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50929,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>风险是某个存在问题的架构设计决策，可能会导致问题；非风险与风险相对，是良好的架构设计决策；敏感点是一个或多个构件的特性；权衡点是影响多个质量属性的特性，是多个质量属性的敏感点。根据上述定义，可以看出“改变业务数据编码方式会对系统的性能和安全性产生影响”是对权衡点的描述，“假设用户请求的频率为每秒1个，业务处理时间小于30毫秒，则将请求响应时间设定为1秒钟是可以接受的”是对非风险的描述。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 风险点 ",
                        " 非风险 ",
                        " 敏感点 ",
                        " 权衡点 "
                    ]
                },
                {
                    "index": 114,
                    "belong_page": 1,
                    "question_id": 50931,
                    "question_title": "<p>体系结构权衡分析方法(Architecture Tradeoff Analysis Method, ATAM)是一种常见的系统架构评估框架。该框架主要关注系统的（），针对性能、（作答此空）、安全性和可修改性，在系统开发之前进行分析、评价与折中。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50931,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>SAAM是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、需求说明和架构描述，其分析过程主要包括场景开发、架构描述、单个场景评估、场景交互和总体评估。<br/>ATAM架构权衡分析方法是一种系统架构评估方法，主要在系统开发之前，针对性能、可用性、安全性和可修改性等质量属性进行评估和折中。<br/></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 可用性 ",
                        " 可移植性 ",
                        " 易用性 "
                    ]
                },
                {
                    "index": 115,
                    "belong_page": 1,
                    "question_id": 50939,
                    "question_title": "<p>Software architecture reconstruction is an interpretive, interactive, and iterative process including many activities. (作答此空) involves analyzing a system&#39;s existing design and implementation artifacts to construct a model of it. The result is used in the following activities to construct a view of the system. The database construction activity converts the （）&nbsp;contained in the view into a standard format for storage in a database. The （）&nbsp;activity involves defining and manipulating the information stored in database to reconcile, augment, and establish connections between the elements. Reconstruction consists of two primary activities: （）and （）. The former provides a mechanism for the user to manipulate architectural elements, and the latter provides facilities for architecture reconstruction.</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50939,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件体系结构重构是一种解释性的、交互式的、迭代的过程，包括许多活动。信息抽取包括分析系统现有的设计和实现构件，构建信息系统模型。结果用于以下活动以构建系统视图。数据库构建活动将视图中包含的元素和关系转换成用于存储在数据库中的标准格式。视图融合活动涉及定义和操作存储在数据库中的信息，以协调、增强和建立元素之间的连接。重建包括两个主要的活动：可视化和交互，模式定义和识别，前者提供了用户操作架构元素的机制，后者为架构重建提供了便利。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " Reverse engineering ",
                        " Information extraction ",
                        " Requirements analysis ",
                        " Source code analysis "
                    ]
                },
                {
                    "index": 116,
                    "belong_page": 1,
                    "question_id": 50940,
                    "question_title": "<p>Software architecture reconstruction is an interpretive, interactive, and iterative process including many activities. () involves analyzing a system&#39;s existing design and implementation artifacts to construct a model of it. The result is used in the following activities to construct a view of the system. The database construction activity converts the （作答此空）&nbsp;contained in the view into a standard format for storage in a database. The （）&nbsp;activity involves defining and manipulating the information stored in database to reconcile, augment, and establish connections between the elements. Reconstruction consists of two primary activities: （）and （）. The former provides a mechanism for the user to manipulate architectural elements, and the latter provides facilities for architecture reconstruction.</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50940,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件体系结构重构是一种解释性的、交互式的、迭代的过程，包括许多活动。信息抽取包括分析系统现有的设计和实现构件，构建信息系统模型。结果用于以下活动以构建系统视图。数据库构建活动将视图中包含的元素和关系转换成用于存储在数据库中的标准格式。视图融合活动涉及定义和操作存储在数据库中的信息，以协调、增强和建立元素之间的连接。重建包括两个主要的活动：可视化和交互，模式定义和识别，前者提供了用户操作架构元素的机制，后者为架构重建提供了便利。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " actors and use cases ",
                        " processes and data ",
                        " elements and relations ",
                        " schemas and tables "
                    ]
                },
                {
                    "index": 117,
                    "belong_page": 1,
                    "question_id": 50941,
                    "question_title": "<p>Software architecture reconstruction is an interpretive, interactive, and iterative process including many activities. () involves analyzing a system&#39;s existing design and implementation artifacts to construct a model of it. The result is used in the following activities to construct a view of the system. The database construction activity converts the （）&nbsp;contained in the view into a standard format for storage in a database. The （作答此空）&nbsp;activity involves defining and manipulating the information stored in database to reconcile, augment, and establish connections between the elements. Reconstruction consists of two primary activities: （）and （）. The former provides a mechanism for the user to manipulate architectural elements, and the latter provides facilities for architecture reconstruction.</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50941,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件体系结构重构是一种解释性的、交互式的、迭代的过程，包括许多活动。信息抽取包括分析系统现有的设计和实现构件，构建信息系统模型。结果用于以下活动以构建系统视图。数据库构建活动将视图中包含的元素和关系转换成用于存储在数据库中的标准格式。视图融合活动涉及定义和操作存储在数据库中的信息，以协调、增强和建立元素之间的连接。重建包括两个主要的活动：可视化和交互，模式定义和识别，前者提供了用户操作架构元素的机制，后者为架构重建提供了便利。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " database normalization ",
                        " schema definition ",
                        " database optimization ",
                        " view fusion "
                    ]
                },
                {
                    "index": 118,
                    "belong_page": 1,
                    "question_id": 50942,
                    "question_title": "<p>Software architecture reconstruction is an interpretive, interactive, and iterative process including many activities. () involves analyzing a system&#39;s existing design and implementation artifacts to construct a model of it. The result is used in the following activities to construct a view of the system. The database construction activity converts the （）&nbsp;contained in the view into a standard format for storage in a database. The （）&nbsp;activity involves defining and manipulating the information stored in database to reconcile, augment, and establish connections between the elements. Reconstruction consists of two primary activities: （作答此空）and （）. The former provides a mechanism for the user to manipulate architectural elements, and the latter provides facilities for architecture reconstruction.</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50942,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件体系结构重构是一种解释性的、交互式的、迭代的过程，包括许多活动。信息抽取包括分析系统现有的设计和实现构件，构建信息系统模型。结果用于以下活动以构建系统视图。数据库构建活动将视图中包含的元素和关系转换成用于存储在数据库中的标准格式。视图融合活动涉及定义和操作存储在数据库中的信息，以协调、增强和建立元素之间的连接。重建包括两个主要的活动：可视化和交互，模式定义和识别，前者提供了用户操作架构元素的机制，后者为架构重建提供了便利。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " architecture analysis and design ",
                        " domain analysis and static modeling ",
                        " visualization and interaction ",
                        " user requirements modeling "
                    ]
                },
                {
                    "index": 119,
                    "belong_page": 1,
                    "question_id": 50943,
                    "question_title": "<p>Software architecture reconstruction is an interpretive, interactive, and iterative process including many activities. () involves analyzing a system&#39;s existing design and implementation artifacts to construct a model of it. The result is used in the following activities to construct a view of the system. The database construction activity converts the （）&nbsp;contained in the view into a standard format for storage in a database. The （）&nbsp;activity involves defining and manipulating the information stored in database to reconcile, augment, and establish connections between the elements. Reconstruction consists of two primary activities: （）and （作答此空）. The former provides a mechanism for the user to manipulate architectural elements, and the latter provides facilities for architecture reconstruction.</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 50943,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件体系结构重构是一种解释性的、交互式的、迭代的过程，包括许多活动。信息抽取包括分析系统现有的设计和实现构件，构建信息系统模型。结果用于以下活动以构建系统视图。数据库构建活动将视图中包含的元素和关系转换成用于存储在数据库中的标准格式。视图融合活动涉及定义和操作存储在数据库中的信息，以协调、增强和建立元素之间的连接。重建包括两个主要的活动：可视化和交互，模式定义和识别，前者提供了用户操作架构元素的机制，后者为架构重建提供了便利。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " pattern definition and recognition ",
                        " architecture design and implementation ",
                        " system architecture modeling ",
                        " dynamic modeling and reconstruction "
                    ]
                },
                {
                    "index": 120,
                    "belong_page": 1,
                    "question_id": 54219,
                    "question_title": "<p>研究软件架构的根本目的是解决软件的复用、质量和维护问题，软件架构设计是软件开发过程中关键一步，因此需要对其进行评估，在这一活动中，评估人员关注的是系统的（）属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54219,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>在架构评估过程中，评估人员关注的是系统的质量属性。主要包括：性能、可靠性、可用性、安全性、可修改性、功能性、可变性、互操作性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 功能 ",
                        " 性能 ",
                        " 质量 ",
                        " 安全 "
                    ]
                },
                {
                    "index": 121,
                    "belong_page": 1,
                    "question_id": 54236,
                    "question_title": "<p>软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。一个体系结构定义了一个词汇表和一组（请作答此空）。架构风格反映领域中众多系统所共有的结构和（）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54236,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件体系结构风格是描述某一特定应用领域中系统组织方式的惯用模式。体系结构风格定义一个系统家族，即一个体系结构定义一个词汇表和一组约束。词汇表中包含一些构件和连接件类型，而这组约束指出系统是如何将这些构件和连接件组合起来的。<br/>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为&quot;客户/服务器&quot;模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 约束 ",
                        " 连接件 ",
                        " 拓扑结构 ",
                        " 规则 "
                    ]
                },
                {
                    "index": 122,
                    "belong_page": 1,
                    "question_id": 54237,
                    "question_title": "<p>软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。一个体系结构定义了一个词汇表和一组（）。架构风格反映领域中众多系统所共有的结构和（请作答此空）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54237,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件体系结构风格是描述某一特定应用领域中系统组织方式的惯用模式。体系结构风格定义一个系统家族，即一个体系结构定义一个词汇表和一组约束。词汇表中包含一些构件和连接件类型，而这组约束指出系统是如何将这些构件和连接件组合起来的。<br/>体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对软件体系结构风格的研究和实践促进对设计的重用，一些经过实践证实的解决方案也可以可靠地用于解决新的问题。例如，如果某人把系统描述为&quot;客户/服务器&quot;模式，则不必给出设计细节，我们立刻就会明白系统是如何组织和工作的。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 语义特征 ",
                        " 功能需求 ",
                        " 质量属性 ",
                        " 业务规则 "
                    ]
                },
                {
                    "index": 123,
                    "belong_page": 1,
                    "question_id": 54238,
                    "question_title": "<p>基于软件架构的设计（Architecture Based Software Development，ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用（请作答此空）来描述软件架构，采用（ &nbsp;）来描述需求。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54238,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据基于软件架构的设计的定义，基于软件架构的设计（Architecture Based Software Development，ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 类图和序列图 ",
                        " 视角与视图 ",
                        " 构件和类图 ",
                        " 构件与功能 "
                    ]
                },
                {
                    "index": 124,
                    "belong_page": 1,
                    "question_id": 54239,
                    "question_title": "<p>基于软件架构的设计（Architecture Based Software Development，ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用（ &nbsp;）来描述软件架构，采用（请作答此空）来描述需求。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54239,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据基于软件架构的设计的定义，基于软件架构的设计（Architecture Based Software Development，ABSD）强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 用例与类图 ",
                        " 用例与视角 ",
                        " 用例与质量场景 ",
                        " 视角与质量场景 "
                    ]
                },
                {
                    "index": 125,
                    "belong_page": 1,
                    "question_id": 54240,
                    "question_title": "<p>某公司拟开发一个语音搜索系统，其语音搜索系统的主要工作过程包括分割原始语音信号、识别音素、产生候选词、判定语法片断、提供搜索关键词等，每个过程都需要进行基于先验知识的条件判断并进行相应的识别动作。针对该系统的特点，采用（ &nbsp;） 架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54240,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>语音识别是黑板风格的经典应用。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 分层系统 ",
                        " 面向对象 ",
                        " 黑板 ",
                        " 隐式调用 "
                    ]
                },
                {
                    "index": 126,
                    "belong_page": 1,
                    "question_id": 54241,
                    "question_title": "<p>某公司拟开发一个新闻系统，该系统可根据用户的注册兴趣，向用户推送其感兴趣的新闻内容，该系统应该采用（ ） 架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54241,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据题目的意思，用户会注册自己的兴趣，然后系统也会把新闻按兴趣分类，如果某个新闻事件发生，可以通过事件来触发推送动作，将新闻推送给对其感兴趣的用户。这是典型的事件驱动系统应用场景。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 事件驱动系统 ",
                        " 主程序-子程序 ",
                        " 黑板 ",
                        " 管道-过滤器 "
                    ]
                },
                {
                    "index": 127,
                    "belong_page": 1,
                    "question_id": 54242,
                    "question_title": "<p>某公司拟开发一个VIP管理系统，系统需要根据不同商场活动，不定期更新VIP会员的审核标准和VIP折扣系统。针对上述需求，采用（ ）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54242,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据题目的意思，拟开发的VIP管理系统中VIP会员审核标准要能随时改变，灵活定义。在这方面虚拟机风格最为擅长，而属于虚拟机风格的只有A选项。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 规则系统 ",
                        " 过程控制 ",
                        " 分层 ",
                        " 管道-过滤器 "
                    ]
                },
                {
                    "index": 128,
                    "belong_page": 1,
                    "question_id": 54250,
                    "question_title": "<p>系统应用架构设计中，网络架构数据流图的主要作用是将处理器和设备分配到网络中。（ &nbsp;）不属于网络架构数据流图的内容。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54250,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查网络规划与设计的基本知识。<br/>应用架构建模中要绘制的第一个物理数据流图（PDFD）是网络架构DFD，它们不显示单位时间的数据流量，需要显示的信息包括服务器及其物理位置；客户端及其物理位置；处理器说明；传输协议。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 服务器、客户端及其物理位置 ",
                        " 处理器说明信息 ",
                        " 单位时间的数据流大小 ",
                        " 传输协议 "
                    ]
                },
                {
                    "index": 129,
                    "belong_page": 1,
                    "question_id": 54288,
                    "question_title": "<p>某公司欲构建一个网络化的开放式数据存储系统，要求采用专用网络连接并管理存储设备和存储管理子系统。针对这种应用，采用（ &nbsp;）存储方式最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54288,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>开放系统的直连式存储（Direct-Attached Storage，DAS）在服务器上外挂了一组大容量硬盘，存储设备与服务器主机之间采用SCSI通道连接，带宽为10MB/s、20MB/s、40MB/s和80MB/s等。直连式存储直接将存储设备连接到服务器上，这种方法难以扩展存储容量，而且不支持数据容错功能，当服务器出现异常时会造成数据丢失。<br/>网络接入存储（Network Attached Storage，NAS）是将存储设备连接到现有的网络上，提供数据存储和文件访问服务的设备。NAS服务器是在专用主机上安装简化了的瘦操作系统（只具有访问权限控制、数据保护和恢复等功能）的文件服务器。NAS服务器内置了与网络连接所需要的协议，可以直接联网，具有权限的用户都可以通过网络访问NAS服务器中的文件。<br/>存储区域网络（Storage Area Network，SAN）是一种连接存储设备和存储管理子系统的专用网络，专门提供数据存储和管理功能。SAN可以被看作是负责数据传输的后端网络，而前端网络（或称为数据网络）则负责正常的TCP/IP传输。也可以把SAN看作是通过特定的互连方式连接的若干台存储服务器组成的单独的数据网络，提供企业级的数据存储服务。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 内置式存储 ",
                        " DAS ",
                        " SAN ",
                        " NAS "
                    ]
                },
                {
                    "index": 130,
                    "belong_page": 1,
                    "question_id": 54298,
                    "question_title": "<p>软件设计时需要遵循抽象、模块化、信息隐蔽和模块独立原则。在划分软件系统模块时，应尽量做到 （ &nbsp;）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54298,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查软件设计原则的基础知识。<br/>软件设计时需要遵循抽象、模块化、信息隐蔽和模块独立原则。藕合性和内聚性是模块独立性的两个定性标准，在划分软件系统模块时，尽量做到高内聚、低藕合，提高模块的独立性。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 高内聚高耦合 ",
                        " 高内聚低耦合 ",
                        " 低内聚高耦合 ",
                        " 低内聚低耦合 "
                    ]
                },
                {
                    "index": 131,
                    "belong_page": 1,
                    "question_id": 54308,
                    "question_title": "<p>某服务器软件系统对可用性（Availability）和性能（Performance）要求较高，（ ）设计策略能提高该系统的可用性，（请作答此空）设计策略能够提高该系统的性能。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54308,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件质量属性描述了软件的非功能性属性。可用性质量属性描述了可用性是系统能够正常运行的时间比例，实现可用性策略的主要方法有错误检测、错误恢复和错误防御。主动冗余就是一种错误恢复的策略。性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。队列调度是一种提升系统性能的常用方法。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 限制访问 ",
                        " 内置监控器 ",
                        " 主动冗余 ",
                        " 队列调度 "
                    ]
                },
                {
                    "index": 132,
                    "belong_page": 1,
                    "question_id": 54309,
                    "question_title": "<p>持久层的主要功能是为（ ）提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54309,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>无</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 视图 ",
                        " 业务逻辑 ",
                        " 控制层 ",
                        " 表现层 "
                    ]
                },
                {
                    "index": 133,
                    "belong_page": 1,
                    "question_id": 54330,
                    "question_title": "<p>Windows操作系统在图形用户界面处理方面采用的核心架构风格是（请作答此空）风格。Java语言宣传的&quot;一次编写，到处运行&quot;的特性，从架构风格上看符合（ &nbsp;）风格的特点。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54330,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>Windows操作系统在图形用户界面处理方面采用的是典型的&quot;事件驱动&quot;的架构风格。首先注册事件处理的是回调函数，当某个界面事件发生时（例如键盘敲击、鼠标移动等），系统会查找并选择合适的回调函数处理该事件。Java语言是一种解释型语言，在Java虚拟机上运行，这从架构风格上看是典型的&quot;虚拟机&quot;风格，即通过虚拟机架构屏蔽不同的硬件环境。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 虚拟机 ",
                        " 管道-过滤器 ",
                        " 事件驱动 ",
                        " 微内核-扩展 "
                    ]
                },
                {
                    "index": 134,
                    "belong_page": 1,
                    "question_id": 54331,
                    "question_title": "<p>Windows操作系统在图形用户界面处理方面采用的核心架构风格是（ ）风格。Java语言宣传的&quot;一次编写，到处运行&quot;的特性，从架构风格上看符合（请作答此空）风格的特点。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54331,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>Windows操作系统在图形用户界面处理方面采用的是典型的&quot;事件驱动&quot;的架构风格。首先注册事件处理的是回调函数，当某个界面事件发生时（例如键盘敲击、鼠标移动等），系统会查找并选择合适的回调函数处理该事件。Java语言是一种解释型语言，在Java虚拟机上运行，这从架构风格上看是典型的&quot;虚拟机&quot;风格，即通过虚拟机架构屏蔽不同的硬件环境。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 虚拟机 ",
                        " 管道-过滤器 ",
                        " 事件驱动 ",
                        " 微内核-扩展 "
                    ]
                },
                {
                    "index": 135,
                    "belong_page": 1,
                    "question_id": 54332,
                    "question_title": "<p>某软件开发公司负责开发一个Web服务器服务端处理软件，其核心部分是对客户端请求消息的解析与处理，包括HTTP报头分离、SOAP报文解析等功能。该公司的架构师决定采用成熟的架构风格指导整个软件的设计，以下（ &nbsp;）架构风格，最适合该服务端处理软件。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54332,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>根据题干描述，Web服务器服务端的核心功能是数据处理，由于Web服务在数据传输方面具有协议分层的特征，即底层协议会包装上层协议（HTTP协议体中包含整个SOAP消息内容），因此需要数据内容的逐步分解与分阶段处理。比较选项中的架构风格，由于管道-过滤器的架构风格支持分阶段数据处理，因此特别适合该服务端处理软件的要求。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 虚拟机 ",
                        " 管道－过滤器 ",
                        " 黑板结构 ",
                        " 分层结构 "
                    ]
                },
                {
                    "index": 136,
                    "belong_page": 1,
                    "question_id": 54333,
                    "question_title": "<p>正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中（请作答此空）是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。&quot;改变加密的级别可能会对安全性和性能都产生显著的影响&quot;，这是一个对系统（ &nbsp;）的描述。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54333,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件架构评价的理解和应用。<br/>正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。<br/>其中敏感点是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。<br/>系统权衡点会影响一个或多个属性，并对于多个属性来说都是敏感点。<br/>基于该定义，可以看出：<br/>&quot;实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有&quot;是对系统敏感点的描述；<br/>&quot;改变加密的级别可能会对安全性和性能都产生显著的影响&quot;是一个对系统权衡点的描述。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 风险点 ",
                        " 非风险点 ",
                        " 敏感点 ",
                        " 权衡点 "
                    ]
                },
                {
                    "index": 137,
                    "belong_page": 1,
                    "question_id": 54334,
                    "question_title": "<p>正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中（ ）是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。&quot;改变加密的级别可能会对安全性和性能都产生显著的影响&quot;，这是一个对系统（请作答此空）的描述。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54334,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件架构评价的理解和应用。正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中敏感点是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。系统权衡点会影响一个或多个属性，并对于多个属性来说都是敏感点。基于该定义，可以看出&quot;改变加密的级别可能会对安全性和性能都产生显著的影响&quot;正是一个对系统权衡点的描述。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 风险点 ",
                        " 非风险点 ",
                        " 敏感点 ",
                        " 权衡点 "
                    ]
                },
                {
                    "index": 138,
                    "belong_page": 1,
                    "question_id": 54336,
                    "question_title": "<p>（ ）的选择是开发一个软件系统时的基本设计决策；（请作答此空）是最低层的模式，关注软件系统的设计与实现，描述了如何实现构件及构件之间的关系。引用-计数是C++管理动态资源时常用的一种（ &nbsp;）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54336,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查软件设计中使用的架构模式、设计模式和惯用法的基本概念。<br/>架构模式是软件设计中的高层决策，例如C/S结构就属于架构模式，架构模式反映了开发软件系统过程中所作的基本设计决策；设计模式主要关注软件系统的设计，与具体的实现语言无关：惯用法则是实现时通过某种特定的程序设计语言来描述构件与构件之间的关系，例如引用-计数就是C++语言中的一种惯用法。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 架构模式 ",
                        " 惯用法 ",
                        " 设计模式 ",
                        " 分析模式 "
                    ]
                },
                {
                    "index": 139,
                    "belong_page": 1,
                    "question_id": 54338,
                    "question_title": "<p>软件架构评估中，评估人员主要关注系统的质量属性，并确定采用何种架构更为合适。在对某个应用软件进行评估时，该应用软件采用的Web服务器所支持的并发连接数是整个系统性能的一个（请作答此空）；改变加密级别可能会对安全性和操作性均产生重要影响，则加密级别是系统的一个（ &nbsp;）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54338,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件架构评估可以只针对一个架构，也可以针对一组架构。在架构评估中，评估人员主要关注系统的质量属性，并确定采用何种架构史为合适。敏感点和权衡点是软件架构评估中的重要概念。敏感点是一个或多个构件的特性，权衡点是影响多个质量属性的特性，是多个质量属性的敏感点。根据题干描述，在对某个应用软件进行评估时，该应用软件采用的Web服务器所支持的并发连接数是整个系统性能的一个敏感点；改变加密级别可能会对整个性和操作性均产生重要影响，则加密级别是系统的一个权衡点。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 检查点 ",
                        " 敏感点 ",
                        " 权衡点 ",
                        " 风险点 "
                    ]
                },
                {
                    "index": 140,
                    "belong_page": 1,
                    "question_id": 54339,
                    "question_title": "<p>软件架构评估中，评估人员主要关注系统的质量属性，并确定采用何种架构更为合适。在对某个应用软件进行评估时，该应用软件采用的Web服务器所支持的并发连接数是整个系统性能的一个（ ）；改变加密级别可能会对安全性和操作性均产生重要影响，则加密级别是系统的一个（请作答此空）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 54339,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件架构评估可以只针对一个架构，也可以针对一组架构。在架构评估中，评估人员主要关注系统的质量属性，并确定采用何种架构史为合适。敏感点和权衡点是软件架构评估中的重要概念。敏感点是一个或多个构件的特性，权衡点是影响多个质量属性的特性，是多个质量属性的敏感点。根据题干描述，在对某个应用软件进行评估时，该应用软件采用的Web服务器所支持的并发连接数是整个系统性能的一个敏感点；改变加密级别可能会对整个性和操作性均产生重要影响，则加密级别是系统的一个权衡点。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 检查点 ",
                        " 敏感点 ",
                        " 权衡点 ",
                        " 风险点 "
                    ]
                },
                {
                    "index": 141,
                    "belong_page": 1,
                    "question_id": 63608,
                    "question_title": "<p>为了优化系统的性能，有时需要对系统进行调整。对于不同的系统，其调整参数也不尽相同。例如，对于数据库系统，主要包括CPU/内存使用状况、（请作答此空）、进程/线程使用状态、日志文件大小等。对于应用系统，主要包括应用系统的可用性、响应时间、（　）、特定应用资源占用等。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63608,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>为了优化系统性能，有时需要对系统进行调整。对于数据库系统，性能调整主要包括CPU／内存使用状况、优化数据库设计、优化数据库管理以及进程/线程状态、硬盘剩余空间、日志文件大小等；对于应用系统，性能调整主要包括应用系统的可用性、响应时间、并发用户数以及特定应用的系统资源占用等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 数据丢包率 ",
                        " 端口吞吐量 ",
                        " 数据处理速率 ",
                        " 查询语句性能 "
                    ]
                },
                {
                    "index": 142,
                    "belong_page": 1,
                    "question_id": 63610,
                    "question_title": "<p>为了优化系统的性能，有时需要对系统进行调整。对于不同的系统，其调整参数也不尽相同。例如，对于数据库系统，主要包括CPU/内存使用状况、（　）、进程/线程使用状态、日志文件大小等。对于应用系统，主要包括应用系统的可用性、响应时间、（请作答此空）、特定应用资源占用等。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63610,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>为了优化系统性能，有时需要对系统进行调整。对于数据库系统，性能调整主要包括CPU／内存使用状况、优化数据库设计、优化数据库管理以及进程/线程状态、硬盘剩余空间、日志文件大小等；对于应用系统，性能调整主要包括应用系统的可用性、响应时间、并发用户数以及特定应用的系统资源占用等。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 并发用户数 ",
                        " 支持协议和标准 ",
                        " 最大连接数 ",
                        " 时延抖动 "
                    ]
                },
                {
                    "index": 143,
                    "belong_page": 1,
                    "question_id": 63638,
                    "question_title": "<p>软件设计包括了四个既独立又相互联系的活动：高质量的（　）将改善程序结构和模块划分，降低过程复杂性；（请作答此空）的主要目标是开发一个模块化的程序结构，并表示出模块间的控制关系；（　）描述了软件与用户之间的交互关系。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63638,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件设计包括体系结构设计、接口设计、数据设计和过程设计。</p><p>结构设计：定义软件系统各主要部件之间的关系。</p><p>数据设计：将模型转换成数据结构的定义。好的数据设计将改善程序结构和模块划分，降低过程复杂性。</p><p>接口设计（人机界面设计）：软件内部，软件和操作系统间以及软件和人之间如何通信。</p><p>过程设计：系统结构部件转换成软件的过程描述。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 软件结构设计 ",
                        " 数据结构设计 ",
                        " 数据流设计 ",
                        " 分布式设计 "
                    ]
                },
                {
                    "index": 144,
                    "belong_page": 1,
                    "question_id": 63639,
                    "question_title": "<p>软件设计包括了四个既独立又相互联系的活动：高质量的（　）将改善程序结构和模块划分，降低过程复杂性；（　）的主要目标是开发一个模块化的程序结构，并表示出模块间的控制关系；（请作答此空）描述了软件与用户之间的交互关系。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63639,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件设计包括体系结构设计、接口设计、数据设计和过程设计。</p><p>结构设计：定义软件系统各主要部件之间的关系。</p><p>数据设计：将模型转换成数据结构的定义。好的数据设计将改善程序结构和模块划分，降低过程复杂性。</p><p>接口设计（人机界面设计）：软件内部，软件和操作系统间以及软件和人之间如何通信。</p><p>过程设计：系统结构部件转换成软件的过程描述。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 数据架构设计 ",
                        " 模块化设计 ",
                        " 性能设计 ",
                        " 人机界面设计 "
                    ]
                },
                {
                    "index": 145,
                    "belong_page": 1,
                    "question_id": 63642,
                    "question_title": "<p>EJB是企业级Java构件，用于开发和部署多层结构的、分布式的、面向对象的Java应用系统。其中，（请作答此空）负责完成服务端与客户端的交互；（　）用于数据持久化来简化数据库开发工作；（　）主要用来处理并发和异步访问操作。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63642,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>EJB分为会话Bean、实体Bean和消息驱动Bean。</p><p>1、会话Bean：用于实现业务逻辑，它可以是有状态的，也可以是无状态的。每当客户端请求时，容器就会选择一个会话Bean来为客户端服务。会话Bean可以直接访问数据库，但更多时候，它会通过实体Bean实现数据访问。</p><p>2、实体Bean：用于实现O/R映射，负责将数据库中的表记录映射为内存中的实体对象，事实上，创建一个实体Bean对象相当于新建一条记录，删除一个实体Bean会同时从数据库中删除对应记录，修改一个实体Bean时，容器会自动将实体Bean的状态和数据库同步。</p><p>3、消息驱动Bean是EJB3.0中引入的新的企业Bean，它基于JMS消息，只能接收客户端发送的JMS消息然后处理。MDB实际上是一个异步的无状态会话Bean，客户端调用MDB后无需等待，立刻返回，MDB将异步处理客户请求。这适合于需要异步处理请求的场合，比如订单处理，这样就能避免客户端长时间的等待一个方法调用直到返回结果。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 会话型构件 ",
                        " 实体型构件 ",
                        " COM构件 ",
                        " 消息驱动构件 "
                    ]
                },
                {
                    "index": 146,
                    "belong_page": 1,
                    "question_id": 63643,
                    "question_title": "<p>EJB是企业级Java构件，用于开发和部署多层结构的、分布式的、面向对象的Java应用系统。其中，（　）负责完成服务端与客户端的交互；（请作答此空）用于数据持久化来简化数据库开发工作；（　）主要用来处理并发和异步访问操作。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63643,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>JB分为会话Bean、实体Bean和消息驱动Bean。</p><p>1、会话Bean：用于实现业务逻辑，它可以是有状态的，也可以是无状态的。每当客户端请求时，容器就会选择一个会话Bean来为客户端服务。会话Bean可以直接访问数据库，但更多时候，它会通过实体Bean实现数据访问。</p><p>2、实体Bean：用于实现O/R映射，负责将数据库中的表记录映射为内存中的实体对象，事实上，创建一个实体Bean对象相当于新建一条记录，删除一个实体Bean会同时从数据库中删除对应记录，修改一个实体Bean时，容器会自动将实体Bean的状态和数据库同步。</p><p>3、消息驱动Bean是EJB3.0中引入的新的企业Bean，它基于JMS消息，只能接收客户端发送的JMS消息然后处理。MDB实际上是一个异步的无状态会话Bean，客户端调用MDB后无需等待，立刻返回，MDB将异步处理客户请求。这适合于需要异步处理请求的场合，比如订单处理，这样就能避免客户端长时间的等待一个方法调用直到返回结果。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 会话型构件 ",
                        " 实体型构件 ",
                        " COM构件 ",
                        " 消息驱动构件 "
                    ]
                },
                {
                    "index": 147,
                    "belong_page": 1,
                    "question_id": 63644,
                    "question_title": "<p>EJB是企业级Java构件，用于开发和部署多层结构的、分布式的、面向对象的Java应用系统。其中，（　）负责完成服务端与客户端的交互；（　）用于数据持久化来简化数据库开发工作；（请作答此空）主要用来处理并发和异步访问操作。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63644,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>EJB分为会话Bean、实体Bean和消息驱动Bean。</p><p>1、会话Bean：用于实现业务逻辑，它可以是有状态的，也可以是无状态的。每当客户端请求时，容器就会选择一个会话Bean来为客户端服务。会话Bean可以直接访问数据库，但更多时候，它会通过实体Bean实现数据访问。</p><p>2、实体Bean：用于实现O/R映射，负责将数据库中的表记录映射为内存中的实体对象，事实上，创建一个实体Bean对象相当于新建一条记录，删除一个实体Bean会同时从数据库中删除对应记录，修改一个实体Bean时，容器会自动将实体Bean的状态和数据库同步。</p><p>3、消息驱动Bean是EJB3.0中引入的新的企业Bean，它基于JMS消息，只能接收客户端发送的JMS消息然后处理。MDB实际上是一个异步的无状态会话Bean，客户端调用MDB后无需等待，立刻返回，MDB将异步处理客户请求。这适合于需要异步处理请求的场合，比如订单处理，这样就能避免客户端长时间的等待一个方法调用直到返回结果。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 会话型构件 ",
                        " 实体型构件 ",
                        " COM构件 ",
                        " 消息驱动构件 "
                    ]
                },
                {
                    "index": 148,
                    "belong_page": 1,
                    "question_id": 63646,
                    "question_title": "<p>构件组装成软件系统的过程可以分为三个不同的层次：（　）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63646,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>系统构件组装分为三个不同的层次：定制（Customization）、集成（Integration）、扩展（Extension）。这三个层次对应于构件组装过程中的不同任务。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 初始化、互连和集成 ",
                        " 连接、集成和演化 ",
                        " 定制、集成和扩展 ",
                        " 集成、扩展和演化 "
                    ]
                },
                {
                    "index": 149,
                    "belong_page": 1,
                    "question_id": 63647,
                    "question_title": "<p>CORBA服务端构件模型中，（　）是CORBA对象的真正实现，负责完成客户端请求。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63647,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>伺服对象（Servant）：CORBA对象的真正实现，负责完成客户端请求。</p><p>对象适配器（Object Adapter）：用于屏蔽ORB内核的实现细节，为服务器对象的实现者提供抽象接口，以便他们使用ORB内部的某些功能。</p><p>对象请求代理（Object Request Broker）：解释调用并负责查找实现该请求的对象，将参数传给找到的对象，并调用方法返回结果。客户方不需要了解服务对象的位置、通信方式、实现、激活或存储机制。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 伺服对象（Servant） ",
                        " 对象适配器（Object Adapter） ",
                        " 对象请求代理（Object Request Broker） ",
                        " 适配器激活器（Adapter Activator） "
                    ]
                },
                {
                    "index": 150,
                    "belong_page": 1,
                    "question_id": 63649,
                    "question_title": "<p>J2EE应用系统支持五种不同类型的构件模型，包括（　）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63649,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>J2EE 核心组成：</p><p>容器：Applet Container、Application Container、Web Container、EJB Container</p><p>组件：Applet、Application、JSP/Servlet、EJB</p><p>服务：\tHTTP(Hypertext Transfer Protocol)超文本传输协议</p><p>RMI-IIOP(Remote Method Invocation over the Internet Inter-ORB Protocol):远程方法调用，融合了Java RMI 和CORBA(Common Object Request Broker Architecture 公共对象请求代理体系结构) 在使用Application 或Web 端访问EJB 端组件是使用</p><p>Java IDL(Java Interface Definition Language):Java 接口定义语言，主要用于访问外部的CORBA 服务</p><p>JTA(Java Transaction API):用于进行事务处理操作的 API</p><p>JDBC(Java Database Connectivity):为数据库操作提供的一组API</p><p>JMS(Java Massage Service):用于发送点对点消息的服务</p><p>Java Mail: 用于发送邮件</p><p>JAF(Java Activation Framework):用于封装传递的邮件数据</p><p>JNDI(Java Naming and Directory Interface )</p><p>JAXP(Java API for XML Parsing ):专门用于XML解析操作的API</p><p>JCA(J2EE Connector Architecture ):Java 连接器构架</p><p>JAAS (Java Authentication and Authorization Service)</p><p>JSF (Java Server Faces)</p><p>JSTL （JSP Standard Tag Library）</p><p>SAAJ (SOAP with Attachments API for JAVA)</p><p>JAXR (Java API for XML Registries)</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " Applet、JFC、JSP、Servlet、EJB ",
                        " JNDI、IIOP、RMI、EJB、JSP/Servlet ",
                        " JDBC、EJB、JSP、Servlet、JCA ",
                        " Applet、Servlet、JSP、EJB、Application Client "
                    ]
                },
                {
                    "index": 151,
                    "belong_page": 1,
                    "question_id": 63654,
                    "question_title": "<p>体系结构模型的多视图表示是从不同的视角描述特定系统的体系结构。著名的4+1模型支持从（　）描述系统体系结构。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63654,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>4+1视图即：逻辑视图、开发视图、物理视图（部署视图）、进程视图、场景。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 逻辑视图、开发视图、物理视图、进程视图、统一的场景 ",
                        " 逻辑视图、开发视图、物理视图、模块视图、统一的场景 ",
                        " 逻辑视图、开发视图、构件视图、进程视图、统一的场景 ",
                        " 领域视图、开发视图、构件视图、进程视图、统一的场景 "
                    ]
                },
                {
                    "index": 152,
                    "belong_page": 1,
                    "question_id": 63655,
                    "question_title": "<p>特定领域软件架构（Domain Specific Software Architecture, DSSA）的基本活动包括领域分析、领域设计和领域实现。其中，领域分析的主要目的是获得领域模型。领域设计的主要目标是获得（请作答此空）。领域实现是为了（　）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63655,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>特定领域软件架构（Domain Specific Software Architecture，DSSA）以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 特定领域软件需求 ",
                        " 特定领域软件架构 ",
                        " 特定领域软件设计模型 ",
                        " 特定领域软件重用模型 "
                    ]
                },
                {
                    "index": 153,
                    "belong_page": 1,
                    "question_id": 63657,
                    "question_title": "<p>特定领域软件架构（Domain Specific Software Architecture, DSSA）的基本活动包括领域分析、领域设计和领域实现。其中，领域分析的主要目的是获得领域模型。领域设计的主要目标是获得（　）。领域实现是为了（请作答此空）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63657,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>特定领域软件架构（Domain Specific Software Architecture，DSSA）以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 评估多种软件架构 ",
                        " 验证领域模型 ",
                        " 开发和组织可重用信息，对基础软件架构进行实现 ",
                        " 特定领域软件重用模型 "
                    ]
                },
                {
                    "index": 154,
                    "belong_page": 1,
                    "question_id": 63659,
                    "question_title": "<p>体系结构权衡分析方法（Architecture Tradeoff Analysis Method，ATAM）包含4个主要的活动领域，分别是场景和需求收集、体系结构视图和场景实现、（请作答此空） 、折中。基于场景的架构分析方法（Scenarios-based Architecture Analysis Method， SAAM）的主要输入是问题描述、需求声明和（　）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63659,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>ATAM被分为四个主要的活动领域(或阶段) ，分别是场景和需求收集、体系结构视图和场景实现、属性模型构造和分析、折中。</p><p>SAAM分析评估体系结构的过程包括五个步骤，即场景开发、体系结构描述、单个场景评估、场景交互和总体评估。SAAM的主要输入问题是问题描述、需求声明和体系结构描述。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 架构设计 ",
                        " 问题分析与建模 ",
                        " 属性模型构造和分析 ",
                        " 质量建模 "
                    ]
                },
                {
                    "index": 155,
                    "belong_page": 1,
                    "question_id": 63660,
                    "question_title": "<p>体系结构权衡分析方法（Architecture Tradeoff Analysis Method，ATAM）包含4个主要的活动领域，分别是场景和需求收集、体系结构视图和场景实现、（　） 、折中。基于场景的架构分析方法（Scenarios-based Architecture Analysis Method， SAAM）的主要输入是问题描述、需求声明和（请作答此空）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63660,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>ATAM被分为四个主要的活动领域(或阶段) ，分别是场景和需求收集、体系结构视图和场景实现、属性模型构造和分析、折中。</p><p>SAAM分析评估体系结构的过程包括五个步骤，即场景开发、体系结构描述、单个场景评估、场景交互和总体评估。SAAM的主要输入问题是问题描述、需求声明和体系结构描述。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 问题说明 ",
                        " 问题建模 ",
                        " 体系结构描述 ",
                        " 需求建模 "
                    ]
                },
                {
                    "index": 156,
                    "belong_page": 1,
                    "question_id": 63662,
                    "question_title": "<p>在仓库风格中，有两种不同的构件，其中，（请作答此空）说明当前状态，（　）在中央数据存储上执行。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63662,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查的是架构风格的概念，属于教程原话：“在仓库风格中，有两种不同的构件：中央数据结构说明当前状态，独立构件在中央数据存储上执行”。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 注册表 ",
                        " 中央数据结构 ",
                        " 事件 ",
                        " 数据库 "
                    ]
                },
                {
                    "index": 157,
                    "belong_page": 1,
                    "question_id": 63664,
                    "question_title": "<p>在仓库风格中，有两种不同的构件，其中，（　）说明当前状态，（请作答此空）在中央数据存储上执行。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63664,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查的是架构风格的概念，属于教程原话：“在仓库风格中，有两种不同的构件：中央数据结构说明当前状态，独立构件在中央数据存储上执行”。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 独立构件 ",
                        " 数据结构 ",
                        " 知识源 ",
                        " 共享数据 "
                    ]
                },
                {
                    "index": 158,
                    "belong_page": 1,
                    "question_id": 63666,
                    "question_title": "<p>某公司欲开发一个大型多人即时战略游戏，游戏设计的目标之一是能够支持玩家自行创建战役地图，定义游戏对象的行为和对象之间的关系。针对该需求，公司应该采用（请作答此空）架构风格最为合适。在架构设计阶段，公司的架构师识别出2个核心质量属性场景。其中，“在并发用户数量为10000人时，用户的请求需要在1秒内得到响应”主要与（　）质量属性相关；“对游戏系统进行二次开发的时间不超过3个月”主要与（　）质量属性相关。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63666,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题是极为经典的考题。题目中提及“支持玩家自行创建战役地图”这说明系统要能应对“自定义”内容的解析，这需要用到解释器风格。“并发用户数量10000人时用户请求要在1秒内得到响应”属于典型的性能属性，“对游戏系统进行二次开发的时间不超过3个月”属于可修改性属性。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 层次系统 ",
                        " 解释器 ",
                        " 黑板 ",
                        " 事件驱动系统 "
                    ]
                },
                {
                    "index": 159,
                    "belong_page": 1,
                    "question_id": 63668,
                    "question_title": "<p>某公司欲开发一个大型多人即时战略游戏，游戏设计的目标之一是能够支持玩家自行创建战役地图，定义游戏对象的行为和对象之间的关系。针对该需求，公司应该采用（　）架构风格最为合适。在架构设计阶段，公司的架构师识别出2个核心质量属性场景。其中，“在并发用户数量为10000人时，用户的请求需要在1秒内得到响应”主要与（　）质量属性相关；“对游戏系统进行二次开发的时间不超过3个月”主要与（请作答此空）质量属性相关。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63668,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题是极为经典的考题。题目中提及“支持玩家自行创建战役地图”这说明系统要能应对“自定义”内容的解析，这需要用到解释器风格。“并发用户数量10000人时用户请求要在1秒内得到响应”属于典型的性能属性，“对游戏系统进行二次开发的时间不超过3个月”属于可修改性属性。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 可移植性 ",
                        " 互操作性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 160,
                    "belong_page": 1,
                    "question_id": 63676,
                    "question_title": "<p>某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与（请作答此空）质量属性相关，通常可采用（　）架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与（ 　）质量属性相关，通常可采用（　）架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与（　）质量属性相关，通常可采用（　）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63676,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 可用性 ",
                        " 性能 ",
                        " 易用性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 161,
                    "belong_page": 1,
                    "question_id": 63678,
                    "question_title": "<p>某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与（）质量属性相关，通常可采用（请作答此空）架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与（ 　）质量属性相关，通常可采用（　）架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与（　）质量属性相关，通常可采用（　）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63678,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 抽象接口 ",
                        " 信息隐藏 ",
                        " 主动冗余 ",
                        " 影子操作 "
                    ]
                },
                {
                    "index": 162,
                    "belong_page": 1,
                    "question_id": 63680,
                    "question_title": "<p>某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与（　）质量属性相关，通常可采用（　）架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与（请作答此空）质量属性相关，通常可采用（　）架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与（　）质量属性相关，通常可采用（　）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63680,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 易用性 ",
                        " 可用性 ",
                        " 性能 "
                    ]
                },
                {
                    "index": 163,
                    "belong_page": 1,
                    "question_id": 63682,
                    "question_title": "<p>某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与（　）质量属性相关，通常可采用（　）架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与（　）质量属性相关，通常可采用（　）架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与（请作答此空）质量属性相关，通常可采用（　）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63682,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性 ",
                        " 安全性 ",
                        " 可测试性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 164,
                    "belong_page": 1,
                    "question_id": 63683,
                    "question_title": "<p>某公司欲开发一个人员管理系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“管理系统遭遇断电后，能够在15秒内自动切换至备用系统并恢复正常运行”主要与（　）质量属性相关，通常可采用（　）架构策略实现该属性；“系统正常运行时，人员信息查询请求应该在2秒内返回结果”主要与（　）质量属性相关，通常可采用（　）架构策略实现该属性；“系统需要对用户的操作情况进行记录，并对所有针对系统的恶意操作行为进行报警和记录”主要与（　）质量属性相关，通常可采用（请作答此空）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 63683,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 追踪审计 ",
                        " Ping/Echo ",
                        " 选举 ",
                        " 维护现有接口 "
                    ]
                },
                {
                    "index": 165,
                    "belong_page": 1,
                    "question_id": 151207,
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（请作答此空）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151207,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可用性 ",
                        " 可靠性 ",
                        " 性能 ",
                        " 容错性 "
                    ]
                },
                {
                    "index": 166,
                    "belong_page": 1,
                    "question_id": 151208,
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（请作答此空）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151208,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 可用性 ",
                        " 可修改性 ",
                        " 可靠性 ",
                        " 安全性 "
                    ]
                },
                {
                    "index": 167,
                    "belong_page": 1,
                    "question_id": 151209,
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（请作答此空）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151209,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性 ",
                        " 可修改性 ",
                        " 可靠性 ",
                        " 安全性 "
                    ]
                },
                {
                    "index": 168,
                    "belong_page": 1,
                    "question_id": 151210,
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（请作答此空）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151210,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ]
                },
                {
                    "index": 169,
                    "belong_page": 1,
                    "question_id": 151211,
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（请作答此空）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151211,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ]
                },
                {
                    "index": 170,
                    "belong_page": 1,
                    "question_id": 151212,
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（ ）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（请作答此空）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151212,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ]
                },
                {
                    "index": 171,
                    "belong_page": 1,
                    "question_id": 151222,
                    "question_title": "（请作答此空）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（）模式最适合。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151222,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 组合 ",
                        " 外观 ",
                        " 享元 ",
                        " 装饰器 "
                    ]
                },
                {
                    "index": 172,
                    "belong_page": 1,
                    "question_id": 151223,
                    "question_title": "（ ）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（请作答此空）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（）模式最适合。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151223,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 工厂方法 ",
                        " 享元 ",
                        " 观察者 ",
                        " 中介者 "
                    ]
                },
                {
                    "index": 173,
                    "belong_page": 1,
                    "question_id": 151224,
                    "question_title": "（ ）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（ ）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（请作答此空）模式最适合。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151224,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 装饰器 ",
                        " 享元 ",
                        " 观察者 ",
                        " 中介者 "
                    ]
                },
                {
                    "index": 174,
                    "belong_page": 1,
                    "question_id": 151225,
                    "question_title": "在uml图中，（请作答此空）展现了一组对象、接口、协作和它们之间的关系。（）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151225,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 类图 ",
                        " 对象图 ",
                        " 部署图 ",
                        " 定时图 "
                    ]
                },
                {
                    "index": 175,
                    "belong_page": 1,
                    "question_id": 151226,
                    "question_title": "在uml图中，（ ）展现了一组对象、接口、协作和它们之间的关系。（请作答此空）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151226,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 类图 ",
                        " 包图 ",
                        " 部署图 ",
                        " 定时图 "
                    ]
                },
                {
                    "index": 176,
                    "belong_page": 1,
                    "question_id": 151227,
                    "question_title": "在uml图中，（ ）展现了一组对象、接口、协作和它们之间的关系。（ ）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（请作答此空）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151227,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 类图 ",
                        " 对象图 ",
                        " 部署图 ",
                        " 交互图 "
                    ]
                },
                {
                    "index": 177,
                    "belong_page": 1,
                    "question_id": 151229,
                    "question_title": "一般来说，架构可以分为三个层次。（请作答此空）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（ ）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151229,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ]
                },
                {
                    "index": 178,
                    "belong_page": 1,
                    "question_id": 151230,
                    "question_title": "一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（请作答此空）结构来实现，其中的（ ）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151230,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " MVC ",
                        " spring ",
                        " AOP ",
                        " Hibernate "
                    ]
                },
                {
                    "index": 179,
                    "belong_page": 1,
                    "question_id": 151231,
                    "question_title": "一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ ）结构来实现，其中的（请作答此空）负责接收用户的请求，并决定应该调用哪个模型来处理。（ ）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151231,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 模型 ",
                        " 控制器 ",
                        " 视图 ",
                        " 处理器 "
                    ]
                },
                {
                    "index": 180,
                    "belong_page": 1,
                    "question_id": 151232,
                    "question_title": "一般来说，架构可以分为三个层次。（ ）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ &nbsp;）结构来实现，其中的（ &nbsp;）负责接收用户的请求，并决定应该调用哪个模型来处理。（请作答此空）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151232,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ]
                },
                {
                    "index": 181,
                    "belong_page": 1,
                    "question_id": 151234,
                    "question_title": "<p>软件架构设计主要关注软件构件的（ ）、属性和（请作答此空），并通过多种视图全面描述特定系统的架构。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151234,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>软件架构设计主要关注软件构件的结构、属性和交互作用 ，并通过多种视图全面描述特定系统的架构。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 实现方式 ",
                        " 交互作用 ",
                        " 设计方案 ",
                        " 测试方式 "
                    ]
                },
                {
                    "index": 182,
                    "belong_page": 1,
                    "question_id": 151240,
                    "question_title": "与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（请作答此空）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（ ）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（ ）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151240,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查zhao服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查zhao服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " UDDI ",
                        " Rest ",
                        " WSDL ",
                        " SOAP "
                    ]
                },
                {
                    "index": 183,
                    "belong_page": 1,
                    "question_id": 151241,
                    "question_title": "与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（ ）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（请作答此空）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（ ）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151241,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查zhao服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查zhao服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " UDDI ",
                        " Rest ",
                        " WSDL ",
                        " SOAP "
                    ]
                },
                {
                    "index": 184,
                    "belong_page": 1,
                    "question_id": 151242,
                    "question_title": "与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（ ）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（ ）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（请作答此空）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 151242,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查zhao服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查zhao服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " UDDI ",
                        " Rest ",
                        " WSDL ",
                        " SOAP "
                    ]
                },
                {
                    "index": 185,
                    "belong_page": 1,
                    "question_id": 159201,
                    "question_title": "特定领或软件架构（DSSA)是在一个特定应用领域为—组应用提供组织结构参考的标准软件架构。实施DSSA的过程中包括一系列基本的活动,其中（请作答此空)活动的主要目的是为了获得DSSA.该活动参加人员中,（ ）的主要任务是提供关于领城中系统的需求规约和实现的知识。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159201,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "本主要考查待定领域软件架构的基本定义和基本活动。特定领件架构(0SSA)是在一个特定应用领域为—组应用提供组织结构参考的标佳软件架构。实施DSSA的过程中包括—系列基本的活动其中领城设计活动的主要目的是为了获得DSSA。该活动参加人员中,领城专家的主要任务是提供关于领城中系统的需求规约和实现的知识",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 领域需求 ",
                        " 领域分析 ",
                        " 领域设计 ",
                        " 领城实现 "
                    ]
                },
                {
                    "index": 186,
                    "belong_page": 1,
                    "question_id": 159202,
                    "question_title": "特定领或软件架构（DSSA)是在一个特定应用领域为—组应用提供组织结构参考的标准软件架构。实施DSSA的过程中包括一系列基本的活动,其中（ )活动的主要目的是为了获得DSSA.该活动参加人员中,（请作答此空）的主要任务是提供关于领城中系统的需求规约和实现的知识。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159202,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "本主要考查待定领域软件架构的基本定义和基本活动。特定领件架构(0SSA)是在一个特定应用领域为—组应用提供组织结构参考的标佳软件架构。实施DSSA的过程中包括—系列基本的活动其中领城设计活动的主要目的是为了获得DSSA。该活动参加人员中,领城专家的主要任务是提供关于领城中系统的需求规约和实现的知识",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 领域专家 ",
                        " 领域分析者 ",
                        " 领域设计者 ",
                        " 领城实现者 "
                    ]
                },
                {
                    "index": 187,
                    "belong_page": 1,
                    "question_id": 159205,
                    "question_title": "软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动,是一个迭代的过程。以下关于软件架构设计活动的描述,错误的是（）",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159205,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动,是一个迭代的过程,在建立软件架构的初期,一般需要选择一个合适的架构风格,并将架构分析阶段已标识的构件映射到架构中,并分析这些构件之间的关系,一旦得到了详细的软件架构设计,需要邀请独立于系统开发的外部人员对系统进行评审。—般来说,软件架构设计活动将已标识构件集成到软件架构中,设计这些构件,但不予以实现。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 在建立软件架构的初期,一般需要选择一个合适的架构风格 ",
                        " 将架构分析价段已标识的构件映射到架构中,并分析这些构件之间的关系 ",
                        " 软件架构设计活动将已标构件集成到软件架构中,设计并实现这些构件 ",
                        " 一旦得到了详细的软件架构设计,需要邀请独立于系统开发的外部人员对系统进行评审 "
                    ]
                },
                {
                    "index": 188,
                    "belong_page": 1,
                    "question_id": 159215,
                    "question_title": "软件的质量属性是衡量软件非功能性需求的重要因素。可用性质量属性主要关注软件系统的故障和它所带来的后果。（ ）是能够提高系统可用性的措施。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159215,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "软件的质量属性是衡量软件非功能性需求的重要因素。可用性质量属性主要关注软件系统的故障和它所带来的后果。一般情况下,可以采用Ping/Echo,心跳和异常等措施进行错误检测,因此本题应该选A.",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 心跳检测 ",
                        " 模块的抽象化 ",
                        " 用户授权 ",
                        " 记录/重放 "
                    ]
                },
                {
                    "index": 189,
                    "belong_page": 1,
                    "question_id": 159216,
                    "question_title": "企业应用集成是一个战略意义上的方法，它从服务和信息角度将多个信息系统绑定在一起，提供实时交换信息和影响流程的能力。（请作答此空）提供企业之间的信息共享能力，（ ）在用户使用角度能够对集成系统产生一个“整体”的感觉。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159216,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>界面集成:把各应用系统的界面集成起来,统一入□,使用户能够对集成系统产生一个整体的感觉。</p><p>业务流程集成也称为过程集成,这种集成超越了数据和系统,它由一系列基于标准的、统一数据格式的工作流组成。当进行业务流程集成时,企业必须对各种业务信息的交换进行定义、授权和管理,以便改进操作、减少成本、提高响应速度</p><p>业务流程集成不仅要提供底层应用支撑系统之间的互连,同时要实现存在于企业内部的应用之间,本企业和其他合作伙伴之间的满到端的业务流程的管理。它包括应用集成、 B2B集成、自动化业务流程管理、人工流程管理、企业门户,以及对所有应用系统和流程的管理和监控等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " API集成 ",
                        " 数据集成 ",
                        " 界面集成 ",
                        " 过程集成 "
                    ]
                },
                {
                    "index": 190,
                    "belong_page": 1,
                    "question_id": 159217,
                    "question_title": "<p>企业应用集成是一个战略意义上的方法，它从服务和信息角度将多个信息系统绑定在一起，提供实时交换信息和影响流程的能力。（ ）提供企业之间的信息共享能力，（请作答此空）在用户使用角度能够对集成系统产生一个“整体”的感觉。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159217,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>界面集成：把各应用系统的界面集成起来,统一入口，使用户能够对集成系统产生一个整体的感觉。</p><p>业务流程集成也称为过程集成，这种集成超越了数据和系统,它由一系列基于标准的、统一数据格式的工作流组成。当进行业务流程集成时，企业必须对各种业务信息的交换进行定义、授权和管理，以便改进操作、减少成本、提高响应速度。</p><p>业务流程集成不仅要提供底层应用支撑系统之间的互连，同时要实现存在于企业内部的应用之间，本企业和其他合作伙伴之间的端到端的业务流程的管理。它包括应用集成、 B2B集成、自动化业务流程管理、人工流程管理、企业门户，以及对所有应用系统和流程的管理和监控等。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " API集成 ",
                        " 数据集成 ",
                        " 界面集成 ",
                        " 过程集成 "
                    ]
                },
                {
                    "index": 191,
                    "belong_page": 1,
                    "question_id": 159218,
                    "question_title": "下列关于软件可靠性的叙述，不正确的是（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159218,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "软件可靠性是指在特定环境和特定时间内,计算机程序无故障运行的概率。在软件可靠性的讨论中,故障指软件行为与需求的不符,故障有等级之分。纠正一个故障可能会引入其他的错误,而这些错误会导致其他的故障,需要注意的是,与其他属性不同,软件可靠性能够通过历史数据和开发数据直接测量和估算出来,因此本题应该选A。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 由于影响软件可靠性的因素很复杂，软件可靠性不能通过历史数据和开发数据直接测量和估算出来 ",
                        " 软件可靠性是指在特定环境和特定时间内，计算机程序无故障运行的概率 ",
                        " 在软件可靠性的讨论中，故障指软件行为与需求的不符，故障有等级之分 ",
                        " 排除一个故障可能会引入其他的错误，而这些错误会导致其他的故障 "
                    ]
                },
                {
                    "index": 192,
                    "belong_page": 1,
                    "question_id": 159219,
                    "question_title": "<p>某公司拥有多个应用系统，分别采用不同的语言和平台独立构建而成，企业需要集成来自不同系统的数据，并使用可定制格式的数据频繁地、立即地、可靠地、异步地传输数据。以下集成方式，最能满足这种要求的是（ ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159219,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>一个企业往往拥有多个应用系统，会分别采用不同的语言和平台独立构建而成，当企业需要集成来自不同系统的数据,并使用可定制格式的数据频繁地、立即地、可靠地、异地传输数据时，通常会选择最为灵活的消息机制实现这样的需求，因此本题应该选择D。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 文件共享 ",
                        " 数据库共享 ",
                        " 远程方法调用 ",
                        " 消息机制 "
                    ]
                },
                {
                    "index": 193,
                    "belong_page": 1,
                    "question_id": 159220,
                    "question_title": "服务组件体系结构（Service Component Architecture，SCA）是基于面向服务体系结构（Service Oriented Architecture，SOA）的思想描述服务之间组合和协作的规范。以下关于SCA的叙述，不正确的是（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159220,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>服务组件体系结构(SCA)是面向服务体系结构(SOA) 中描述服务之间组合和协作的规范。SCA定义了语言中立的服务组合方式,能够进行跨语言的服务调用；</p><p>SCA解决的主要问题是加强组件的接口与传输协议的关联；</p><p>SCA实现服务组件和其传输协议的绑定，这种绑定是可扩展的；</p><p>SCA主要是为了满足软件集成的需要而创建的架构。因此本题应该选B。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " SCA定义了语言中立的服务组合方式，能够进行跨语言的服务调用 ",
                        " SCA加强组件的接口与传输协议的关联，提高组件的内聚性 ",
                        " SCA实现服务组件和其传输协议的绑定，这种绑定是可扩展的 ",
                        " SCA主要是为了满足软件集成的需要而创建的架构 "
                    ]
                },
                {
                    "index": 194,
                    "belong_page": 1,
                    "question_id": 159221,
                    "question_title": "某公司欲实现一个数据处理软件，该软件需要从网络接收一组复杂的数据，然后分步进行解析和处理。在这种情况下，采用（ ）的体系结构风格比较适合。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159221,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "当一个软件需要处理复杂数据,且数据需要通过分步进行处理,具有明显的阶段特性时,采用管道和过滤器模式是比较好的方式,因此本题应该选择C。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 远程过程调用 ",
                        " 层次化 ",
                        " 管道/过滤器 ",
                        " 共享数据 "
                    ]
                },
                {
                    "index": 195,
                    "belong_page": 1,
                    "question_id": 159222,
                    "question_title": "某公司支出20万元购买了某市场预测信息，由于此信息的采纳，公司多得到了100万元的利润，对公司而言，这个市场预测信息的（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159222,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>信息是事实的集合,信息按照一定方式组织起来,具有价值,能为组织(或者信息获得者)带来收益,有价值的信息具有精确性、完整性、经济性、可靠性、安全性、及时性、可验证性、安全性等质量属性。信息的价值直接和组织或者决策人员达到组织的目标相关,可以用做出一个决策所需的时间或者给公司增加的利润来衡量</p><p>预测某个新产品将会产生很高的利润,如果市场预测信息被采纳,开发这个新产品的公司将会得到100万元的利润,这个信息的价值（收益）就是100万元减去获得这条信息的成本。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 收益是20万元 ",
                        " 收益是80万元 ",
                        " 收益是100万元 ",
                        " 收益不能衡量 "
                    ]
                },
                {
                    "index": 196,
                    "belong_page": 1,
                    "question_id": 159223,
                    "question_title": "模型是现实世界的抽象或近似，主要包括叙述型、物理型、图解型和数学型等。无论开发何种模型，（ ）都是最关键的因素。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159223,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>客观的世界是复杂的,当评估现实世界的对象之间的关系和影响时,通常使用系统模型,用简化的模型来代替真实的系统。</p><p>不论开发什么模型,准确性都是关键因素。一个不准确的模型通常会导致对问题的不准确解决方案。另外,大多数模型包括许多假设,应尽可能这些假设同现实情况相符。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 经济性 ",
                        " 简单性 ",
                        " 灵活性 ",
                        " 准确性 "
                    ]
                },
                {
                    "index": 197,
                    "belong_page": 1,
                    "question_id": 159233,
                    "question_title": "<p>其公司承接了一个开发家用空调自动调温器的任务，调温器测量外部空气温度，根据设定的期望温度控制空调的开关。根据该需求，公司应采用（ ）架构风格最为合适</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159233,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查架构风格与架构设计策略。根据题目描述,调温器需要实时获取外界的温度信息,并与用户定义的温度进行比较并做出动作。根据该系统的应用领域和实际需求,可以看出这是一个典型的过程控制架构风格的应用场景。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 解释器 ",
                        " 过程控制 ",
                        " 分层 ",
                        " 管道过滤嚣 "
                    ]
                },
                {
                    "index": 198,
                    "belong_page": 1,
                    "question_id": 159234,
                    "question_title": "“4+1”视图主要用于描述系统逻辑架构，最早由Philippe Kruchten于1995年提出。其中（请作答此空）视图用于描述对象模型，并说明系统应该为用户提供哪些服务。当采用面向对象的设计方法描述对象模型时，通常使用（ ）表达类的内部属性和行为，以及类集合之间的交互关系；采用（ ）定义对象的内部行为。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159234,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>“4+1”视图是对逻辑架构进行描述，最早由Philippe Kruchten提出，他在1995年的IEEE Software上发表了题为The 4+1 View Model of Architecture的论文，引起了业界的极大关注，并最终被RUP采纳，现在已经成为架构设计的结构标准。“4+1”视图主要包括：</p><p>①逻辑视图(Logical View)，设计的对象模型(使用面向对象的设计方法时)。</p><p>②过程视图(Process View)，捕捉设计的并发和同步特征。</p><p>③物理视图(Physical View)，描述了软件到硬件的映射，反映了分布式特性。</p><p>④开发视图(Development View)，描述了在开发环境中软件的静态组织结构。</p><p>⑤架构的描述，即所做的各种决定，可以围绕着这四个视图来组织，然后由一些用例(Use Cases)或场景(Scenarios)来说明，从而形成了第五个视图。</p><p>当采用面向对象的设计方法描述对象模型时，通常使用类图表达类的内部属性和行为，以及类集合之间的交互关系；采用状态图定义对象的内部行为。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 逻辑 ",
                        " 过程 ",
                        " 开发 ",
                        " 物理 "
                    ]
                },
                {
                    "index": 199,
                    "belong_page": 1,
                    "question_id": 159235,
                    "question_title": "“4+1”视图主要用于描述系统逻辑架构，最早由Philippe Kruchten于1995年提出。其中（ ）视图用于描述对象模型，并说明系统应该为用户提供哪些服务。当采用面向对象的设计方法描述对象模型时，通常使用（请作答此空）表达类的内部属性和行为，以及类集合之间的交互关系；采用（ ）定义对象的内部行为。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159235,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>“4+1”视图是对逻辑架构进行描述，最早由Philippe Kruchten提出，他在1995年的IEEE Software上发表了题为The 4+1 View Model of Architecture的论文，引起了业界的极大关注，并最终被RUP采纳，现在已经成为架构设计的结构标准。“4+1”视图主要包括：</p><p>①逻辑视图(Logical View)，设计的对象模型(使用面向对象的设计方法时)。</p><p>②过程视图(Process View)，捕捉设计的并发和同步特征。</p><p>③物理视图(Physical View)，描述了软件到硬件的映射，反映了分布式特性。</p><p>④开发视图(Development View)，描述了在开发环境中软件的静态组织结构。</p><p>⑤架构的描述，即所做的各种决定，可以围绕着这四个视图来组织，然后由一些用例(Use Cases)或场景(Scenarios)来说明，从而形成了第五个视图。</p><p>当采用面向对象的设计方法描述对象模型时，通常使用类图表达类的内部属性和行为，以及类集合之间的交互关系；采用状态图定义对象的内部行为。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 对象图 ",
                        " 活动图 ",
                        " 状态图 ",
                        " 类图 "
                    ]
                },
                {
                    "index": 200,
                    "belong_page": 1,
                    "question_id": 159236,
                    "question_title": "“4+1”视图主要用于描述系统逻辑架构，最早由Philippe Kruchten于1995年提出。其中（ ）视图用于描述对象模型，并说明系统应该为用户提供哪些服务。当采用面向对象的设计方法描述对象模型时，通常使用（ ）表达类的内部属性和行为，以及类集合之间的交互关系；采用（请作答此空）定义对象的内部行为。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159236,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>“4+1”视图是对逻辑架构进行描述，最早由Philippe Kruchten提出，他在1995年的IEEE Software上发表了题为The 4+1 View Model of Architecture的论文，引起了业界的极大关注，并最终被RUP采纳，现在已经成为架构设计的结构标准。“4+1”视图主要包括：</p><p>①逻辑视图(Logical View)，设计的对象模型(使用面向对象的设计方法时)。</p><p>②过程视图(Process View)，捕捉设计的并发和同步特征。</p><p>③物理视图(Physical View)，描述了软件到硬件的映射，反映了分布式特性。</p><p>④开发视图(Development View)，描述了在开发环境中软件的静态组织结构。</p><p>⑤架构的描述，即所做的各种决定，可以围绕着这四个视图来组织，然后由一些用例(Use Cases)或场景(Scenarios)来说明，从而形成了第五个视图。</p><p>当采用面向对象的设计方法描述对象模型时，通常使用类图表达类的内部属性和行为，以及类集合之间的交互关系；采用状态图定义对象的内部行为。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 对象图 ",
                        " 活动图 ",
                        " 状态图 ",
                        " 类图 "
                    ]
                },
                {
                    "index": 201,
                    "belong_page": 1,
                    "question_id": 159237,
                    "question_title": "<p>正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中（ ）是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159237,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件架构评价的理解和应用。<br/>正确识别风险验点、非风险点、敏感点和权衡点是进行软件架构平价的关健步骤，其中敏感点是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 风验点 ",
                        " 非风险点 ",
                        " 敏感点 ",
                        " 权衡点 "
                    ]
                },
                {
                    "index": 202,
                    "belong_page": 1,
                    "question_id": 159240,
                    "question_title": "面向服务（Service-Oriented，SO）的开发方法将（请作答此空）的定义与实现进行解耦，并将跨构件的功能调用暴露出来。该方法有三个主要的抽象级别，最低层的（ ）代表单个逻辑单元的事物，包含特定的结构化接口，并且返回结构化的响应；第二层的服务代表操作的逻辑分组；最高层的（ ）则是为了实现特定业务目标而执行的一组长期运行的动作或者活动。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159240,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>OO的应用构建在类和对象之上，随后发展起来的建模技术将相关对象按照业务功能进行分组，就形成了构件（Component）的概念。对于跨构件的功能调用，则采用接口的形式暴露出来。进一步将接口的定义与实现进行解耦，则催生了服务和面向服务（Service-Oriented，SO）的开发方法。由此可见，面向对象、基于构件、面向服务是三个递进的抽象层次。</p><p>SO方法有三个主要的抽象级别，分别是操作、服务和业务流程。位于最低层的操作代表单个逻辑单元的事物，执行操作通常会导致读、写或修改一个或多个持久性数据。服务的操作类似于对象的方法，它们都有特定的结构化接口，并且返回结构化的响应；位于第二层的服务代表操作的逻辑分组；最高层的业务流程则是为了实现特定业务目标而执行的一组长期运行的动作或活动，包括依据一组业务规则按照有序序列执行的一系列操作。其中操作的排序、选择和执行成为服务或流程的编排，典型的情况是调用已编排的服务来响应业务事件。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 接口 ",
                        " 功能 ",
                        " 活动 ",
                        " 用例 "
                    ]
                },
                {
                    "index": 203,
                    "belong_page": 1,
                    "question_id": 159241,
                    "question_title": "面向服务（Service-Oriented，SO）的开发方法将（ ）的定义与实现进行解耦，并将跨构件的功能调用暴露出来。该方法有三个主要的抽象级别，最低层的（请作答此空）代表单个逻辑单元的事物，包含特定的结构化接口，并且返回结构化的响应；第二层的服务代表操作的逻辑分组；最高层的（ ）则是为了实现特定业务目标而执行的一组长期运行的动作或者活动。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159241,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>OO的应用构建在类和对象之上，随后发展起来的建模技术将相关对象按照业务功能进行分组，就形成了构件（Component）的概念。对于跨构件的功能调用，则采用接口的形式暴露出来。进一步将接口的定义与实现进行解耦，则催生了服务和面向服务（Service-Oriented，SO）的开发方法。由此可见，面向对象、基于构件、面向服务是三个递进的抽象层次。</p><p>SO方法有三个主要的抽象级别，分别是操作、服务和业务流程。位于最低层的操作代表单个逻辑单元的事物，执行操作通常会导致读、写或修改一个或多个持久性数据。服务的操作类似于对象的方法，它们都有特定的结构化接口，并且返回结构化的响应；位于第二层的服务代表操作的逻辑分组；最高层的业务流程则是为了实现特定业务目标而执行的一组长期运行的动作或活动，包括依据一组业务规则按照有序序列执行的一系列操作。其中操作的排序、选择和执行成为服务或流程的编排，典型的情况是调用已编排的服务来响应业务事件。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 类 ",
                        " 对象 ",
                        " 操作 ",
                        " 状态 "
                    ]
                },
                {
                    "index": 204,
                    "belong_page": 1,
                    "question_id": 159242,
                    "question_title": "面向服务（Service-Oriented，SO）的开发方法将（ ）的定义与实现进行解耦，并将跨构件的功能调用暴露出来。该方法有三个主要的抽象级别，最低层的（ ）代表单个逻辑单元的事物，包含特定的结构化接口，并且返回结构化的响应；第二层的服务代表操作的逻辑分组；最高层的（请作答此空）则是为了实现特定业务目标而执行的一组长期运行的动作或者活动。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 159242,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>OO的应用构建在类和对象之上，随后发展起来的建模技术将相关对象按照业务功能进行分组，就形成了构件（Component）的概念。对于跨构件的功能调用，则采用接口的形式暴露出来。进一步将接口的定义与实现进行解耦，则催生了服务和面向服务（Service-Oriented，SO）的开发方法。由此可见，面向对象、基于构件、面向服务是三个递进的抽象层次。</p><p>SO方法有三个主要的抽象级别，分别是操作、服务和业务流程。位于最低层的操作代表单个逻辑单元的事物，执行操作通常会导致读、写或修改一个或多个持久性数据。服务的操作类似于对象的方法，它们都有特定的结构化接口，并且返回结构化的响应；位于第二层的服务代表操作的逻辑分组；最高层的业务流程则是为了实现特定业务目标而执行的一组长期运行的动作或活动，包括依据一组业务规则按照有序序列执行的一系列操作。其中操作的排序、选择和执行成为服务或流程的编排，典型的情况是调用已编排的服务来响应业务事件。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 业务规则 ",
                        " 业务流程 ",
                        " 数据流 ",
                        " 控制流 "
                    ]
                },
                {
                    "index": 205,
                    "belong_page": 1,
                    "question_id": 208409,
                    "question_title": "以下关于软件架构风格与系统性能关系的叙述，错误的是（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208409,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "采用层次化架构风格的系统，划分的层次越多，系统完成某项功能需要的中间调用操作越多，其性能越差。采用管道一过滤器架构风格的系统，可以通过引入过滤器的数据并发处理可以有效提高系统性能。采用面向对象架构风格的系统，可以通过减少功能调用层次提高系统性能。对于过程调用架构风格的系统，将显式调用策略替换为隐式调用策略能够提高系统的灵活性，但会降低系统的性能。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 对于采用层次化架构风格的系统，划分的层次越多，系统的性能越差 ",
                        " 对于采用管道一过滤器架构风格的系统，可以通过引入过滤器的数据并发处理提高系统性能 ",
                        " 对于采用面向对象架构风格的系统，可以通过减少功能调用层次提高系统性能 ",
                        " 对于采用过程调用架构风格的系统，可以通过将显式调用策略替换为隐式调用策略提高系统性能 "
                    ]
                },
                {
                    "index": 206,
                    "belong_page": 1,
                    "question_id": 208431,
                    "question_title": "架构描述语言(Architecture Description Language，ADL)是一种为明确说明软件系统的概念架构和对这些概念架构建模提供功能的语言。ADL主要包括以下组成部分：组件、组件接口、（ ）和架构配置。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208431,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "架构描述语言(Architecture Description Language，ADL)是一种为明确说明软件系统的概念架构和对这些概念架构建模提供功能的语言。ADL主要包括以下组成部分：组件、组件接口、连接件和架构配置。ADL对连接件的重视成为区分ADL和其他建模语言的重要特征之一。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 架构风格 ",
                        " 架构实现 ",
                        " 连接件 ",
                        " 组件实现 "
                    ]
                },
                {
                    "index": 207,
                    "belong_page": 1,
                    "question_id": 208432,
                    "question_title": "<p>ANSI/IEEE 1471-2000是对软件密集型系统的架构进行描述的标准。在该标准中，（请作答此空）这一概念主要用于描述软件架构模型。在此基础上，通常采用（ ）描述某个利益相关人(Stakeholder)所关注架构模型的某一方面。（ ）则是对所有利益相关人关注点的响应和回答。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208432,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>在ANSI/IEEE 1471-2000标准中，系统是为了达成利益相关人(Stakeholder)的某些使命(Mission)，在特定环境(Enviroment)中构建的。每一个系统都有一个架构(Architecture)。架构是对所有利益相关人的关注点(Concern)的响应和回答，通过架构描述(Architecture Description)来说明。每一个利益相关人都有各自的关注点。这些关注点是指对其重要的，与系统的开发、运营或其他方面相关的利益。架构描述(Architecture Description)本质上是多视图的。每一个视图(View)是从一个特定的视角(Viewpoint)来表述架构的某一个独立的方面。试图用一个单一的视图来覆盖所有的关注点当然是最好的，但实际上这种表述方式将很难理解。视角(Viewpoint)的选择，基于要解决哪些利益相关人的哪些关注点。它决定了用来创建视图的语言、符号和模型等，以及任何与创建视图相关的建模方法或者分析技术。一个视图(View)包括一个或者多个架构模型(Model)，一个模型也可能参与多个视图。模型较文本的表述的好处在于，可以更容易的可视化、检查、分析、管理和集成。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 上下文 ",
                        " 架构风格 ",
                        " 组件 ",
                        " 视图 "
                    ]
                },
                {
                    "index": 208,
                    "belong_page": 1,
                    "question_id": 208433,
                    "question_title": "ANSI/IEEE 1471-2000是对软件密集型系统的架构进行描述的标准。在该标准中，（ ）这一概念主要用于描述软件架构模型。在此基础上，通常采用（请作答此空）描述某个利益相关人(Stakeholder)所关注架构模型的某一方面。（ ）则是对所有利益相关人关注点的响应和回答。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208433,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "在ANSI/IEEE 1471-2000标准中，系统是为了达成利益相关人(Stakeholder)的某些使命(Mission)，在特定环境(Enviroment)中构建的。每一个系统都有一个架构(Architecture)。架构是对所有利益相关人的关注点(Concern)的响应和回答，通过架构描述(Architecture Description)来说明。每一个利益相关人都有各自的关注点。这些关注点是指对其重要的，与系统的开发、运营或其他方面相关的利益。架构描述(Architecture Description)本质上是多视图的。每一个视图(View)是从一个特定的视角(Viewpoint)来表述架构的某一个独立的方面。试图用一个单一的视图来覆盖所有的关注点当然是最好的，但实际上这种表述方式将很难理解。视角(Viewpoint)的选择，基于要解决哪些利益相关人的哪些关注点。它决定了用来创建视图的语言、符号和模型等，以及任何与创建视图相关的建模方法或者分析技术。一个视图(View)包括一个或者多个架构模型(Model)，一个模型也可能参与多个视图。模型较文本的表述的好处在于，可以更容易的可视化、检查、分析、管理和集成。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 环境 ",
                        " 资源 ",
                        " 视角 ",
                        " 场景 "
                    ]
                },
                {
                    "index": 209,
                    "belong_page": 1,
                    "question_id": 208434,
                    "question_title": "ANSI/IEEE 1471-2000是对软件密集型系统的架构进行描述的标准。在该标准中，（ ）这一概念主要用于描述软件架构模型。在此基础上，通常采用（ ）描述某个利益相关人(Stakeholder)所关注架构模型的某一方面。（请作答此空）则是对所有利益相关人关注点的响应和回答。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208434,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "在ANSI/IEEE 1471-2000标准中，系统是为了达成利益相关人(Stakeholder)的某些使命(Mission)，在特定环境(Enviroment)中构建的。每一个系统都有一个架构(Architecture)。架构是对所有利益相关人的关注点(Concern)的响应和回答，通过架构描述(Architecture Description)来说明。每一个利益相关人都有各自的关注点。这些关注点是指对其重要的，与系统的开发、运营或其他方面相关的利益。架构描述(Architecture Description)本质上是多视图的。每一个视图(View)是从一个特定的视角(Viewpoint)来表述架构的某一个独立的方面。试图用一个单一的视图来覆盖所有的关注点当然是最好的，但实际上这种表述方式将很难理解。视角(Viewpoint)的选择，基于要解决哪些利益相关人的哪些关注点。它决定了用来创建视图的语言、符号和模型等，以及任何与创建视图相关的建模方法或者分析技术。一个视图(View)包括一个或者多个架构模型(Model)，一个模型也可能参与多个视图。模型较文本的表述的好处在于，可以更容易的可视化、检查、分析、管理和集成。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 架构 ",
                        " 系统 ",
                        " 模型 ",
                        " 使命 "
                    ]
                },
                {
                    "index": 210,
                    "belong_page": 1,
                    "question_id": 208435,
                    "question_title": "采用以架构为核心的软件开发方法，在建立软件架构的初期，首要任务是选择一个合适的（请作答此空），在此基础上，开发人员通过架构模型，可以获得关于（ ）的理解，为将来的架构实现与演化过程建立了目标。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208435,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "架构设计是一个迭代过程，在建立软件架构的初期，选择一个合适的架构风格是首要的，在此基础上，开发人员通过架构模型，可以获得关于软件架构属性的理解，为将来的架构实现与演化过程建立了目标。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 分析模式 ",
                        " 设计模式 ",
                        " 架构风格 ",
                        " 架构标准 "
                    ]
                },
                {
                    "index": 211,
                    "belong_page": 1,
                    "question_id": 208436,
                    "question_title": "采用以架构为核心的软件开发方法，在建立软件架构的初期，首要任务是选择一个合适的（ ），在此基础上，开发人员通过架构模型，可以获得关于（请作答此空）的理解，为将来的架构实现与演化过程建立了目标。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208436,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "架构设计是一个迭代过程，在建立软件架构的初期，选择一个合适的架构风格是首要的，在此基础上，开发人员通过架构模型，可以获得关于软件架构属性的理解，为将来的架构实现与演化过程建立了目标。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 架构需求 ",
                        " 架构属性 ",
                        " 架构优先级 ",
                        " 架构约束 "
                    ]
                },
                {
                    "index": 212,
                    "belong_page": 1,
                    "question_id": 208442,
                    "question_title": "若系统中的某子模块需要为其他模块提供访问不同数据库系统的功能，这些数据库系统提供的访问接口有一定的差异，但访问过程却都是相同的，例如，先连接数据库，再打开数据库，最后对数据进行查询。针对上述需求，可以采用（请作答此空）设计模式抽象出相同的数据库访问过程，该设计模式（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208442,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "外观(fagade)模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 外观 ",
                        " 装饰 ",
                        " 桥接 ",
                        " 享元 "
                    ]
                },
                {
                    "index": 213,
                    "belong_page": 1,
                    "question_id": 208443,
                    "question_title": "若系统中的某子模块需要为其他模块提供访问不同数据库系统的功能，这些数据库系统提供的访问接口有一定的差异，但访问过程却都是相同的，例如，先连接数据库，再打开数据库，最后对数据进行查询。针对上述需求，可以采用（ ）设计模式抽象出相同的数据库访问过程，该设计模式（请作答此空）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208443,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "外观(fagade)模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可以动态、透明地给单个对象添加职责 ",
                        " 为子系统定义了一个高层接口，这个接口使得这一子系统更加容易使用 ",
                        " 通过运用共享技术，有效支持大量细粒度的对象 ",
                        " 将抽象部分与它的实现部分分离，使它们都可以独立地变化 "
                    ]
                },
                {
                    "index": 214,
                    "belong_page": 1,
                    "question_id": 208444,
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（请作答此空）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（ ）最为合适；为了实现图像处理算法的灵活选择与替换，采用（ ）最为合适。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208444,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 工厂模式 ",
                        " 责任链模式 ",
                        " 中介者模式 ",
                        " 命令模式 "
                    ]
                },
                {
                    "index": 215,
                    "belong_page": 1,
                    "question_id": 208445,
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（ ）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（请作答此空）最为合适；为了实现图像处理算法的灵活选择与替换，采用（ ）最为合适。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208445,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 状态模式 ",
                        " 适配器模式 ",
                        " 组合模式 ",
                        " 单例模式 "
                    ]
                },
                {
                    "index": 216,
                    "belong_page": 1,
                    "question_id": 208446,
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（ ）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（ ）最为合适；为了实现图像处理算法的灵活选择与替换，采用（请作答此空）最为合适。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208446,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 模板方法模式 ",
                        " 访问者模式 ",
                        " 策略模式 ",
                        " 观察者模式 "
                    ]
                },
                {
                    "index": 217,
                    "belong_page": 1,
                    "question_id": 208447,
                    "question_title": "特定领域软件架构(Domam Specific Software Architecture，DSSA.是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得（请作答此空），从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得（ ），从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并对基础软件架构进行实现。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208447,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "特定领域软件架构(Dommn Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得：DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 领域边界 ",
                        " 领域信息 ",
                        " 领域对象 ",
                        " 领域模型 "
                    ]
                },
                {
                    "index": 218,
                    "belong_page": 1,
                    "question_id": 208448,
                    "question_title": "特定领域软件架构(Domam Specific Software Architecture，DSSA.是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得（ ），从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得（请作答此空），从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并对基础软件架构进行实现。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208448,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "特定领域软件架构(Dommn Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得：DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 特定领域软件需求 ",
                        " 特定领域软件架构 ",
                        " 特定领域软件设计模型 ",
                        " 特定领域软件重用模型 "
                    ]
                },
                {
                    "index": 219,
                    "belong_page": 1,
                    "question_id": 208449,
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（请作答此空）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208449,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 性能 ",
                        " 吞吐量 ",
                        " 可靠性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 220,
                    "belong_page": 1,
                    "question_id": 208450,
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（请作答此空）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208450,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 操作串行化 ",
                        " 资源调度 ",
                        " 心跳 ",
                        " 内置监控器 "
                    ]
                },
                {
                    "index": 221,
                    "belong_page": 1,
                    "question_id": 208451,
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（请作答此空）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208451,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 易用性 ",
                        " 可用性 ",
                        " 互操作性 "
                    ]
                },
                {
                    "index": 222,
                    "belong_page": 1,
                    "question_id": 208452,
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（请作答此空）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208452,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 主动冗余 ",
                        " 信息隐藏 ",
                        " 抽象接口 ",
                        " 记录/回放 "
                    ]
                },
                {
                    "index": 223,
                    "belong_page": 1,
                    "question_id": 208453,
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（请作答此空）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208453,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性 ",
                        " 安全性 ",
                        " 可测试性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 224,
                    "belong_page": 1,
                    "question_id": 208454,
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（请作答此空）架构策略实现该属性。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208454,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 内置监控器 ",
                        " 记录/回放 ",
                        " 追踪审计 ",
                        " 维护现有接口 "
                    ]
                },
                {
                    "index": 225,
                    "belong_page": 1,
                    "question_id": 208455,
                    "question_title": "基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、（请作答此空）和架构描述文档，其分析过程主要包括场景开发、（ ）、单个场景评估、场景交互和总体评估。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208455,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查考生对基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)的掌握和理解。SAAM是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、需求说明和架构描述，其分析过程主要包括场景开发、架构描述、单个场景评估、场景交互和总体评估。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 问题说明 ",
                        " 问题建模 ",
                        " 需求说明 ",
                        " 需求建模 "
                    ]
                },
                {
                    "index": 226,
                    "belong_page": 1,
                    "question_id": 208456,
                    "question_title": "基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、（ ）和架构描述文档，其分析过程主要包括场景开发、（请作答此空）、单个场景评估、场景交互和总体评估。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208456,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查考生对基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)的掌握和理解。SAAM是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、需求说明和架构描述，其分析过程主要包括场景开发、架构描述、单个场景评估、场景交互和总体评估。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 架构需求 ",
                        " 架构描述 ",
                        " 架构设计 ",
                        " 架构实现 "
                    ]
                },
                {
                    "index": 227,
                    "belong_page": 1,
                    "question_id": 208484,
                    "question_title": "把应用程序中应用最频繁的那部分核心程序作为评价计算机性能的标准程序，称为（请作答此空）程序。（ ）不是对Web服务器进行性能评估的主要指标。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208484,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "把应用程序中应用最频繁的那部分核心程序作为评价计算机性能的标准程序，称为基准测试程序。作为承载Web应用的Web服务器，对其进行性能评估时，主要关注最大并发连接数、响应延迟、吞吐量等指标。相对来说，对个别数据的丢包率并不是很关心。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 仿真测试 ",
                        " 核心测试 ",
                        " 基准测试 ",
                        " 标准测试 "
                    ]
                },
                {
                    "index": 228,
                    "belong_page": 1,
                    "question_id": 208485,
                    "question_title": "<p>把应用程序中应用最频繁的那部分核心程序作为评价计算机性能的标准程序，称为（ ）程序。（请作答此空）不是对Web服务器进行性能评估的主要指标。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208485,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>把应用程序中应用最频繁的那部分核心程序作为评价计算机性能的标准程序，称为基准测试程序。<br/>作为承载Web应用的Web服务器，对其进行性能评估时，主要关注最大并发连接数、响应延迟、吞吐量等指标。相对来说，对个别数据的丢包率并不是很关心。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 丢包率 ",
                        " 最大并发连接数 ",
                        " 响应延迟 ",
                        " 吞吐量 "
                    ]
                },
                {
                    "index": 229,
                    "belong_page": 1,
                    "question_id": 208499,
                    "question_title": "在面向对象设计中，（请作答此空）可以实现界面控制、外部接口和环境隔离。（ ）作为完成用例业务的责任承担者，协调、控制其他类共同完成用例规定的功能或行为。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208499,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>类封装了信息和行为，是面向对象的重要组成部分。在面向对象设计中，类可以分为三种类型：实体类、边界类和控制类。</p><p>①实体类映射需求中的每个实体，实体类保存需要存储在永久存储体中的信息。实体类是对用户来说最有意义的类，通常采用业务领域术语命名，一般来说是一个名词，在用例模型向领域模型转化中，一个参与者一般对应于实体类。</p><p>②控制类是用于控制用例工作的类，一般是由动宾结构的短语(“动词+名词”或“名词+动词”)转化来的名词。控制类用于对一个或几个用例所特有的控制行为进行建模，控制对象通常控制其他对象，因此它们的行为具有协调性。</p><p>③边界类用于封装在用例内、外流动的信息或数据流。边界类是一种用于对系统外部环境与其内部运作之间的交互进行建模的类。边界对象将系统与其外部环境的变更隔离开，使这些变更不会对系统其他部分造成影响。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 实体类 ",
                        " 控制类 ",
                        " 边界类 ",
                        " 交互类 "
                    ]
                },
                {
                    "index": 230,
                    "belong_page": 1,
                    "question_id": 208500,
                    "question_title": "在面向对象设计中，（ ）可以实现界面控制、外部接口和环境隔离。（请作答此空）作为完成用例业务的责任承担者，协调、控制其他类共同完成用例规定的功能或行为。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208500,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>类封装了信息和行为，是面向对象的重要组成部分。在面向对象设计中，类可以分为三种类型：实体类、边界类和控制类。</p><p>①实体类映射需求中的每个实体，实体类保存需要存储在永久存储体中的信息。实体类是对用户来说最有意义的类，通常采用业务领域术语命名，一般来说是一个名词，在用例模型向领域模型转化中，一个参与者一般对应于实体类。</p><p>②控制类是用于控制用例工作的类，一般是由动宾结构的短语(“动词+名词”或“名词+动词”)转化来的名词。控制类用于对一个或几个用例所特有的控制行为进行建模，控制对象通常控制其他对象，因此它们的行为具有协调性。</p><p>③边界类用于封装在用例内、外流动的信息或数据流。边界类是一种用于对系统外部环境与其内部运作之间的交互进行建模的类。边界对象将系统与其外部环境的变更隔离开，使这些变更不会对系统其他部分造成影响。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 实体类 ",
                        " 控制类 ",
                        " 边界类 ",
                        " 交互类 "
                    ]
                },
                {
                    "index": 231,
                    "belong_page": 1,
                    "question_id": 208503,
                    "question_title": "某系统中的文本显示类(Text View)和图片显示类(Picture View)都继承了组件类(Component)，分别显示文本和图片内容，现需要构造带有滚动条或者带有黑色边框，或者既有滚动条又有黑色边框的文本显示控件和图片显示控件，但希望最多只增加3个类。那么采用设计模式（请作答此空）可实现该需求，其优点是（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208503,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>装饰(Decorator)模式可以再不修改对象外观和功能的情况下添加或者删除对象功能。它可以使用一种对客户端来说是透明的方法来修改对象的功能，也就是使用初始类的子类实例对初始对象进行授权。装饰模式还为对象动态地添加了额外的重任，这样就在不使用静态继承的情况下，为修改对象功能提供了灵活的选择。</p><p>在以下情况中，应该使用装饰模式：</p><p>想要在单个对象中动态并且透明地添加责任，而这样并不会影响其他对象；</p><p>想要在以后可能要修改的对象中添加责任；</p><p>当无法通过静态子类化实现扩展时。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 外观 ",
                        " 单体 ",
                        " 装饰 ",
                        " 模板方法 "
                    ]
                },
                {
                    "index": 232,
                    "belong_page": 1,
                    "question_id": 208504,
                    "question_title": "某系统中的文本显示类(Text View)和图片显示类(Picture View)都继承了组件类(Component)，分别显示文本和图片内容，现需要构造带有滚动条或者带有黑色边框，或者既有滚动条又有黑色边框的文本显示控件和图片显示控件，但希望最多只增加3个类。那么采用设计模式（ ）可实现该需求，其优点是（请作答此空）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208504,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>装饰(Decorator)模式可以再不修改对象外观和功能的情况下添加或者删除对象功能。它可以使用一种对客户端来说是透明的方法来修改对象的功能，也就是使用初始类的子类实例对初始对象进行授权。装饰模式还为对象动态地添加了额外的重任，这样就在不使用静态继承的情况下，为修改对象功能提供了灵活的选择。</p><p>在以下情况中，应该使用装饰模式：</p><p>想要在单个对象中动态并且透明地添加责任，而这样并不会影响其他对象；</p><p>想要在以后可能要修改的对象中添加责任；</p><p>当无法通过静态子类化实现扩展时。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 比静态继承具有更大的灵活性 ",
                        " 提高已有功能的重复使用性 ",
                        " 可以将接口与实现相分离 ",
                        " 为复杂系统提供了简单接口 "
                    ]
                },
                {
                    "index": 233,
                    "belong_page": 1,
                    "question_id": 208508,
                    "question_title": "软件系统架构是关于软件系统的结构、（请作答此空）和属性的高级抽象。在描述阶段，主要描述直接构成系统的抽象组件以及各个组件之间的连接规则，特别是相对细致地描述组件的（ ）。在实现阶段，这些抽象组件被细化为实际的组件，比如具体类或者对象。软件系统架构不仅指定了软件系统的组织和（ ）结构，而且显示了系统需求和组件之间的对应关系，包括设计决策的基本方法和基本原理。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208508,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件系统架构的基础知识。</p><p>软件系统架构是关于软件系统的结构、行为和属性的高级抽象。在描述阶段，主要描述直接构成系统的抽象组件以及各个组件之间的连接规则，特别是相对细致地描述组件的交互关系。在实现阶段，这些抽象组件被细化为实际的组件，比如具体类或者对象。软件系统架构不仅指定了软件系统的组织和拓扑结构，而且显示了系统需求和组件之间的对应关系，包括设计决策的基本方法和基本原理。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 行为 ",
                        " 组织 ",
                        " 性能 ",
                        " 功能 "
                    ]
                },
                {
                    "index": 234,
                    "belong_page": 1,
                    "question_id": 208509,
                    "question_title": "软件系统架构是关于软件系统的结构、（ ）和属性的高级抽象。在描述阶段，主要描述直接构成系统的抽象组件以及各个组件之间的连接规则，特别是相对细致地描述组件的（请作答此空）。在实现阶段，这些抽象组件被细化为实际的组件，比如具体类或者对象。软件系统架构不仅指定了软件系统的组织和（ ）结构，而且显示了系统需求和组件之间的对应关系，包括设计决策的基本方法和基本原理。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208509,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件系统架构的基础知识。</p><p>软件系统架构是关于软件系统的结构、行为和属性的高级抽象。在描述阶段，主要描述直接构成系统的抽象组件以及各个组件之间的连接规则，特别是相对细致地描述组件的交互关系。在实现阶段，这些抽象组件被细化为实际的组件，比如具体类或者对象。软件系统架构不仅指定了软件系统的组织和拓扑结构，而且显示了系统需求和组件之间的对应关系，包括设计决策的基本方法和基本原理。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 交互关系 ",
                        " 实现关系 ",
                        " 数据依赖 ",
                        " 功能依赖 "
                    ]
                },
                {
                    "index": 235,
                    "belong_page": 1,
                    "question_id": 208510,
                    "question_title": "软件系统架构是关于软件系统的结构、（ ）和属性的高级抽象。在描述阶段，主要描述直接构成系统的抽象组件以及各个组件之间的连接规则，特别是相对细致地描述组件的（ ）。在实现阶段，这些抽象组件被细化为实际的组件，比如具体类或者对象。软件系统架构不仅指定了软件系统的组织和（请作答此空）结构，而且显示了系统需求和组件之间的对应关系，包括设计决策的基本方法和基本原理。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208510,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件系统架构的基础知识。</p><p>软件系统架构是关于软件系统的结构、行为和属性的高级抽象。在描述阶段，主要描述直接构成系统的抽象组件以及各个组件之间的连接规则，特别是相对细致地描述组件的交互关系。在实现阶段，这些抽象组件被细化为实际的组件，比如具体类或者对象。软件系统架构不仅指定了软件系统的组织和拓扑结构，而且显示了系统需求和组件之间的对应关系，包括设计决策的基本方法和基本原理。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 进程 ",
                        " 拓扑 ",
                        " 处理 ",
                        " 数据 "
                    ]
                },
                {
                    "index": 236,
                    "belong_page": 1,
                    "question_id": 208511,
                    "question_title": "软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。架构风格定义了一类架构所共有的特征，主要包括架构定义、架构词汇表和架构（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208511,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查软件架构风格的定义。软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式。架构风格定义了一类架构所共有的特征，主要包括架构定义、架构词汇表和架构约束。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 描述 ",
                        " 组织&nbsp; ",
                        " 约束 ",
                        " 接口 "
                    ]
                },
                {
                    "index": 237,
                    "belong_page": 1,
                    "question_id": 208512,
                    "question_title": "以下叙述，（ ）不是软件架构的主要作用。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208512,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "本题主要考查软件架构基础知识。软件架构能够在设计变更相对容易的阶段，考虑系统结构的可选方案，便于技术人员与非技术人员就软件设计进行交互，能够展现软件的结构、属性与内部交互关系。但是软件架构与用户对系统的功能性需求没有直接的对应关系。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 在设计变更相对容易的阶段，考虑系统结构的可选方案 ",
                        " 便于技术人员与非技术人员就软件设计进行交互 ",
                        " 展现软件的结构、属性与内部交互关系 ",
                        " 表达系统是否满足用户的功能性需求 "
                    ]
                },
                {
                    "index": 238,
                    "belong_page": 1,
                    "question_id": 208513,
                    "question_title": "特定领域软件架构(Domain Specific Software Achitecture，DSSA.是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA通常是一个具有三个层次的系统模型，包括（请作答此空）环境、领域特定应用开发环境和应用执行环境，其中（ ）主要在领域特定应用开发环境中工作。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208513,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查特定领域软件架构的基础知识。</p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA)是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA通常是一个具有三个层次的系统模型，包括领域开发环境、领域特定应用开发环境和应用执行环境，其中应用工程师主要在领域特定应用开发环境中工作。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 领域需求 ",
                        " 领域开发 ",
                        " 领域执行 ",
                        " 领域应用 "
                    ]
                },
                {
                    "index": 239,
                    "belong_page": 1,
                    "question_id": 208514,
                    "question_title": "特定领域软件架构(Domain Specific Software Achitecture，DSSA.是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA通常是一个具有三个层次的系统模型，包括（ ）环境、领域特定应用开发环境和应用执行环境，其中（请作答此空）主要在领域特定应用开发环境中工作。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208514,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查特定领域软件架构的基础知识。</p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA)是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA通常是一个具有三个层次的系统模型，包括领域开发环境、领域特定应用开发环境和应用执行环境，其中应用工程师主要在领域特定应用开发环境中工作。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 操作员 ",
                        " 领域架构师 ",
                        " 应用工程师 ",
                        " 程序员 "
                    ]
                },
                {
                    "index": 240,
                    "belong_page": 1,
                    "question_id": 208515,
                    "question_title": "<p>“编译器”是一种非常重要的基础软件，其核心功能是对源代码形态的单个或一组源程序依次进行预处理、词法分析、语法分析、语义分析、代码生成、代码优化等处理，最终生成目标机器的可执行代码。考虑以下与编译器相关的软件架构设计场景：</p><p>传统的编译器设计中，上述处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用（请作答此空）架构风格比较合适。</p><p>随着编译、链接、调试、执行等开发过程的一体化趋势发展，集成开发环境(IDE.随之出现。IDE集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，能够实现不同工具之间的信息交互，覆盖整个软件开发生命周期。针对这种需求，IDE采用（ ）架构风格比较合适。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，针对这种需求，通常采用（ ）架构风格比较合适。</p><p>某公司已经开发了一款针对某种嵌入式操作系统专用编程语言的IDE，随着一种新的嵌入式操作系统上市并迅速占领市场，公司决定对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，采用基于（ ）的架构设计策略比较合适；为了模拟新操作系统的运行环境，通常采用（ ）架构风格比较合适。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208515,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件架构风格的理解和掌握。</p><p>根据题干描述，传统的编译器设计中，编译处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用顺序批处理架构风格比较合适，因为在顺序批处理架构风格中，数据以整体的方式在不同的处理模块之间传递，符合题目要求。</p><p>集成开发环境(IDE)需要面对不同的数据结构，不同的数据类型与形态，在这种以数据为核心的系统中，采用数据共享机制显然是最为合适的。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，这一需求的核心在于根据事件进行动作响应，采用隐式调用的架构风格最为合适。</p><p>根据题干描述，公司需要对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，应该是现有操作系统对新系统的一个适配过程，因此应该采用适配器架构设计策略比较合适，模拟新操作系统的运行模式通常会采用虚拟机架构风格。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 管道—过滤器 ",
                        " 顺序批处理 ",
                        " 过程控制 ",
                        " 独立进程 "
                    ]
                },
                {
                    "index": 241,
                    "belong_page": 1,
                    "question_id": 208516,
                    "question_title": "<p>“编译器”是一种非常重要的基础软件，其核心功能是对源代码形态的单个或一组源程序依次进行预处理、词法分析、语法分析、语义分析、代码生成、代码优化等处理，最终生成目标机器的可执行代码。考虑以下与编译器相关的软件架构设计场景：</p><p>传统的编译器设计中，上述处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用（ ）架构风格比较合适。</p><p>随着编译、链接、调试、执行等开发过程的一体化趋势发展，集成开发环境(IDE.随之出现。IDE集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，能够实现不同工具之间的信息交互，覆盖整个软件开发生命周期。针对这种需求，IDE采用（请作答此空）架构风格比较合适。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，针对这种需求，通常采用（ ）架构风格比较合适。</p><p>某公司已经开发了一款针对某种嵌入式操作系统专用编程语言的IDE，随着一种新的嵌入式操作系统上市并迅速占领市场，公司决定对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，采用基于（ ）的架构设计策略比较合适；为了模拟新操作系统的运行环境，通常采用（ ）架构风格比较合适。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208516,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件架构风格的理解和掌握。</p><p>根据题干描述，传统的编译器设计中，编译处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用顺序批处理架构风格比较合适，因为在顺序批处理架构风格中，数据以整体的方式在不同的处理模块之间传递，符合题目要求。</p><p>集成开发环境(IDE)需要面对不同的数据结构，不同的数据类型与形态，在这种以数据为核心的系统中，采用数据共享机制显然是最为合适的。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，这一需求的核心在于根据事件进行动作响应，采用隐式调用的架构风格最为合适。</p><p>根据题干描述，公司需要对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，应该是现有操作系统对新系统的一个适配过程，因此应该采用适配器架构设计策略比较合适，模拟新操作系统的运行模式通常会采用虚拟机架构风格。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 规则引擎 ",
                        " 解释器 ",
                        " 数据共享 ",
                        " 黑板 "
                    ]
                },
                {
                    "index": 242,
                    "belong_page": 1,
                    "question_id": 208517,
                    "question_title": "<p>“编译器”是一种非常重要的基础软件，其核心功能是对源代码形态的单个或一组源程序依次进行预处理、词法分析、语法分析、语义分析、代码生成、代码优化等处理，最终生成目标机器的可执行代码。考虑以下与编译器相关的软件架构设计场景：</p><p>传统的编译器设计中，上述处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用（ ）架构风格比较合适。</p><p>随着编译、链接、调试、执行等开发过程的一体化趋势发展，集成开发环境(IDE.随之出现。IDE集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，能够实现不同工具之间的信息交互，覆盖整个软件开发生命周期。针对这种需求，IDE采用（ ）架构风格比较合适。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，针对这种需求，通常采用（请作答此空）架构风格比较合适。</p><p>某公司已经开发了一款针对某种嵌入式操作系统专用编程语言的IDE，随着一种新的嵌入式操作系统上市并迅速占领市场，公司决定对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，采用基于（ ）的架构设计策略比较合适；为了模拟新操作系统的运行环境，通常采用（ ）架构风格比较合适。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208517,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件架构风格的理解和掌握。</p><p>根据题干描述，传统的编译器设计中，编译处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用顺序批处理架构风格比较合适，因为在顺序批处理架构风格中，数据以整体的方式在不同的处理模块之间传递，符合题目要求。</p><p>集成开发环境(IDE)需要面对不同的数据结构，不同的数据类型与形态，在这种以数据为核心的系统中，采用数据共享机制显然是最为合适的。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，这一需求的核心在于根据事件进行动作响应，采用隐式调用的架构风格最为合适。</p><p>根据题干描述，公司需要对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，应该是现有操作系统对新系统的一个适配过程，因此应该采用适配器架构设计策略比较合适，模拟新操作系统的运行模式通常会采用虚拟机架构风格。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 隐式调用 ",
                        " 显式调用 ",
                        " 主程序一子程序 ",
                        " 层次结构 "
                    ]
                },
                {
                    "index": 243,
                    "belong_page": 1,
                    "question_id": 208518,
                    "question_title": "<p>“编译器”是一种非常重要的基础软件，其核心功能是对源代码形态的单个或一组源程序依次进行预处理、词法分析、语法分析、语义分析、代码生成、代码优化等处理，最终生成目标机器的可执行代码。考虑以下与编译器相关的软件架构设计场景：</p><p>传统的编译器设计中，上述处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用（ ）架构风格比较合适。</p><p>随着编译、链接、调试、执行等开发过程的一体化趋势发展，集成开发环境(IDE.随之出现。IDE集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，能够实现不同工具之间的信息交互，覆盖整个软件开发生命周期。针对这种需求，IDE采用（ ）架构风格比较合适。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，针对这种需求，通常采用（ ）架构风格比较合适。</p><p>某公司已经开发了一款针对某种嵌入式操作系统专用编程语言的IDE，随着一种新的嵌入式操作系统上市并迅速占领市场，公司决定对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，采用基于（请作答此空）的架构设计策略比较合适；为了模拟新操作系统的运行环境，通常采用（ ）架构风格比较合适。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208518,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件架构风格的理解和掌握。</p><p>根据题干描述，传统的编译器设计中，编译处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用顺序批处理架构风格比较合适，因为在顺序批处理架构风格中，数据以整体的方式在不同的处理模块之间传递，符合题目要求。</p><p>集成开发环境(IDE)需要面对不同的数据结构，不同的数据类型与形态，在这种以数据为核心的系统中，采用数据共享机制显然是最为合适的。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，这一需求的核心在于根据事件进行动作响应，采用隐式调用的架构风格最为合适。</p><p>根据题干描述，公司需要对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，应该是现有操作系统对新系统的一个适配过程，因此应该采用适配器架构设计策略比较合适，模拟新操作系统的运行模式通常会采用虚拟机架构风格。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 代理 ",
                        " 适配 ",
                        " 包装 ",
                        " 模拟 "
                    ]
                },
                {
                    "index": 244,
                    "belong_page": 1,
                    "question_id": 208519,
                    "question_title": "<p>“编译器”是一种非常重要的基础软件，其核心功能是对源代码形态的单个或一组源程序依次进行预处理、词法分析、语法分析、语义分析、代码生成、代码优化等处理，最终生成目标机器的可执行代码。考虑以下与编译器相关的软件架构设计场景：</p><p>传统的编译器设计中，上述处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用（ ）架构风格比较合适。</p><p>随着编译、链接、调试、执行等开发过程的一体化趋势发展，集成开发环境(IDE.随之出现。IDE集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，能够实现不同工具之间的信息交互，覆盖整个软件开发生命周期。针对这种需求，IDE采用（ ）架构风格比较合适。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，针对这种需求，通常采用（ ）架构风格比较合适。</p><p>某公司已经开发了一款针对某种嵌入式操作系统专用编程语言的IDE，随着一种新的嵌入式操作系统上市并迅速占领市场，公司决定对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，采用基于（ ）的架构设计策略比较合适；为了模拟新操作系统的运行环境，通常采用（请作答此空）架构风格比较合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208519,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查软件架构风格的理解和掌握。</p><p>根据题干描述，传统的编译器设计中，编译处理过程都以独立功能模块的形式存在，程序源代码作为一个整体，依次在不同模块中进行传递，最终完成编译过程。针对这种设计思路，传统的编译器采用顺序批处理架构风格比较合适，因为在顺序批处理架构风格中，数据以整体的方式在不同的处理模块之间传递，符合题目要求。</p><p>集成开发环境(IDE)需要面对不同的数据结构，不同的数据类型与形态，在这种以数据为核心的系统中，采用数据共享机制显然是最为合适的。IDE强调交互式编程，用户在修改程序代码后，会同时触发语法高亮显示、语法错误提示、程序结构更新等多种功能的调用与结果呈现，这一需求的核心在于根据事件进行动作响应，采用隐式调用的架构风格最为合适。</p><p>根据题干描述，公司需要对IDE进行适应性改造，支持采用现有编程语言进行编程，生成符合新操作系统要求的运行代码，并能够在现有操作系统上模拟出新操作系统的运行环境，以支持代码调试工作。针对上述要求，为了使IDE能够生成符合新操作系统要求的运行代码，应该是现有操作系统对新系统的一个适配过程，因此应该采用适配器架构设计策略比较合适，模拟新操作系统的运行模式通常会采用虚拟机架构风格。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 隐式调用 ",
                        " 仓库结构 ",
                        " 基于规则 ",
                        " 虚拟机 "
                    ]
                },
                {
                    "index": 245,
                    "belong_page": 1,
                    "question_id": 208520,
                    "question_title": "<p>某公司采用基于架构的软件设计(Architecture-Based Software Design，ABSD.方法进行软件设计与开发。ABSD方法有三个基础，分别是对系统进行功能分解、采用（请作答此空）实现质量属性与商业需求、采用软件模板设计软件结构。</p><p>ABSD方法主要包括架构需求等6个主要活动，其中（ ）活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；（ ）活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>小王是该公司的一位新任架构师，在某项目中主要负责架构文档化方面的工作。小王（ ）的做法不符合架构文档化的原则。架构文档化的主要输出结果是架构规格说明书和（ ）。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208520,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查采用基于架构的软件设计的基础知识与应用。</p><p>基于架构的软件设计(Achitecture-Based Software Design，ABSD)方法有三个基础，分别是对系统进行功能分解、采用架构风格实现质量属性与商业需求、采用软件模板设计软件结构。ABSD方法主要包括架构需求等6个主要活动，其中架构复审活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；架构演化活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>软件架构文档应该从使用者的角度进行书写，针对不同背景的人员采用不同的书写方式，并将文档分发给相关人员。架构文档要保持较新，但不要随时保证文档最新，要保持文档的稳定性。架构文档化的主要输出结果是架构规格说明书和架构质量说明书。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 架构风格 ",
                        " 设计模式 ",
                        " 架构策略 ",
                        " 架构描述 "
                    ]
                },
                {
                    "index": 246,
                    "belong_page": 1,
                    "question_id": 208521,
                    "question_title": "<p>某公司采用基于架构的软件设计(Architecture-Based Software Design，ABSD.方法进行软件设计与开发。ABSD方法有三个基础，分别是对系统进行功能分解、采用（ ）实现质量属性与商业需求、采用软件模板设计软件结构。</p><p>ABSD方法主要包括架构需求等6个主要活动，其中（请作答此空）活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；（ ）活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>小王是该公司的一位新任架构师，在某项目中主要负责架构文档化方面的工作。小王（ ）的做法不符合架构文档化的原则。架构文档化的主要输出结果是架构规格说明书和（ ）。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208521,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查采用基于架构的软件设计的基础知识与应用。</p><p>基于架构的软件设计(Achitecture-Based Software Design，ABSD)方法有三个基础，分别是对系统进行功能分解、采用架构风格实现质量属性与商业需求、采用软件模板设计软件结构。ABSD方法主要包括架构需求等6个主要活动，其中架构复审活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；架构演化活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>软件架构文档应该从使用者的角度进行书写，针对不同背景的人员采用不同的书写方式，并将文档分发给相关人员。架构文档要保持较新，但不要随时保证文档最新，要保持文档的稳定性。架构文档化的主要输出结果是架构规格说明书和架构质量说明书。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 架构设计 ",
                        " 架构实现 ",
                        " 架构复审 ",
                        " 架构演化 "
                    ]
                },
                {
                    "index": 247,
                    "belong_page": 1,
                    "question_id": 208522,
                    "question_title": "<p>某公司采用基于架构的软件设计(Architecture-Based Software Design，ABSD.方法进行软件设计与开发。ABSD方法有三个基础，分别是对系统进行功能分解、采用（ ）实现质量属性与商业需求、采用软件模板设计软件结构。</p><p>ABSD方法主要包括架构需求等6个主要活动，其中（ ）活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；（请作答此空）活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>小王是该公司的一位新任架构师，在某项目中主要负责架构文档化方面的工作。小王（ ）的做法不符合架构文档化的原则。架构文档化的主要输出结果是架构规格说明书和（ ）。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208522,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查采用基于架构的软件设计的基础知识与应用。</p><p>基于架构的软件设计(Achitecture-Based Software Design，ABSD)方法有三个基础，分别是对系统进行功能分解、采用架构风格实现质量属性与商业需求、采用软件模板设计软件结构。ABSD方法主要包括架构需求等6个主要活动，其中架构复审活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；架构演化活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>软件架构文档应该从使用者的角度进行书写，针对不同背景的人员采用不同的书写方式，并将文档分发给相关人员。架构文档要保持较新，但不要随时保证文档最新，要保持文档的稳定性。架构文档化的主要输出结果是架构规格说明书和架构质量说明书。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 架构设计 ",
                        " 架构实现 ",
                        " 架构复审 ",
                        " 架构演化 "
                    ]
                },
                {
                    "index": 248,
                    "belong_page": 1,
                    "question_id": 208523,
                    "question_title": "<p>某公司采用基于架构的软件设计(Architecture-Based Software Design，ABSD.方法进行软件设计与开发。ABSD方法有三个基础，分别是对系统进行功能分解、采用（ ）实现质量属性与商业需求、采用软件模板设计软件结构。</p><p>ABSD方法主要包括架构需求等6个主要活动，其中（ ）活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；（ ）活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>小王是该公司的一位新任架构师，在某项目中主要负责架构文档化方面的工作。小王（请作答此空）的做法不符合架构文档化的原则。架构文档化的主要输出结果是架构规格说明书和（ ）。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208523,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查采用基于架构的软件设计的基础知识与应用。</p><p>基于架构的软件设计(Achitecture-Based Software Design，ABSD)方法有三个基础，分别是对系统进行功能分解、采用架构风格实现质量属性与商业需求、采用软件模板设计软件结构。ABSD方法主要包括架构需求等6个主要活动，其中架构复审活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；架构演化活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>软件架构文档应该从使用者的角度进行书写，针对不同背景的人员采用不同的书写方式，并将文档分发给相关人员。架构文档要保持较新，但不要随时保证文档最新，要保持文档的稳定性。架构文档化的主要输出结果是架构规格说明书和架构质量说明书。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 从使用者的角度书写文档 ",
                        " 随时保证文档都是最新的 ",
                        " 将文档分发给相关人员 ",
                        " 针对不同背景的人员书写文档的方式不同 "
                    ]
                },
                {
                    "index": 249,
                    "belong_page": 1,
                    "question_id": 208524,
                    "question_title": "<p>某公司采用基于架构的软件设计(Architecture-Based Software Design，ABSD.方法进行软件设计与开发。ABSD方法有三个基础，分别是对系统进行功能分解、采用（ ）实现质量属性与商业需求、采用软件模板设计软件结构。</p><p>ABSD方法主要包括架构需求等6个主要活动，其中（ ）活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；（ ）活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>小王是该公司的一位新任架构师，在某项目中主要负责架构文档化方面的工作。小王（ ）的做法不符合架构文档化的原则。架构文档化的主要输出结果是架构规格说明书和（请作答此空）。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208524,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查采用基于架构的软件设计的基础知识与应用。</p><p>基于架构的软件设计(Achitecture-Based Software Design，ABSD)方法有三个基础，分别是对系统进行功能分解、采用架构风格实现质量属性与商业需求、采用软件模板设计软件结构。ABSD方法主要包括架构需求等6个主要活动，其中架构复审活动的目标是标识潜在的风险，及早发现架构设计中的缺陷和错误；架构演化活动针对用户的需求变化，修改应用架构，满足新的需求。</p><p>软件架构文档应该从使用者的角度进行书写，针对不同背景的人员采用不同的书写方式，并将文档分发给相关人员。架构文档要保持较新，但不要随时保证文档最新，要保持文档的稳定性。架构文档化的主要输出结果是架构规格说明书和架构质量说明书。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 架构需求说明书 ",
                        " 架构实现说明书 ",
                        " 架构质量说明书 ",
                        " 架构评审说明书 "
                    ]
                },
                {
                    "index": 250,
                    "belong_page": 1,
                    "question_id": 208525,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、（请作答此空）、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以（ ）作为架构评估的核心概念。</p><p>某软件公司采用ATAM进行软件架构评估，在评估过程中识别出了多个关于质量属性的描述。其中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”主要与（ ）质量属性相关；“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”主要与（ ）质量属性相关。在识别出上述描述后，通常采用（ ）对质量属性的描述进行刻画与排序。在评估过程中，（ ）是一个会影响多个质量属性的架构设计决策。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208525,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)的基础知识与应用。</p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以属性作为架构评估的核心概念。题干描述中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”，讨论的是针对使用系统的用户的习惯问题，这与易用性相关。“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”这个描述与系统的可测试性相关。</p><p>在识别出质量属性描述后，通常采用效用树对质量属性的描述进行刻画与排序。在评估过程中，权衡点是一个会影响多个质量属性的架构设计决策。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 可移植性 ",
                        " 可用性 ",
                        " 易用性 "
                    ]
                },
                {
                    "index": 251,
                    "belong_page": 1,
                    "question_id": 208526,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、（请作答此空）描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以（ ）作为架构评估的核心概念。</p><p>某软件公司采用ATAM进行软件架构评估，在评估过程中识别出了多个关于质量属性的描述。其中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”主要与（ ）质量属性相关；“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”主要与（ ）质量属性相关。在识别出上述描述后，通常采用（ ）对质量属性的描述进行刻画与排序。在评估过程中，（ ）是一个会影响多个质量属性的架构设计决策。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208526,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)的基础知识与应用。</p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以属性作为架构评估的核心概念。题干描述中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”，讨论的是针对使用系统的用户的习惯问题，这与易用性相关。“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”这个描述与系统的可测试性相关。</p><p>在识别出质量属性描述后，通常采用效用树对质量属性的描述进行刻画与排序。在评估过程中，权衡点是一个会影响多个质量属性的架构设计决策。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 架构视图 ",
                        " 架构排序 ",
                        " 架构风格 ",
                        " 架构策略 "
                    ]
                },
                {
                    "index": 252,
                    "belong_page": 1,
                    "question_id": 208527,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以（请作答此空）作为架构评估的核心概念。</p><p>某软件公司采用ATAM进行软件架构评估，在评估过程中识别出了多个关于质量属性的描述。其中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”主要与（ ）质量属性相关；“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”主要与（ ）质量属性相关。在识别出上述描述后，通常采用（ ）对质量属性的描述进行刻画与排序。在评估过程中，（ ）是一个会影响多个质量属性的架构设计决策。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208527,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)的基础知识与应用。</p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以属性作为架构评估的核心概念。题干描述中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”，讨论的是针对使用系统的用户的习惯问题，这与易用性相关。“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”这个描述与系统的可测试性相关。</p><p>在识别出质量属性描述后，通常采用效用树对质量属性的描述进行刻画与排序。在评估过程中，权衡点是一个会影响多个质量属性的架构设计决策。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 用例 ",
                        " 视图 ",
                        " 属性 ",
                        " 模型 "
                    ]
                },
                {
                    "index": 253,
                    "belong_page": 1,
                    "question_id": 208528,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以（ ）作为架构评估的核心概念。</p><p>某软件公司采用ATAM进行软件架构评估，在评估过程中识别出了多个关于质量属性的描述。其中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”主要与（请作答此空）质量属性相关；“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”主要与（ ）质量属性相关。在识别出上述描述后，通常采用（ ）对质量属性的描述进行刻画与排序。在评估过程中，（ ）是一个会影响多个质量属性的架构设计决策。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208528,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)的基础知识与应用。</p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以属性作为架构评估的核心概念。题干描述中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”，讨论的是针对使用系统的用户的习惯问题，这与易用性相关。“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”这个描述与系统的可测试性相关。</p><p>在识别出质量属性描述后，通常采用效用树对质量属性的描述进行刻画与排序。在评估过程中，权衡点是一个会影响多个质量属性的架构设计决策。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 互操作性 ",
                        " 可移植性 ",
                        " 易用性 "
                    ]
                },
                {
                    "index": 254,
                    "belong_page": 1,
                    "question_id": 208529,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以（ ）作为架构评估的核心概念。</p><p>某软件公司采用ATAM进行软件架构评估，在评估过程中识别出了多个关于质量属性的描述。其中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”主要与（ ）质量属性相关；“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”主要与（请作答此空）质量属性相关。在识别出上述描述后，通常采用（ ）对质量属性的描述进行刻画与排序。在评估过程中，（ ）是一个会影响多个质量属性的架构设计决策。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208529,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)的基础知识与应用。</p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以属性作为架构评估的核心概念。题干描述中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”，讨论的是针对使用系统的用户的习惯问题，这与易用性相关。“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”这个描述与系统的可测试性相关。</p><p>在识别出质量属性描述后，通常采用效用树对质量属性的描述进行刻画与排序。在评估过程中，权衡点是一个会影响多个质量属性的架构设计决策。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 互操作性 ",
                        " 可移植性 ",
                        " 易用性 "
                    ]
                },
                {
                    "index": 255,
                    "belong_page": 1,
                    "question_id": 208530,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以（ ）作为架构评估的核心概念。</p><p>某软件公司采用ATAM进行软件架构评估，在评估过程中识别出了多个关于质量属性的描述。其中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”主要与（ ）质量属性相关；“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”主要与（ ）质量属性相关。在识别出上述描述后，通常采用（请作答此空）对质量属性的描述进行刻画与排序。在评估过程中，（ ）是一个会影响多个质量属性的架构设计决策。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208530,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)的基础知识与应用。</p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以属性作为架构评估的核心概念。题干描述中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”，讨论的是针对使用系统的用户的习惯问题，这与易用性相关。“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”这个描述与系统的可测试性相关。</p><p>在识别出质量属性描述后，通常采用效用树对质量属性的描述进行刻画与排序。在评估过程中，权衡点是一个会影响多个质量属性的架构设计决策。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 期望管理矩阵 ",
                        " 决策表 ",
                        " 优先队列 ",
                        " 效用树 "
                    ]
                },
                {
                    "index": 256,
                    "belong_page": 1,
                    "question_id": 208531,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以（ ）作为架构评估的核心概念。</p><p>某软件公司采用ATAM进行软件架构评估，在评估过程中识别出了多个关于质量属性的描述。其中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”主要与（ ）质量属性相关；“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”主要与（ ）质量属性相关。在识别出上述描述后，通常采用（ ）对质量属性的描述进行刻画与排序。在评估过程中，（请作答此空）是一个会影响多个质量属性的架构设计决策。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 208531,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)的基础知识与应用。</p><p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性模型构造和分析、架构决策与折中，整个评估过程强调以属性作为架构评估的核心概念。题干描述中，“系统在进行文件保存操作时，应该与Windows系统的操作方式保持一致”，讨论的是针对使用系统的用户的习惯问题，这与易用性相关。“系统应该提供一个开放的API接口，支持远程对系统的行为进行控制与调试”这个描述与系统的可测试性相关。</p><p>在识别出质量属性描述后，通常采用效用树对质量属性的描述进行刻画与排序。在评估过程中，权衡点是一个会影响多个质量属性的架构设计决策。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 风险点 ",
                        " 决策点 ",
                        " 权衡点 ",
                        " 敏感点 "
                    ]
                },
                {
                    "index": 257,
                    "belong_page": 1,
                    "question_id": 281331,
                    "question_title": "<p>分布性问题强调系统或系统中构件在一个分布的环境中相互通信的方式。解决分布性问题最普通的设计模式是（），CORBA是其一个范例。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281331,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>分布性问题强调系统或系统中构件在一个分布的环境中相互通信的方式。分布性问题有两个元素：①实体间连接方式；②实体间通信的特性。解决分布性问题最普通的体系结构模式是代理(Proxy)模式。CORBA是代理模式的一个范例。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " Observer模式 ",
                        " Iterator模式 ",
                        " Proxy模式 ",
                        " Builder模式 "
                    ]
                },
                {
                    "index": 258,
                    "belong_page": 1,
                    "question_id": 281333,
                    "question_title": "<p>某软件公司现欲开发一款飞机飞行模拟系统，用于模拟不同种类飞机的飞行特征与起飞特征。为支持将来模拟更多种类的飞机，采用______设计的类图如下图所示。在图中，类AirCraft描述了抽象的飞机，类FlyBehavior与TakeOffBehavior分别用于表示抽象的飞行行为与起飞行为，类SubSonicFly与SuperSonicFly分别描述亚音速飞行和超音速飞行的行为，类VerticalTakeOff与LongDistanceTakeOff分别描述垂直起飞与长距离起飞的行为。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200912/1599884827483960.jpg\" title=\"1599884827483960.jpg\" alt=\"1.jpg\"/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281333,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>Strategy(策略)模式的设计意图是使得算法可独立于使用它的客户而变化。依题意，为支持将来模拟更多种类的飞机，该飞机飞行模拟系统采用策略设计模式(Strategy)设计的类图如图所示。在图中，AirCraft为抽象类，描述了抽象的飞机，而类Helicopter、AirPlane、Fighter和Harrier分别描述具体的飞机种类，方法fly()和takeOff()分别表示不同飞机都具有的飞行特征和起飞特征；类FlyBehavior与TakeOffBehavior为抽象类，分别用于表示抽象的飞行行为与起飞行为；类SubSonicFly与SuperSonicFly分别描述亚音速飞行和超音速飞行的行为；类VerticalTakeOff与LongDistanceTakeOff分别描述垂直起飞与长距离起飞的行为。</p><p>Bridge(桥接)模式的设计意图是将抽象部分与现实部分分离，使得它们的两部分可以独立地变化。</p><p>Composite(组合)模式的设计意图是将对象组合成树型结构以表示“部分—整体”的层次结构。</p><p>Observer(观察者)模式的设计意图是定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知并被自动更新。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " Bridge模式 ",
                        " Composite模式 ",
                        " Observer模式 ",
                        " Strategy模式 "
                    ]
                },
                {
                    "index": 259,
                    "belong_page": 1,
                    "question_id": 281335,
                    "question_title": "<p><br/></p><p>如下图所示的UML类图描绘的是设计模式中的（ &nbsp;）模式。如第二个图所示的UML类图描述了该模式的一种应用，其中与第一个图中的“Abstraction”对应的类是（ &nbsp;）。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200912/1599884972554701.jpg\" title=\"1599884972554701.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281334,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>如图所示的UML类图描绘的是设计模式中的Bridge(桥接)模式，它将抽象部分与现实部分分离，使得它们两部分可以独立地变化。其中，类Abstraction是一个抽象类，用于定义抽象类的接口，维护一个AbstractionImpl(实现抽象类)的对象。在图所描述的应用中，与类Abstraction相对应的是类DataAccess。</p><p>&nbsp;Command(命令)模式的设计意图是，将一个请求封装为一个对象，从而使用户可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>Composite(组合)模式的设计意图是，将对象组合成树型结构以表示“部分—整体”的层次结构。</p><p>Proxy(代理)模式的设计意图是，为其他对象提供一种代理以控制对这个对象的访问。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "Composite(组合)",
                        "Proxy(代理)",
                        "Bridge(桥接)",
                        "Command(命令)"
                    ]
                },
                {
                    "index": 260,
                    "belong_page": 1,
                    "question_id": 281336,
                    "question_title": "<p><br/></p><p>如下图所示的UML类图描绘的是设计模式中的（ &nbsp;）模式。如第二个图所示的UML类图描述了该模式的一种应用，其中与第一个图中的“Abstraction”对应的类是（ &nbsp;）。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20200912/1599884972554701.jpg\" title=\"1599884972554701.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281334,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>如图所示的UML类图描绘的是设计模式中的Bridge(桥接)模式，它将抽象部分与现实部分分离，使得它们两部分可以独立地变化。其中，类Abstraction是一个抽象类，用于定义抽象类的接口，维护一个AbstractionImpl(实现抽象类)的对象。在图所描述的应用中，与类Abstraction相对应的是类DataAccess。</p><p>&nbsp;Command(命令)模式的设计意图是，将一个请求封装为一个对象，从而使用户可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>Composite(组合)模式的设计意图是，将对象组合成树型结构以表示“部分—整体”的层次结构。</p><p>Proxy(代理)模式的设计意图是，为其他对象提供一种代理以控制对这个对象的访问。<span style=\"font-size: 16px;\"></span></p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "DataAccess",
                        "AccountDM",
                        "CustomerDM",
                        "DataAccessImpl"
                    ]
                },
                {
                    "index": 261,
                    "belong_page": 1,
                    "question_id": 281337,
                    "question_title": "<p>某面向对象系统中的文本显示类(TextView)和图片显示类(PictureView)都继承了组件类(Component)，分别显示文本和图片内容，现需要构造带有滚动条、带有黑色边框或者既有滚动条又有黑色边框的文本显示控件和图片显示控件，但希望最多只增加3个类，______设计模式可以实现该目的。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 281337,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>外观(Facade)模式的设计意图是：为子系统中的一组功能调用提供一个一致的接口，这个接口使得这一子系统更加容易使用。</p><p>装饰(Decorate)模式的设计意图是：当不能采用生成子类的方法进行扩充时，动态地给一个对象添加一些额外的功能。</p><p>单例(Singleton)模式的设计意图是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>模板方法(Template Method)模式的设计意图是：在方法中定义算法的框架，而将算法中的一些操作步骤延迟到子类中实现。</p><p>本试题所给出的场景限定了能够增加的类的数量。可以通过新增加三个类，分别继承组件类并实现给组件增加黑色边框、滚动条以及增加黑色边框和滚动条功能，由于文本显示类和图片显示类都属于组件类，因此新增加的三个类能够给文本显示对象和图片显示对象增加额外的显示功能，该实现手段采用的就是装饰(Decorate)模式。<span style=\"font-size: 16px;\"></span></p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 外观(Facade) ",
                        " 装饰(Decorate) ",
                        " 单例(Singleton) ",
                        " 模板方法(Template Method) "
                    ]
                },
                {
                    "index": 262,
                    "belong_page": 1,
                    "question_id": 284643,
                    "question_title": "<p>UML的事物是对模型中最具有代表性的成分的抽象，（5）是模型的静态部分，描述概念或物理元素；（6）用来描述、说明和标注模型的任何元素。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284642,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>UML中有4种事物:</p><p>1、结构事物是UML模型中的名词。它们通常是模型的静态部分,描述概念或物理元素；</p><p>2、行为事物是UML模型的动态部分。它们是模型中的动词,描述了跨越时间和空间的行为；</p><p>3、分组事物是UML模型的组仅部分。它们是—些由模型分解成的盒子；</p><p>4、注释事物是UML模型的解释部分。这些注释事物用来描述、说明和标注模型的任何元素。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "结构事物",
                        "分组事物",
                        "行为事物",
                        "注释事物"
                    ]
                },
                {
                    "index": 263,
                    "belong_page": 1,
                    "question_id": 284644,
                    "question_title": "<p>UML的事物是对模型中最具有代表性的成分的抽象，（5）是模型的静态部分，描述概念或物理元素；（6）用来描述、说明和标注模型的任何元素。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284642,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>UML中有4种事物:</p><p>1、结构事物是UML模型中的名词。它们通常是模型的静态部分,描述概念或物理元素；</p><p>2、行为事物是UML模型的动态部分。它们是模型中的动词,描述了跨越时间和空间的行为；</p><p>3、分组事物是UML模型的组仅部分。它们是—些由模型分解成的盒子；</p><p>4、注释事物是UML模型的解释部分。这些注释事物用来描述、说明和标注模型的任何元素。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "分组事物",
                        "注释事物",
                        "结构事物",
                        "行为事物"
                    ]
                },
                {
                    "index": 264,
                    "belong_page": 1,
                    "question_id": 284646,
                    "question_title": "<p>UML用关系把事物结合在一起，（7）描述一个事物发生变化会影响另一个事物的语义；（8）描述特殊元素的对象可替换一般元素的对象。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284645,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>UML中有4种关系：</p><p>1、依赖是两个事物间的语义关系，其中一个事物（独立事物）发生变化会影响另一个事物（依赖事物）的语义；</p><p>2、关联是一种结构关系，描述了一组链，链式对象之间的连接，聚合是一种特殊类型的关联，描述整体与部分间的结构关系；</p><p>3、泛化是一种特殊一般关系，特殊元素的对象可替代一般元素的对象；</p><p>4、实现是类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "聚合关系",
                        "关联关系",
                        "包含关系",
                        "依赖关系"
                    ]
                },
                {
                    "index": 265,
                    "belong_page": 1,
                    "question_id": 284647,
                    "question_title": "<p>UML用关系把事物结合在一起，（7）描述一个事物发生变化会影响另一个事物的语义；（8）描述特殊元素的对象可替换一般元素的对象。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284645,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>UML中有4种关系：</p><p>1、依赖是两个事物间的语义关系，其中一个事物（独立事物）发生变化会影响另一个事物（依赖事物）的语义；</p><p>2、关联是一种结构关系，描述了一组链，链式对象之间的连接，聚合是一种特殊类型的关联，描述整体与部分间的结构关系；</p><p>3、泛化是一种特殊一般关系，特殊元素的对象可替代一般元素的对象；</p><p>4、实现是类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "实现关系",
                        "聚合关系",
                        "泛化关系",
                        "关联关系"
                    ]
                },
                {
                    "index": 266,
                    "belong_page": 1,
                    "question_id": 284687,
                    "question_title": "<p>某软件公司欲开发一个Windows平台上的公告板系统。在明确用户需求后，该公司的架构师决定采用Command模式实现该系统的界面显示部分，并设计UML类图如下图所示。图中与Command模式中的“Invoker”角色相对应的类是（39），与“Concrete Command”角色相对应的类是（40）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20201014/1602644281756125.jpg\" title=\"1602644281756125.jpg\" alt=\"1.jpg\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284686,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>Command(命令)模式是设计模式中行为模式的一种，它将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。Command模式也支持可撤销的操作。Command模式的类图如下所示。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20201014/1602644310541736.jpg\" title=\"1602644310541736.jpg\" alt=\"1.jpg\"/></p><p>对于题目所给出的图，与“Invoker”角色相对应的类是MenuItem，与“Concrete Command”角色相对应的类是Open。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "Command",
                        "MenuItem",
                        "Open",
                        "BulktinBoardScreen"
                    ]
                },
                {
                    "index": 267,
                    "belong_page": 1,
                    "question_id": 284688,
                    "question_title": "<p>某软件公司欲开发一个Windows平台上的公告板系统。在明确用户需求后，该公司的架构师决定采用Command模式实现该系统的界面显示部分，并设计UML类图如下图所示。图中与Command模式中的“Invoker”角色相对应的类是（39），与“Concrete Command”角色相对应的类是（40）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20201014/1602644281756125.jpg\" title=\"1602644281756125.jpg\" alt=\"1.jpg\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284686,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>Command(命令)模式是设计模式中行为模式的一种，它将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。Command模式也支持可撤销的操作。Command模式的类图如下所示。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20201014/1602644327567261.jpg\" title=\"1602644327567261.jpg\" alt=\"1.jpg\"/></p><p>对于题目所给出的图，与“Invoker”角色相对应的类是MenuItem，与“Concrete Command”角色相对应的类是Open。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "Command",
                        "MenuItem",
                        "Open",
                        "BulktinBoardScreen"
                    ]
                },
                {
                    "index": 268,
                    "belong_page": 1,
                    "question_id": 284690,
                    "question_title": "<p>如下图所示的UML类图描绘的是设计模式中的（41）模式。如第二个图所示的UML类图描述了该模式的一种应用，其中与第一个图中的“Abstraction”对应的类是（42）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20201014/1602644363183181.jpg\" title=\"1602644363183181.jpg\" alt=\"1.jpg\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284689,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>如图所示的UML类图描绘的是设计模式中的Bridge(桥接)模式，它将抽象部分与现实部分分离，使得它们两部分可以独立地变化。其中，类Abstraction是一个抽象类，用于定义抽象类的接口，维护一个AbstractionImpl(实现抽象类)的对象。在图所描述的应用中，与类Abstraction相对应的是类DataAccess。</p><p>Command(命令)模式的设计意图是，将一个请求封装为一个对象，从而使用户可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>Composite(组合)模式的设计意图是，将对象组合成树型结构以表示“部分—整体”的层次结构。</p><p>Proxy(代理)模式的设计意图是，为其他对象提供一种代理以控制对这个对象的访问。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "Composite(组合)",
                        "Proxy(代理)",
                        "Bridge(桥接)",
                        "Command(命令)"
                    ]
                },
                {
                    "index": 269,
                    "belong_page": 1,
                    "question_id": 284691,
                    "question_title": "<p>如下图所示的UML类图描绘的是设计模式中的（41）模式。如第二个图所示的UML类图描述了该模式的一种应用，其中与第一个图中的“Abstraction”对应的类是（42）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20201014/1602644363183181.jpg\" title=\"1602644363183181.jpg\" alt=\"1.jpg\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284689,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>如图所示的UML类图描绘的是设计模式中的Bridge(桥接)模式，它将抽象部分与现实部分分离，使得它们两部分可以独立地变化。其中，类Abstraction是一个抽象类，用于定义抽象类的接口，维护一个AbstractionImpl(实现抽象类)的对象。在图所描述的应用中，与类Abstraction相对应的是类DataAccess。</p><p>Command(命令)模式的设计意图是，将一个请求封装为一个对象，从而使用户可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>Composite(组合)模式的设计意图是，将对象组合成树型结构以表示“部分—整体”的层次结构。</p><p>Proxy(代理)模式的设计意图是，为其他对象提供一种代理以控制对这个对象的访问。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "DataAccess",
                        "AccountDM",
                        "CustomerDM",
                        "DataAccessImp"
                    ]
                },
                {
                    "index": 270,
                    "belong_page": 1,
                    "question_id": 284692,
                    "question_title": "<p>某面向对象系统中的文本显示类(TextView)和图片显示类(PictureView)都继承了组件类(Component)，分别显示文本和图片内容，现需要构造带有滚动条、带有黑色边框或者既有滚动条又有黑色边框的文本显示控件和图片显示控件，但希望最多只增加3个类，_____设计模式可以实现该目的。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 284692,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>外观(Facade)模式的设计意图是：为子系统中的一组功能调用提供一个一致的接口，这个接口使得这一子系统更加容易使用。</p><p>装饰(Decorate)模式的设计意图是：当不能采用生成子类的方法进行扩充时，动态地给一个对象添加一些额外的功能。</p><p>单例(Singleton)模式的设计意图是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>模板方法(Template Method)模式的设计意图是：在方法中定义算法的框架，而将算法中的一些操作步骤延迟到子类中实现。</p><p>本试题所给出的场景限定了能够增加的类的数量。可以通过新增加三个类，分别继承组件类并实现给组件增加黑色边框、滚动条以及增加黑色边框和滚动条功能，由于文本显示类和图片显示类都属于组件类，因此新增加的三个类能够给文本显示对象和图片显示对象增加额外的显示功能，该实现手段采用的就是装饰(Decorate)模式。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 外观(Facade) ",
                        " 装饰(Decorate) ",
                        " 单例(Singleton) ",
                        " 模板方法(Template Method) "
                    ]
                },
                {
                    "index": 271,
                    "belong_page": 1,
                    "question_id": 303681,
                    "question_title": "<p>一个完整的软件系统需从不同视角进行描述，下图属于软件架构设计中的 （44） ，用于 （45）视图来描述软件系统。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518457876398.jpg\" title=\"1626518457876398.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303680,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "软件系统需从不同的角度进行描述。其著名的 4+1 视角架构模型(The &quot;4+1&quot; View Model of Software Architecture)提出了一种用来描述软件系统体系架构的模型，这种模型是基于使用者的多个不同视角出发。这种多视角能够解决多个“利益相关者”关心的问题。利益相关者包括最终用户、开发人员、系统工程师、项目经理等，他们能够分别处理功能性和非功能性需求。4+1视角架构模型的五个主要的视角为逻辑视图、开发视图、处理视图、物理视图和场景。其中逻辑视图通常包括类图，对象图，状态图和协作图。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "对象图",
                        "时序图",
                        "构件图",
                        "类图"
                    ]
                },
                {
                    "index": 272,
                    "belong_page": 1,
                    "question_id": 303682,
                    "question_title": "<p>一个完整的软件系统需从不同视角进行描述，下图属于软件架构设计中的 （44） ，用于 （45）视图来描述软件系统。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518457876398.jpg\" title=\"1626518457876398.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 303680,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "软件系统需从不同的角度进行描述。其著名的 4+1 视角架构模型(The &quot;4+1&quot; View Model of Software Architecture)提出了一种用来描述软件系统体系架构的模型，这种模型是基于使用者的多个不同视角出发。这种多视角能够解决多个“利益相关者”关心的问题。利益相关者包括最终用户、开发人员、系统工程师、项目经理等，他们能够分别处理功能性和非功能性需求。4+1视角架构模型的五个主要的视角为逻辑视图、开发视图、处理视图、物理视图和场景。其中逻辑视图通常包括类图，对象图，状态图和协作图。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "进程",
                        "逻辑",
                        "物理",
                        "用户"
                    ]
                },
                {
                    "index": 273,
                    "belong_page": 1,
                    "question_id": 310842,
                    "question_title": "特定领或软件架构（DSSA)是在一个特定应用领域为—组应用提供组织结构参考的标准软件架构。实施DSSA的过程中包括一系列基本的活动,其中（14)活动的主要目的是为了获得DSSA.该活动参加人员中,（15）的主要任务是提供关于领城中系统的需求规约和实现的知识。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310841,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "本主要考查待定领域软件架构的基本定义和基本活动。特定领件架构(0SSA)是在一个特定应用领域为—组应用提供组织结构参考的标佳软件架构。实施DSSA的过程中包括—系列基本的活动其中领城设计活动的主要目的是为了获得DSSA。该活动参加人员中,领城专家的主要任务是提供关于领城中系统的需求规约和实现的知识",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "领域需求",
                        "领域分析",
                        "领域设计",
                        "领城实现"
                    ]
                },
                {
                    "index": 274,
                    "belong_page": 1,
                    "question_id": 310843,
                    "question_title": "特定领或软件架构（DSSA)是在一个特定应用领域为—组应用提供组织结构参考的标准软件架构。实施DSSA的过程中包括一系列基本的活动,其中（14)活动的主要目的是为了获得DSSA.该活动参加人员中,（15）的主要任务是提供关于领城中系统的需求规约和实现的知识。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310841,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "本主要考查待定领域软件架构的基本定义和基本活动。特定领件架构(0SSA)是在一个特定应用领域为—组应用提供组织结构参考的标佳软件架构。实施DSSA的过程中包括—系列基本的活动其中领城设计活动的主要目的是为了获得DSSA。该活动参加人员中,领城专家的主要任务是提供关于领城中系统的需求规约和实现的知识",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "领域专家",
                        "领域分析者",
                        "领域设计者",
                        "领城实现者"
                    ]
                },
                {
                    "index": 275,
                    "belong_page": 1,
                    "question_id": 310857,
                    "question_title": "某服务器软件系统对可用性（Availability）和性能（Performance）要求较高，（ &nbsp;）设计策略能提高该系统的可用性，（ &nbsp;）设计策略能够提高该系统的性能。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310856,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "软件质量属性描述了软件的非功能性属性。可用性质量属性描述了可用性是系统能够正常运行的时间比例，实现可用性策略的主要方法有错误检测、错误恢复和错误防御。主动冗余就是一种错误恢复的策略。性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。队列调度是一种提升系统性能的常用方法。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "限制访问",
                        "内置监控器",
                        "主动冗余",
                        "队列调度"
                    ]
                },
                {
                    "index": 276,
                    "belong_page": 1,
                    "question_id": 310858,
                    "question_title": "某服务器软件系统对可用性（Availability）和性能（Performance）要求较高，（ &nbsp;）设计策略能提高该系统的可用性，（ &nbsp;）设计策略能够提高该系统的性能。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310856,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "软件质量属性描述了软件的非功能性属性。可用性质量属性描述了可用性是系统能够正常运行的时间比例，实现可用性策略的主要方法有错误检测、错误恢复和错误防御。主动冗余就是一种错误恢复的策略。性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。队列调度是一种提升系统性能的常用方法。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "内置监控器",
                        "限制访问",
                        "主动冗余",
                        "队列调度"
                    ]
                },
                {
                    "index": 277,
                    "belong_page": 1,
                    "question_id": 310861,
                    "question_title": "软件的质量属性是衡量软件非功能性需求的重要因素。可用性质量属性主要关注软件系统的故障和它所带来的后果。（29）是能够提高系统可用性的措施。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310861,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "软件的质量属性是衡量软件非功能性需求的重要因素。可用性质量属性主要关注软件系统的故障和它所带来的后果。一般情况下,可以采用Ping/Echo,心跳和异常等措施进行错误检测,因此本题应该选A.",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "心跳检测",
                        "模块的抽象化",
                        "用户授权",
                        "记录/重放"
                    ]
                },
                {
                    "index": 278,
                    "belong_page": 1,
                    "question_id": 310866,
                    "question_title": "<p>股票交易中，股票代理（Broker）根据客户发出的股票操作指示进行股票的买卖操作，设计如下所示类图。该设计采用 （32） 模式将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。其中， （33） 声明执行操作的接口。该模式属于 （34） 模式，该模式适用于： （35） 。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210924/1632412892310507.jpg\" title=\"1632412892310507.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310865,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>命令模式：将一个请求封装成一个对象，从而使得用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>观察者模式：观察者模式定义了对象间的一种一对多依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p><p>状态模式：对于对象内部的状态，允许其在不同的状态下，拥有不同的行为，对状态单独封装成类。</p><p>中介者模式：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>根据类图，Operation是声明执行操作的接口，它有三个子类分别实现买股票、卖股票、查看股票的操作。</p><p>命令模式是行为型对象模式，它抽象出待执行的动作以参数化某对象。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "命令（Command）&nbsp;",
                        "观察者（Observer）",
                        "状态（State）",
                        "中介者（Mediator）"
                    ]
                },
                {
                    "index": 279,
                    "belong_page": 1,
                    "question_id": 310867,
                    "question_title": "<p>股票交易中，股票代理（Broker）根据客户发出的股票操作指示进行股票的买卖操作，设计如下所示类图。该设计采用 （32） 模式将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。其中， （33） 声明执行操作的接口。该模式属于 （34） 模式，该模式适用于： （35） 。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210924/1632412892310507.jpg\" title=\"1632412892310507.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310865,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>命令模式：将一个请求封装成一个对象，从而使得用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>观察者模式：观察者模式定义了对象间的一种一对多依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p><p>状态模式：对于对象内部的状态，允许其在不同的状态下，拥有不同的行为，对状态单独封装成类。</p><p>中介者模式：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>根据类图，Operation是声明执行操作的接口，它有三个子类分别实现买股票、卖股票、查看股票的操作。</p><p>命令模式是行为型对象模式，它抽象出待执行的动作以参数化某对象。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "Operation",
                        "SellOperation/BuyOperation/ViewOperation",
                        "Broker",
                        "Stock"
                    ]
                },
                {
                    "index": 280,
                    "belong_page": 1,
                    "question_id": 310868,
                    "question_title": "<p>股票交易中，股票代理（Broker）根据客户发出的股票操作指示进行股票的买卖操作，设计如下所示类图。该设计采用 （32） 模式将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。其中， （33） 声明执行操作的接口。该模式属于 （34） 模式，该模式适用于： （35） 。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210924/1632412892310507.jpg\" title=\"1632412892310507.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310865,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>命令模式：将一个请求封装成一个对象，从而使得用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>观察者模式：观察者模式定义了对象间的一种一对多依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p><p>状态模式：对于对象内部的状态，允许其在不同的状态下，拥有不同的行为，对状态单独封装成类。</p><p>中介者模式：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>根据类图，Operation是声明执行操作的接口，它有三个子类分别实现买股票、卖股票、查看股票的操作。</p><p>命令模式是行为型对象模式，它抽象出待执行的动作以参数化某对象。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "结构型类",
                        "结构型对象",
                        "创建型类",
                        "行为型对象"
                    ]
                },
                {
                    "index": 281,
                    "belong_page": 1,
                    "question_id": 310869,
                    "question_title": "<p>股票交易中，股票代理（Broker）根据客户发出的股票操作指示进行股票的买卖操作，设计如下所示类图。该设计采用 （32） 模式将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。其中， （33） 声明执行操作的接口。该模式属于 （34） 模式，该模式适用于： （35） 。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210924/1632412892310507.jpg\" title=\"1632412892310507.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310865,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>命令模式：将一个请求封装成一个对象，从而使得用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><p>观察者模式：观察者模式定义了对象间的一种一对多依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p><p>状态模式：对于对象内部的状态，允许其在不同的状态下，拥有不同的行为，对状态单独封装成类。</p><p>中介者模式：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>根据类图，Operation是声明执行操作的接口，它有三个子类分别实现买股票、卖股票、查看股票的操作。</p><p>命令模式是行为型对象模式，它抽象出待执行的动作以参数化某对象。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "一个对象必须通知其他对象，而它又不能假定其他对象是谁",
                        "抽象出待执行的动作以参数化某对象",
                        "一个对象的行为决定于其状态且必须在运行时刻根据状态改变行为",
                        "一个对象引用其他对象并且直接与这些对象通信而导致难以复用该对象"
                    ]
                },
                {
                    "index": 282,
                    "belong_page": 1,
                    "question_id": 310880,
                    "question_title": "PH系统集成开发公司决定采用基于架构的软件开发方法，以架构为核心对近期所承接的某电子商务企业的在线交易平台进行设计与实现。该电子商务企业要求在线交易平台必须在800 ms内完成客户的交易请求。该电子商务企业所提要求主要对应于______这一软件质量属性，实现并提高该质量属性的架构设计策略不包括______。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310879,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>性能(Performance)是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。它是常见的软件质量属性之一。</p><p>在线交易平台必须在1s内完成客户的交易请求。该要求主要对应性能，可以采用的架构设计策略有：①增加可用资源(更快的处理器、多处理器、更大的内存，以及速度更快的网络等)；②改善资源需求(减少计算复杂度、优化各个进程的内存和CPU占用率等)；③资源管理(并发、数据复制等)；④资源调度(先进先出队列、固定优先级调度队列等)等。</p><p>设置进程监视器是实现“可用性”质量属性的一种架构设计策略。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "可用性",
                        "易用性",
                        "安全性",
                        "性能"
                    ]
                },
                {
                    "index": 283,
                    "belong_page": 1,
                    "question_id": 310881,
                    "question_title": "PH系统集成开发公司决定采用基于架构的软件开发方法，以架构为核心对近期所承接的某电子商务企业的在线交易平台进行设计与实现。该电子商务企业要求在线交易平台必须在800 ms内完成客户的交易请求。该电子商务企业所提要求主要对应于______这一软件质量属性，实现并提高该质量属性的架构设计策略不包括______。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310879,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>性能(Performance)是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。它是常见的软件质量属性之一。</p><p>在线交易平台必须在1s内完成客户的交易请求。该要求主要对应性能，可以采用的架构设计策略有：①增加可用资源(更快的处理器、多处理器、更大的内存，以及速度更快的网络等)；②改善资源需求(减少计算复杂度、优化各个进程的内存和CPU占用率等)；③资源管理(并发、数据复制等)；④资源调度(先进先出队列、固定优先级调度队列等)等。</p><p>设置进程监视器是实现“可用性”质量属性的一种架构设计策略。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "采用优先级调度队列",
                        "引入并发处理",
                        "优化相关进程的CPU占用率",
                        "设置进程监视器"
                    ]
                },
                {
                    "index": 284,
                    "belong_page": 1,
                    "question_id": 310882,
                    "question_title": "软件架构为软件系统提供了一个结构、行为和属性的高级抽象模式。“4+1”视图模型是指用5个视图组成的模型来描述软件架构。其中，______描述了设计的并发和同步特征，支持系统的运行特性。&nbsp;",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310882,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>“4+1”视图模型用5个视图组成的模型来描述软件架构。该模型包含5个主要视图及其实现的功能，如下表所示。</p><p>“4+1”视图及其功能表</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210924/1632413351604001.jpg\" title=\"1632413351604001.jpg\" alt=\"1.jpg\"/>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "物理视图",
                        "逻辑视图",
                        "进程视图",
                        "开发视图"
                    ]
                },
                {
                    "index": 285,
                    "belong_page": 1,
                    "question_id": 310883,
                    "question_title": "某服务器软件系统能够正确运行并得出计算结果，但存在“系统出错后不能在要求的时间内恢复到正常状态”和“对系统进行二次开发时总要超过半年的时间”两个问题，上述问题依次与质量属性中的（）相关。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310883,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "“系统出错后不能在要求的时间内恢复到正常状态”，这是对系统错误恢复能力的描述，属于系统可用性的范畴。“对系统进行二次开发时总要超过半年的时间”，这是对系统进行调整和维护方面能力的描述，属于系统可修改性的范畴。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "可用性和性能",
                        "性能和可修改性",
                        "性能和可测试性",
                        "可用性和可修改性"
                    ]
                },
                {
                    "index": 286,
                    "belong_page": 1,
                    "question_id": 310885,
                    "question_title": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的()特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用()架构风格。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310884,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的结构和语义两个方面的特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用黑板架构风格，以知识为中心进行分析与推理。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "语法和语义",
                        "结构和语义",
                        "静态和动态",
                        "行为和约束"
                    ]
                },
                {
                    "index": 287,
                    "belong_page": 1,
                    "question_id": 310886,
                    "question_title": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的()特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用()架构风格。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310884,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的结构和语义两个方面的特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用黑板架构风格，以知识为中心进行分析与推理。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "管道-过滤器",
                        "解释器",
                        "黑板",
                        "过程控制"
                    ]
                },
                {
                    "index": 288,
                    "belong_page": 1,
                    "question_id": 310887,
                    "question_title": "REST(REpresentational State Transfer)是目前因特网的核心架构风格之一。与传统的Web服务相比，REST服务的主要优势不包括（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310887,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>表述性状态转移(REpresentational State Transfer，REST)是指从几种基于网络的架构风格衍生出来的一种混合架构风格。其特点是客户端/服务器、无状态、缓存、统一接口、分层系统和按需代码。REST组件通过以一种数据格式转移资源的表述进行通信，可以基于接收者的能力和期待的内容，以及资源的性质，动态地选择不同的表述。与传统的Web服务相比，REST服务主要有以下几种优势。</p><p>①REST。服务基于W3C/IETF的标准与规范(包括HTTP、XML、URI和MIME等)，其实现技术简单、成熟。</p><p>②REST服务基于URI和超链接技术，不需要通过集中式的服务信息仓库即可发现服务资源。</p><p>③REST服务支持缓存，具有无状态的特性，这些使得REST服务能够支持大量客户端，构建的应用系统具有较强的伸缩性。</p><p>④REST服务基于轻量级的Web框架，仅需要基本的开发工具支持，构建过程简单且成本较低；</p><p>⑤REST服务的测试相对简单，采用浏览器即可完成服务功能测试。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "基于URI和超链接技术，无须通过集中式的服务信息仓库即可发现服务资源",
                        "支持缓存，具有状态相关特性，所构建的应用系统具有较强的伸缩性",
                        "基于轻量级的Web框架，仅需要基本的开发工具支持，构建过程简单且成本较低",
                        "基于W3C/IETF的标准与规范，其实现技术简单且成熟"
                    ]
                },
                {
                    "index": 289,
                    "belong_page": 1,
                    "question_id": 310892,
                    "question_title": "管道和过滤器模式属于（53）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310892,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>体系结构风格有：</p><p>①数据流系统：包括顺序批处理、管道和过滤器。</p><p>②调用和返回系统：包括主程序和子程序、面向对象系统、层次结构。</p><p>③独立部件：包括通信进程、事件隐式调用。</p><p>④虚拟机：包括解释器、基于规则的系统。</p><p>⑤以数据为中心的系统：包括数据库、超文本系统、黑板系统。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "数据为中心的体系结构",
                        "数据流体系结构",
                        "调用和返回体系结构",
                        "层次式体系结构"
                    ]
                },
                {
                    "index": 290,
                    "belong_page": 1,
                    "question_id": 310898,
                    "question_title": "特定领域软件架构(Domain Specific Software Architecture，DSSA.以一个特定问题领域为对象，形成由领域参考模型、参考需求、(57)_等组成的开发基础架构，支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得(58)，从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得(59)，从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并实现基础软件架构。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310897,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "特定领域软件架构(Domain Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "参考设计",
                        "参考规约",
                        "参考架构",
                        "参考实现"
                    ]
                },
                {
                    "index": 291,
                    "belong_page": 1,
                    "question_id": 310899,
                    "question_title": "特定领域软件架构(Domain Specific Software Architecture，DSSA.以一个特定问题领域为对象，形成由领域参考模型、参考需求、(57)_等组成的开发基础架构，支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得(58)，从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得(59)，从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并实现基础软件架构。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310897,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "特定领域软件架构(Domain Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "领域边界",
                        "领域信息",
                        "领域对象",
                        "领域模型"
                    ]
                },
                {
                    "index": 292,
                    "belong_page": 1,
                    "question_id": 310900,
                    "question_title": "特定领域软件架构(Domain Specific Software Architecture，DSSA.以一个特定问题领域为对象，形成由领域参考模型、参考需求、(57)_等组成的开发基础架构，支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得(58)，从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得(59)，从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并实现基础软件架构。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310897,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "特定领域软件架构(Domain Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "特定领域软件需求",
                        "特定领域软件架构",
                        "特定领域软件设计模型",
                        "特定领域软件重用模型"
                    ]
                },
                {
                    "index": 293,
                    "belong_page": 1,
                    "question_id": 310902,
                    "question_title": "某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与(60)质量属性相关，通常可采用(61)架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与(62)质量属性相关，通常可采用(63)架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与(64)_质量属性相关，通常可采用(65)架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310901,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "性能",
                        "可用性",
                        "易用性",
                        "可修改性"
                    ]
                },
                {
                    "index": 294,
                    "belong_page": 1,
                    "question_id": 310903,
                    "question_title": "某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与(60)质量属性相关，通常可采用(61)架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与(62)质量属性相关，通常可采用(63)架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与(64)_质量属性相关，通常可采用(65)架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310901,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "主动冗余",
                        "信息隐藏",
                        "抽象接口",
                        "记录/回放"
                    ]
                },
                {
                    "index": 295,
                    "belong_page": 1,
                    "question_id": 310904,
                    "question_title": "某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与(60)质量属性相关，通常可采用(61)架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与(62)质量属性相关，通常可采用(63)架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与(64)_质量属性相关，通常可采用(65)架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310901,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "可测试性",
                        "易用性",
                        "性能",
                        "互操作性"
                    ]
                },
                {
                    "index": 296,
                    "belong_page": 1,
                    "question_id": 310905,
                    "question_title": "某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与(60)质量属性相关，通常可采用(61)架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与(62)质量属性相关，通常可采用(63)架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与(64)_质量属性相关，通常可采用(65)架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310901,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "操作串行化",
                        "资源调度",
                        "心跳",
                        "内置监控器"
                    ]
                },
                {
                    "index": 297,
                    "belong_page": 1,
                    "question_id": 310906,
                    "question_title": "某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与(60)质量属性相关，通常可采用(61)架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与(62)质量属性相关，通常可采用(63)架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与(64)_质量属性相关，通常可采用(65)架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310901,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "5",
                    "analyze": "<p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "可用性",
                        "安全性",
                        "可测试性",
                        "可修改性"
                    ]
                },
                {
                    "index": 298,
                    "belong_page": 1,
                    "question_id": 310907,
                    "question_title": "某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与(60)质量属性相关，通常可采用(61)架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与(62)质量属性相关，通常可采用(63)架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与(64)_质量属性相关，通常可采用(65)架构策略实现该属性。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310901,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "6",
                    "analyze": "<p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "内置监控器",
                        "记录/回放",
                        "追踪审计&nbsp;",
                        "维护现有接口"
                    ]
                },
                {
                    "index": 299,
                    "belong_page": 1,
                    "question_id": 310908,
                    "question_title": "某公司拟开发一个扫地机器人。机器人的控制者首先定义清洁流程和流程中任务之间的关系，机器人接受任务后，需要响应外界环境中触发的一些突发事件，根据自身状态进行动态调整，最终自动完成任务。针对上述需求，该机器人应该采用（66）架构风格最为合适。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310908,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "在本题所述的应用环境中，强调了自定义流程，然后按自定义流程来执行，这属于虚拟机风格的特征，备选答案中，仅有C选项属于虚拟机风格。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "面向对象",
                        "主程序一子程序",
                        "规则系统",
                        "管道一过滤器"
                    ]
                },
                {
                    "index": 300,
                    "belong_page": 1,
                    "question_id": 310909,
                    "question_title": "某企业内部现有的主要业务功能已封装成为Web服务。为了拓展业务范围，需要将现有的业务功能进行多种组合，形成新的业务功能。针对业务灵活组合这一要求，采用（67）架构风格最为合适。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 310909,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "题干要求将业务功能灵活组合形成新的业务功能，属于自定义类型的业务，需要采用虚拟机架构。选项A与选项D都属于虚拟机类型，但是选项A主要适合于专家系统，因此选D。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "规则系统",
                        "面向对象",
                        "黑板",
                        "解释器"
                    ]
                },
                {
                    "index": 301,
                    "belong_page": 1,
                    "question_id": 312911,
                    "question_title": "基于软件架构的设计(Architecture Based Software Development，ABSD.强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用（）来描述软件架构，采用（）来描述需求。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312910,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "根据基于软件架构的设计的定义，基于软件架构的设计(Architecture Based Software Development，ABSD)强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "类图和序列图",
                        "视角与视图",
                        "构件和类图",
                        "构件与功能"
                    ]
                },
                {
                    "index": 302,
                    "belong_page": 1,
                    "question_id": 312912,
                    "question_title": "基于软件架构的设计(Architecture Based Software Development，ABSD.强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用（）来描述软件架构，采用（）来描述需求。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312910,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "根据基于软件架构的设计的定义，基于软件架构的设计(Architecture Based Software Development，ABSD)强调由商业、质量和功能需求的组合驱动软件架构设计。它强调采用视角和视图来描述软件架构，采用用例和质量属性场景来描述需求。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "用例与类图",
                        "用例与视角",
                        "用例与质量场景",
                        "视角与质量场景"
                    ]
                },
                {
                    "index": 303,
                    "belong_page": 1,
                    "question_id": 312913,
                    "question_title": "软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动，是一个迭代的过程。以下关于软件架构设计活动的描述，错误的是____。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312913,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "软件架构设计包括提出架构模型、产生架构设计和进行设计评审等活动，是一个迭代的过程，在建立软件架构的初期，一般需要选择一个合适的架构风格，将架构分析阶段已标识的构件映射到架构中，并分析这些构件之间的关系，一旦得到了详细的软件架构设计，需要邀请独立于系统开发的外部人员对系统进行评审。一般来说，软件架构设计活动将已标识构件集成到软件架构中，设计这些构件，但不予以实现。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "在建立软件架构的初期，一般需要选择一个合适的架构风格",
                        "将架构分析阶段已标识的构件映射到架构中，并分析这些构件之间的关系",
                        "软件架构设计活动将己标识构件集成到软件架构中，设计并实现这些构件",
                        "一旦得到了详细的软件架构设计，需要邀请独立于系统开发的外部人员对系统进行评审"
                    ]
                },
                {
                    "index": 304,
                    "belong_page": 1,
                    "question_id": 312919,
                    "question_title": "正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中（）是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。“改变加密的级别可能会对安全性和性能都产生显著的影响”，这是一个对系统（）的描述。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312918,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中敏感点是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。系统权衡点会影响一个或多个属性，并对于多个属性来说都是敏感点。基于该定义，可以看出“改变加密的级别可能会对安全性和性能都产生显著的影响”正是一个对系统权衡点的描述。　",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "风险点",
                        "非风险点",
                        "敏感点",
                        "权衡点"
                    ]
                },
                {
                    "index": 305,
                    "belong_page": 1,
                    "question_id": 312920,
                    "question_title": "正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中（）是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。“改变加密的级别可能会对安全性和性能都产生显著的影响”，这是一个对系统（）的描述。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312918,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "正确识别风险点、非风险点、敏感点和权衡点是进行软件架构评价的关键步骤。其中敏感点是实现一个特定质量属性的关键特征，该特征为一个或多个软件构件所共有。系统权衡点会影响一个或多个属性，并对于多个属性来说都是敏感点。基于该定义，可以看出“改变加密的级别可能会对安全性和性能都产生显著的影响”正是一个对系统权衡点的描述。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "非风险点",
                        "风险点",
                        "敏感点",
                        "权衡点"
                    ]
                },
                {
                    "index": 306,
                    "belong_page": 1,
                    "question_id": 312924,
                    "question_title": "雇员类含有计算报酬的行为，利用面向对象的___，可以使得其派生类专职雇员类和兼职雇员类计算报酬的行为有相同的名称，但有不同的计算方法。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312924,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "在面向对象技术中，多态考虑的是类与类之间的层次关系，以及类自身内部特定成员函数之间的关系问题，是解决功能和行为的再抽象问题。多态是指类中具有相似功能的不同函数用同一个名称来实现，从而可以使用相同的调用方式来调用这些具有不同功能的同名函数。这也是人类思维方式的一种直接模拟，例如，一个对象中有很多求两个数最大值的行为，虽然可以针对不同的数据类型，写很多不同名称的函数来实现，但事实上，它们的功能几乎完全相同。这时，就可以利用多态的特征，用统一的标识来完成这些功能。这样，就可以达到类的行为的再抽象，进而统一标识，减少程序中标识符的个数。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "多态性",
                        "继承性",
                        "封装性",
                        "复用性"
                    ]
                },
                {
                    "index": 307,
                    "belong_page": 1,
                    "question_id": 312926,
                    "question_title": "在一个典型的电子商务应用中，三层架构(即表现层、商业逻辑层和数据访问层)常常是架构师的首选。常见的电子商务应用——网上书城的主要功能是提供在线的各种图书信息的查询和浏览，并且能够订购相关图书。用户可能频繁地进行书目查询操作，网站需要返回众多符合条件的书目并且分页显示；网站管理员需要批量对相关书目信息进行修改，并且将更新信息记录到数据库。针对前一个应用要求，架构师在数据访问层设计时，最可能考虑采用______；针对后一个应用要求，架构师最可能考虑采用______。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312925,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>在线访问模式、Data Access Object模式、Data Transfer Object模式、离线数据模式和对象/关系映射(Object/Relation Mapping)模式是数据持久层(数据访问层)架构设计中常用的数据访问模式。</p><p>&nbsp;在网上书城应用中，用户根据查询条件查询相关的书目，返回符合条件的书目列表，可能内容非常多，而且可能每次查询的内容都不一样。针对用户书目查询的应用，如果查询返回的数据量并不是很大，同时也不频繁，则可以考虑采用在线访问的模式；如果返回的数据量较大(例如返回众多符合条件的书目并且分页显示)而且较为频繁，则可以考虑在线访问模式和离线模式相结合，通过离线数据的缓存来提高查询的性能。</p><p>网站管理员可能需要批量对相关书目信息进行修改，并且需要将更新信息返回至数据库。此类数据应用的特点表现为：与数据库交互的次数并不频繁，但是每次的数据量相对较大；同时，也希望能够使得本地操作有较好的交互体验。针对这种情况，往往适合采用离线数据访问的模式，DT0模式也是不错的选择。如果该网上书城应用系统采用的是IBM WebSphere平台，则可以使用SDO技术，或者使用Java中的CachedRowSet技术；如果采用的是基于微软的应用系统平台，则可以采用ADO.NET技术。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "在线访问模式和DAO模式相结合",
                        "在线访问模式和离线数据模式相结合",
                        "DAO模式和DTO模式相结合",
                        "DTO模式和O/R映射模式相结合"
                    ]
                },
                {
                    "index": 308,
                    "belong_page": 1,
                    "question_id": 312927,
                    "question_title": "在一个典型的电子商务应用中，三层架构(即表现层、商业逻辑层和数据访问层)常常是架构师的首选。常见的电子商务应用——网上书城的主要功能是提供在线的各种图书信息的查询和浏览，并且能够订购相关图书。用户可能频繁地进行书目查询操作，网站需要返回众多符合条件的书目并且分页显示；网站管理员需要批量对相关书目信息进行修改，并且将更新信息记录到数据库。针对前一个应用要求，架构师在数据访问层设计时，最可能考虑采用______；针对后一个应用要求，架构师最可能考虑采用______。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312925,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>在线访问模式、Data Access Object模式、Data Transfer Object模式、离线数据模式和对象/关系映射(Object/Relation Mapping)模式是数据持久层(数据访问层)架构设计中常用的数据访问模式。</p><p>&nbsp;在网上书城应用中，用户根据查询条件查询相关的书目，返回符合条件的书目列表，可能内容非常多，而且可能每次查询的内容都不一样。针对用户书目查询的应用，如果查询返回的数据量并不是很大，同时也不频繁，则可以考虑采用在线访问的模式；如果返回的数据量较大(例如返回众多符合条件的书目并且分页显示)而且较为频繁，则可以考虑在线访问模式和离线模式相结合，通过离线数据的缓存来提高查询的性能。</p><p>网站管理员可能需要批量对相关书目信息进行修改，并且需要将更新信息返回至数据库。此类数据应用的特点表现为：与数据库交互的次数并不频繁，但是每次的数据量相对较大；同时，也希望能够使得本地操作有较好的交互体验。针对这种情况，往往适合采用离线数据访问的模式，DT0模式也是不错的选择。如果该网上书城应用系统采用的是IBM WebSphere平台，则可以使用SDO技术，或者使用Java中的CachedRowSet技术；如果采用的是基于微软的应用系统平台，则可以采用ADO.NET技术。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "在线访问模式",
                        "DAO模式",
                        "离线数据模式",
                        "O/R映射模式"
                    ]
                },
                {
                    "index": 309,
                    "belong_page": 1,
                    "question_id": 312935,
                    "question_title": "PH系统集成开发公司决定采用基于架构的软件开发方法，以架构为核心对近期所承接的某电子商务企业的在线交易平台进行设计与实现。该电子商务企业要求在线交易平台必须在800 ms内完成客户的交易请求。该电子商务企业所提要求主要对应于______这一软件质量属性，实现并提高该质量属性的架构设计策略不包括______。 &nbsp;",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312934,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>性能(Performance)是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。它是常见的软件质量属性之一。</p><p>在线交易平台必须在1s内完成客户的交易请求。该要求主要对应性能，可以采用的架构设计策略有：①增加可用资源(更快的处理器、多处理器、更大的内存，以及速度更快的网络等)；②改善资源需求(减少计算复杂度、优化各个进程的内存和CPU占用率等)；③资源管理(并发、数据复制等)；④资源调度(先进先出队列、固定优先级调度队列等)等。</p><p>设置进程监视器是实现“可用性”质量属性的一种架构设计策略。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "可用性",
                        "易用性",
                        "安全性",
                        "性能"
                    ]
                },
                {
                    "index": 310,
                    "belong_page": 1,
                    "question_id": 312936,
                    "question_title": "PH系统集成开发公司决定采用基于架构的软件开发方法，以架构为核心对近期所承接的某电子商务企业的在线交易平台进行设计与实现。该电子商务企业要求在线交易平台必须在800 ms内完成客户的交易请求。该电子商务企业所提要求主要对应于______这一软件质量属性，实现并提高该质量属性的架构设计策略不包括______。 &nbsp;",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312934,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>性能(Performance)是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。它是常见的软件质量属性之一。</p><p>在线交易平台必须在1s内完成客户的交易请求。该要求主要对应性能，可以采用的架构设计策略有：①增加可用资源(更快的处理器、多处理器、更大的内存，以及速度更快的网络等)；②改善资源需求(减少计算复杂度、优化各个进程的内存和CPU占用率等)；③资源管理(并发、数据复制等)；④资源调度(先进先出队列、固定优先级调度队列等)等。</p><p>设置进程监视器是实现“可用性”质量属性的一种架构设计策略。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "采用优先级调度队列",
                        "引入并发处理",
                        "优化相关进程的CPU占用率",
                        "设置进程监视器"
                    ]
                },
                {
                    "index": 311,
                    "belong_page": 1,
                    "question_id": 312937,
                    "question_title": "软件架构为软件系统提供了一个结构、行为和属性的高级抽象模式。“4+1”视图模型是指用5个视图组成的模型来描述软件架构。其中，____描述了设计的并发和同步特征，支持系统的运行特性。 &nbsp;",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312937,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>“4+1”视图模型用5个视图组成的模型来描述软件架构。该模型包含5个主要视图及其实现的功能，如下表所示。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211013/1634138673210943.jpg\" title=\"1634138673210943.jpg\" alt=\"1.jpg\"/>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "物理视图",
                        "逻辑视图",
                        "进程视图",
                        "开发视图"
                    ]
                },
                {
                    "index": 312,
                    "belong_page": 1,
                    "question_id": 312940,
                    "question_title": "面向对象设计是模型驱动和用例驱动的，整个设计过程将 （） 作为输入，并生成 （ ） 作为输出。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312939,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "面向对象设计是模型驱动和用例驱动的，整个设计过程将面向对象分析阶段所产生的需求模型作为输入，并生成供构 建阶段使用的设计模型作为输出。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "逻辑数据流图",
                        "设计文档和用户说明",
                        "需求类图",
                        "需求模型"
                    ]
                },
                {
                    "index": 313,
                    "belong_page": 1,
                    "question_id": 312941,
                    "question_title": "面向对象设计是模型驱动和用例驱动的，整个设计过程将 （） 作为输入，并生成 （ ） 作为输出。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312939,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "面向对象设计是模型驱动和用例驱动的，整个设计过程将面向对象分析阶段所产生的需求模型作为输入，并生成供构 建阶段使用的设计模型作为输出。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "物理数据流图",
                        "设计文档和用户说明",
                        "设计类图和系统顺序图",
                        "设计模型"
                    ]
                },
                {
                    "index": 314,
                    "belong_page": 1,
                    "question_id": 312943,
                    "question_title": "在计算机系统中，若一个存储单元被访问，这个存储单元有可能很快会再被访问，该特性被称为 （） ；这个存储 单元及其邻近的存储单元有可能很快会再被访问，该特性被称为 （） 。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312942,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "局部性原理是指在指定时间内，程序趋于在有限的内存区域内重复访问。通常将局部性分为空间局部性和时间局 部性。空间局部性是指已访问过的内存地址附近的位置很可能被连续访问。时间局部性是指已访问过的内存地址在较短的时间内还可能被多次访问。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "程序局部性",
                        "空间局部性",
                        "数据局部性",
                        "时间局部性"
                    ]
                },
                {
                    "index": 315,
                    "belong_page": 1,
                    "question_id": 312944,
                    "question_title": "在MVC(模型/视图/控制器)模式中，视图部分描述的是（ ）。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312944,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>MVC模式，即模型—视图—控制(Model-View-Controller)模式，它实际上是一种架构模式，是为那些需要为同样的数据提供多个视图的应用程序而设计的，它很好地体现了数据层与表示层的分离。</p><p>MCV把应用程序分为3种对象类型。</p><p>模型：应用问题域中包含的抽象领域知识；</p><p>视图：将应用问题域中包含的抽象领域知识呈现给用户的方法：一个模型可以用于多个视图；</p><p>控制器：用户界面对用户输入的响应方式。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "将应用问题域中包含的抽象领域知识呈现给用户的方式",
                        "应用问题域中所包含的抽象类",
                        "用户界面对用户输入的响应方式",
                        "应用问题域中包含的抽象领域知识"
                    ]
                },
                {
                    "index": 316,
                    "belong_page": 1,
                    "question_id": 312945,
                    "question_title": "<p>对于如下所示的UML类图，正确的描述是（）。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211013/1634138851551642.jpg\" title=\"1634138851551642.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312945,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>UML中，关联(association)是一种结构关系，它指明一个事物的对象与另一个事物的对象之间的联系。给定一个连接两个类的关联，可以从一个类的对象导航到另一个类的对象，反之亦然。在图形上，把关联画成一条连接相同类或不同类的实线。</p><p>通过一个指示走向的单向箭头修饰关联，可以显示地描述导航的方向。题目中所示的UML类图中，导航方向为A→B，说明可以从类A的实例导航到类B的实例，因此在类A中必然包含一个对类B的实例的引用。图上“C”表示的是关联一端的角色名称。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "类B的实例中包含了对类C的实例的引用",
                        "类A的实例中包含了对类B的实例的引用",
                        "类A的实例中包含了对类C的实例的引用",
                        "类B的实例中包含了对类A的实例的引用"
                    ]
                },
                {
                    "index": 317,
                    "belong_page": 1,
                    "question_id": 312946,
                    "question_title": "在软件需求工程中，需求管理贯穿整个过程。需求管理最基本的任务是明确需求，并使项目团队和用户达成共识，即 建立（） 。&nbsp;",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312946,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "需求是软件项目成功的核心所在，它为其他许多技术和管理活动奠定了基础。在软件需求工程中，需求管理贯穿 整个过程。需求管理最基本的任务是明确需求，并使项目团队和用户达成共识，即建立需求基线。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "需求跟踪说明",
                        "需求变更管理文档",
                        "需求分析计划",
                        "需求基线"
                    ]
                },
                {
                    "index": 318,
                    "belong_page": 1,
                    "question_id": 312947,
                    "question_title": "<p>某大型移动通信运营商欲开发一个新的应用系统以替换原有系统。在需求分析阶段，为尽快从已有系统文档资料和用户处获取整体系统需求，采用（ ）的方法捕获需求最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312947,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>需求获取是一个确定和理解不同的项目干系人的需求和约束的过程。常见的需求获取方式有用户访谈、问卷调 查、抽样和联合需求计划等。<br/>根据题干描述，应该采用抽样的方法。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 用户访谈 ",
                        " 联合需求计划 ",
                        " 抽样 ",
                        " 头脑风暴 "
                    ]
                },
                {
                    "index": 319,
                    "belong_page": 1,
                    "question_id": 312948,
                    "question_title": "（ ）是一种信息分析工具，能自动地找出数据仓库中的模式及关系。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312948,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "自动地找出数据仓库中的模式及关系是数据挖掘的基本概念。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "数据集市",
                        "数据挖掘",
                        "预测分析",
                        "数据统计"
                    ]
                },
                {
                    "index": 320,
                    "belong_page": 1,
                    "question_id": 312950,
                    "question_title": "在RUP中采用“4+1”视图模型来描述软件系统的体系结构。在该模型中，最终用户侧重于（），系统工程师侧重于（）。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312949,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>在RUP中采用“4+1”视图模型来描述软件系统的体系结构。“4+1”视图包括逻辑视图、实现视图、进程视图、部署视图和用例视图。</p><p>分析人员和测试人员关心的是系统的行为，因此会侧重于用例视图；最终用户关心的是系统的功能，因此会侧重于逻辑视图；程序员关心的是系统的配置、装配等问题，因此会侧重于实现视图；系统集成人员关心的是系统的性能、可伸缩性、吞吐率等问题，因此会侧重于进程视图；系统工程师关心的是系统的发布、安装、拓扑结构等问题，因此会侧重于部署视图。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "实现视图",
                        "进程视图",
                        "逻辑视图",
                        "部署视图"
                    ]
                },
                {
                    "index": 321,
                    "belong_page": 1,
                    "question_id": 312951,
                    "question_title": "在RUP中采用“4+1”视图模型来描述软件系统的体系结构。在该模型中，最终用户侧重于（），系统工程师侧重于（）。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312949,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>在RUP中采用“4+1”视图模型来描述软件系统的体系结构。“4+1”视图包括逻辑视图、实现视图、进程视图、部署视图和用例视图。</p><p>分析人员和测试人员关心的是系统的行为，因此会侧重于用例视图；最终用户关心的是系统的功能，因此会侧重于逻辑视图；程序员关心的是系统的配置、装配等问题，因此会侧重于实现视图；系统集成人员关心的是系统的性能、可伸缩性、吞吐率等问题，因此会侧重于进程视图；系统工程师关心的是系统的发布、安装、拓扑结构等问题，因此会侧重于部署视图。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "进程视图",
                        "实现视图",
                        "逻辑视图",
                        "部署视图"
                    ]
                },
                {
                    "index": 322,
                    "belong_page": 1,
                    "question_id": 312955,
                    "question_title": "某服务器软件系统能够正确运行并得出计算结果，但存在“系统出错后不能在要求的时间内恢复到正常状态”和“对系统进行二次开发时总要超过半年的时间”两个问题，上述问题依次与质量属性中的（ ）相关。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312955,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "“系统出错后不能在要求的时间内恢复到正常状态”，这是对系统错误恢复能力的描述，属于系统可用性的范畴。“对系统进行二次开发时总要超过半年的时间”，这是对系统进行调整和维护方面能力的描述，属于系统可修改性的范畴。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "可用性和性能",
                        "性能和可修改性",
                        "性能和可测试性",
                        "可用性和可修改性"
                    ]
                },
                {
                    "index": 323,
                    "belong_page": 1,
                    "question_id": 312957,
                    "question_title": "某公司开发一个文档编辑器，该编辑器允许在文档中直接嵌入图形对象，但开销很大。用户在系统设计之初提出编辑器在打开文档时必须十分迅速，可以暂时不显示当前页面以外的图形。针对这种需求，公司可以采用______避免同时创建这些图形对象。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312957,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "根据题干描述，该编辑器需要在文档中嵌入显示开销很大的图形对象，为了能够提高系统效率，需要避免同时创建这些图像。针对这些要求，对比候选项，可以发现代理模式可以解决直接访问对象时带来的问题，例如，要访问的对象在远程的机器上；对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问等。因此代理模式是最为合适的设计模式。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "代理模式",
                        "外观模式",
                        "桥接模式",
                        "组合模式"
                    ]
                },
                {
                    "index": 324,
                    "belong_page": 1,
                    "question_id": 312963,
                    "question_title": "<p>某软件公司欲开发一个Windows平台上的公告板系统。在明确用户需求后，该公司的架构师决定采用Command模式实现该系统的界面显示部分，并设计UML类图如下图所示。图中与Command模式中的“Invoker”角色相对应的类是（） ，与“Concrete Command”角色相对应的类是（）。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211013/1634139297117019.jpg\" title=\"1634139297117019.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312962,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>Command(命令)模式是设计模式中行为模式的一种，它将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。Command模式也支持可撤销的操作。Command模式的类图如下所示。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211013/1634139332231633.jpg\" title=\"1634139332231633.jpg\" alt=\"1.jpg\"/></p><p>对于题目所给出的图，与“Invoker”角色相对应的类是MenuItem，与“Concrete Command”角色相对应的类是Open。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "Command",
                        "MenuItem",
                        "Open",
                        "ulktinBoardScreen"
                    ]
                },
                {
                    "index": 325,
                    "belong_page": 1,
                    "question_id": 312964,
                    "question_title": "<p>某软件公司欲开发一个Windows平台上的公告板系统。在明确用户需求后，该公司的架构师决定采用Command模式实现该系统的界面显示部分，并设计UML类图如下图所示。图中与Command模式中的“Invoker”角色相对应的类是（） ，与“Concrete Command”角色相对应的类是（）。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211013/1634139297117019.jpg\" title=\"1634139297117019.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312962,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>Command(命令)模式是设计模式中行为模式的一种，它将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。Command模式也支持可撤销的操作。Command模式的类图如下所示。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211013/1634139332231633.jpg\" title=\"1634139332231633.jpg\" alt=\"1.jpg\"/></p><p>对于题目所给出的图，与“Invoker”角色相对应的类是MenuItem，与“Concrete Command”角色相对应的类是Open。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "MenuItem",
                        "Command",
                        "Open",
                        "BulktinBoardScreen"
                    ]
                },
                {
                    "index": 326,
                    "belong_page": 1,
                    "question_id": 312965,
                    "question_title": "用例(use case)用来描述系统对事件做出响应时所采取的行动。用例之间是具有相关性的。在一个“订单输入子系统”中，创建新订单和更新订单都需要核查用户账号是否正确。用例“创建新订单”、“更新订单”与用例“核查客户账号”之间是______关系。",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312965,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "用例是在系统中执行的一系列动作，这些动作将生成特定参与者可见的价值结果。它确定了一个和系统参与者进行交互，并可由系统执行的动作序列。用例模型描述的是外部执行者(Actor)所理解的系统功能。用例模型用于需求分析阶段，它的建立是系统开发者和用户反复讨论的结果，表明了开发者和用户对需求规格达成的共识。<p>两个用例之间的关系主要有两种情况：一种是用于重用的包含关系，用构造型 include表示；另一种是用于分离出不同行为的扩展，用构造型extend表示。</p><p>①包含关系：当可以从两个或两个以上的原始用例中提取公共行为，或者发现能够使用一个构件来实现某一个用例的部分功能是很重要的事时，应该使用包含关系来表示它们。</p><p>②扩展关系：如果一个用例明显地混合了两种或两种以上的不同场景，即根据情况可能发生多种事情，可以断定将这个用例分为一个主用例和一个或多个辅用例描述可能更加清晰。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "包含(include)",
                        "扩展(extend)",
                        "分类(classification)&nbsp;",
                        "聚集(aggregation)"
                    ]
                },
                {
                    "index": 327,
                    "belong_page": 1,
                    "question_id": 312967,
                    "question_title": "面向对象的设计模型包含以 （）表示的软件体系结构图，以 （）表示的用例实现图，完整精确的类图，针对复杂对象的状态图和用以描述流程化处理的活动图等。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312966,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "面向对象的设计模型包含以包图表示的软件体系结构图，以交互图表示的用例实现图，完整精确的类图，针对复杂对象的状态图和用以描述流程化处理的活动图等。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "包图",
                        "部署图",
                        "协同图",
                        "交互图"
                    ]
                },
                {
                    "index": 328,
                    "belong_page": 1,
                    "question_id": 312969,
                    "question_title": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的()特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用()架构风格。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312968,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的结构和语义两个方面的特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用黑板架构风格，以知识为中心进行分析与推理。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "管道-过滤器",
                        "解释器&nbsp;",
                        "黑板&nbsp;",
                        "过程控制"
                    ]
                },
                {
                    "index": 329,
                    "belong_page": 1,
                    "question_id": 312971,
                    "question_title": "某公司欲开发一个用于分布式登录的服务端程序，使用面向连接的TCP协议并发地处理多客户端登录请求。用户要求该服务端程序运行在Linux、Solaris和Windows NT等多种操作系统平台之上，而不同的操作系统的相关API函数和数据都有所不同。针对这种情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给()，调用成功后将结果返回。使用该模式（）。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312970,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "针对题目给出的情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给操作系统API函数，调用成功后将结果返回。使用该模式提高了底层代码访问的一致性，但降低了服务端程序的调用性能。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "客户端程序",
                        "操作系统API函数",
                        "TCP协议API函数",
                        "登录连接程序"
                    ]
                },
                {
                    "index": 330,
                    "belong_page": 1,
                    "question_id": 312972,
                    "question_title": "某公司欲开发一个用于分布式登录的服务端程序，使用面向连接的TCP协议并发地处理多客户端登录请求。用户要求该服务端程序运行在Linux、Solaris和Windows NT等多种操作系统平台之上，而不同的操作系统的相关API函数和数据都有所不同。针对这种情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给()，调用成功后将结果返回。使用该模式（）。",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312970,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "针对题目给出的情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和请求的参数发送给操作系统API函数，调用成功后将结果返回。使用该模式提高了底层代码访问的一致性，但降低了服务端程序的调用性能。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "提高了底层代码访问的一致性，但降低了服务端程序的调用性能",
                        "降低了服务端程序功能调用的灵活性，但提高了服务端程序的调用性能",
                        "降低了服务端程序的可移植性，但提高了服务端程序的可维护性",
                        "提高了系统的可复用性，但降低了系统的可配置性"
                    ]
                },
                {
                    "index": 331,
                    "belong_page": 1,
                    "question_id": 312979,
                    "question_title": "<p>某银行系统采用Factory Method方法描述其不同账户之间的关系，设计出的类图如下所示。其中与Factory Method中的“Creator”角色相对应的类是（）；与“Product”角色相对应的类是（）。<br/></p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211014/1634141131101427.jpg\" title=\"1634141131101427.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312978,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>Factory Method模式的意图是，定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method是一个类的实例化延迟到其子类。Factory Method模式的类图如下图所示。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211014/1634142542279208.jpg\" title=\"1634142542279208.jpg\" alt=\"1.jpg\"/></p><p>&nbsp;其中：</p><p>类Product定义了Factory Method所创建的对象的接口。</p><p>类ConcreteProduct用于实现Product接口。</p><p>类Creator声明了工厂方法，该方法返回一个Product类型的对象。Creator也可以定义一个工厂方法的缺省实现，它返回一个缺省的ConcreteProduct对象。</p><p>类ConcreteCreator重定义了工厂方法，以返回一个ConcreteProduct实例。</p><p>对照两张类图可以看出，与“Creator”角色相对应的类是Bank；与“Product”角色相对应的类是Account。</p><p>类Product定义了Factory Method所创建的对象的接口。</p><p>类ConcreteProduct用于实现Product接口。</p><p>类Creator声明了工厂方法，该方法返回一个Product类型的对象。Creator也可以定义一个工厂方法的缺省实现，它返回一个缺省的ConcreteProduct对象。</p><p>类ConcreteCreator重定义了工厂方法，以返回一个ConcreteProduct实例。</p><p>对照两张类图可以看出，与“Creator”角色相对应的类是Bank；与“Product”角色相对应的类是Account。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "Bank",
                        "Account",
                        "Checking",
                        "Savings"
                    ]
                },
                {
                    "index": 332,
                    "belong_page": 1,
                    "question_id": 312980,
                    "question_title": "<p>某银行系统采用Factory Method方法描述其不同账户之间的关系，设计出的类图如下所示。其中与Factory Method中的“Creator”角色相对应的类是（）；与“Product”角色相对应的类是（）。<br/></p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211014/1634141131101427.jpg\" title=\"1634141131101427.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 312978,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>Factory Method模式的意图是，定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method是一个类的实例化延迟到其子类。Factory Method模式的类图如下图所示。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211014/1634142542279208.jpg\" title=\"1634142542279208.jpg\" alt=\"1.jpg\"/></p><p>&nbsp;其中：</p><p>类Product定义了Factory Method所创建的对象的接口。</p><p>类ConcreteProduct用于实现Product接口。</p><p>类Creator声明了工厂方法，该方法返回一个Product类型的对象。Creator也可以定义一个工厂方法的缺省实现，它返回一个缺省的ConcreteProduct对象。</p><p>类ConcreteCreator重定义了工厂方法，以返回一个ConcreteProduct实例。</p><p>对照两张类图可以看出，与“Creator”角色相对应的类是Bank；与“Product”角色相对应的类是Account。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "Bank",
                        "Account",
                        "Checking",
                        "Savings"
                    ]
                },
                {
                    "index": 333,
                    "belong_page": 1,
                    "question_id": 315951,
                    "question_title": "<p>基于架构的软件设计(Archiecture-Based Software Design，ABSD)方法是架构驱动的方法，该方法是一个 (44) 的方法，软件系统的架构通过该方法得到细化，直到能产生(45)</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315950,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>ABSD方法是一个自顶向下，递归细化的方法，软件系统的体系结构通过该方法得到细化，直到能产生软件构件和类。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "自顶向下",
                        "自底向上",
                        "原型",
                        "自顶向下和自底向上结合"
                    ]
                },
                {
                    "index": 334,
                    "belong_page": 1,
                    "question_id": 315952,
                    "question_title": "<p>基于架构的软件设计(Archiecture-Based Software Design，ABSD)方法是架构驱动的方法，该方法是一个 (44) 的方法，软件系统的架构通过该方法得到细化，直到能产生(45)</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315950,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>ABSD方法是一个自顶向下，递归细化的方法，软件系统的体系结构通过该方法得到细化，直到能产生软件构件和类。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "软件质量属性",
                        "软件连接性",
                        "软件构件或模块",
                        "软件接口"
                    ]
                },
                {
                    "index": 335,
                    "belong_page": 1,
                    "question_id": 315954,
                    "question_title": "<p>4+1视图模型可以从多个视图或视角来描述软件架构。其中，(46) 用于捕捉设计的并发和同步特证；(47) 描述了在开发环境中软件的静态组织结构。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315953,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211118/1637231793659744.png\" title=\"1637231793659744.png\" alt=\"image.png\"/></p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "逻辑视图",
                        "开发视图",
                        "过程视图",
                        "物理视图"
                    ]
                },
                {
                    "index": 336,
                    "belong_page": 1,
                    "question_id": 315955,
                    "question_title": "<p>4+1视图模型可以从多个视图或视角来描述软件架构。其中，(46) 用于捕捉设计的并发和同步特证；(47) 描述了在开发环境中软件的静态组织结构。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315953,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211118/1637231844570053.png\" title=\"1637231844570053.png\" alt=\"image.png\"/>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "类视图",
                        "开发视图",
                        "过程视图",
                        "用例视图"
                    ]
                },
                {
                    "index": 337,
                    "belong_page": 1,
                    "question_id": 315956,
                    "question_title": "<p>软件架构风格是描述某一特定应用领域中系统组织方式的惯用模式，按照软件架构风格，物联网系统属于 (48) 软件架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315956,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>物联网属于层次型架构，分为：</p><p>1）感知层：负责信息采集和物物之间的信息传输。</p><p>2）网络层：利用无线和有线网络对采集的数据进行编码、认证和传输。</p><p>3）应用层：实现应用。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "层次型",
                        "事件系统",
                        "数据线",
                        "C2"
                    ]
                },
                {
                    "index": 338,
                    "belong_page": 1,
                    "question_id": 315958,
                    "question_title": "<p>特定领域软件架构(Domam Specifie Sottware Architecture.DSSA)是指特定应用领域中为一组应用提供组织结构参考的标准软件架构。从功能覆盖的范围角度，(49) 定义了一个特定的系统族，包含整个系使族内的多个系统，可作为该领城系统的可行解决方案的一个通用软件架构；(50) 定义了在多个系统和多个系统族中功能区域的共有部分，在子系统级上涵盖多个系统族的特定部分功能。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315957,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>特定领域的架构可以分为：</p><p>(1)垂直域：定义了一个特定的系统族，包含整个系统族内的多个系统，结果是在该领域中可作为系统的可行解决方案的一个通用软件体系结构。</p><p>(2)水平域：定义了在多个系统和多个系统族中功能区城的共有部分。在子系统级 上涵盖多个系统族的特定部分功能。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "垂直域",
                        "水平域",
                        "功统域",
                        "属性域"
                    ]
                },
                {
                    "index": 339,
                    "belong_page": 1,
                    "question_id": 315959,
                    "question_title": "<p>特定领域软件架构(Domam Specifie Sottware Architecture.DSSA)是指特定应用领域中为一组应用提供组织结构参考的标准软件架构。从功能覆盖的范围角度，(49) 定义了一个特定的系统族，包含整个系使族内的多个系统，可作为该领城系统的可行解决方案的一个通用软件架构；(50) 定义了在多个系统和多个系统族中功能区域的共有部分，在子系统级上涵盖多个系统族的特定部分功能。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315957,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>特定领域的架构可以分为：</p><p>(1)垂直域：定义了一个特定的系统族，包含整个系统族内的多个系统，结果是在该领域中可作为系统的可行解决方案的一个通用软件体系结构。</p><p>(2)水平域：定义了在多个系统和多个系统族中功能区城的共有部分。在子系统级 上涵盖多个系统族的特定部分功能。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "垂直域",
                        "水平域",
                        "功统域",
                        "属性域"
                    ]
                },
                {
                    "index": 340,
                    "belong_page": 1,
                    "question_id": 315961,
                    "question_title": "<p>某公司拟开发一个个人社保管理系统，该系统的主要功能需求是根据个人收入、家庭负担、身体状态等情况，预估计算个人每年应支付的社保金，该社保金的计算方式可能随着国家经济的变化而动态改变，针对上述需求描述，该软件系统适宜采用 (51) 架构风格设计，该风格的主要特点是 (52)。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315960,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>社保金的计算方式不是固定的，可以采用Rule-based system （基于规则的系统）实现。基于规则的系统中的规则引擎负责对规则进行解释实现，能够将业务规则跟应用程序分离开来，减少了运维的工作。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "Layered system",
                        "Data flow",
                        "Event system",
                        "Rule-based system"
                    ]
                },
                {
                    "index": 341,
                    "belong_page": 1,
                    "question_id": 315962,
                    "question_title": "<p>某公司拟开发一个个人社保管理系统，该系统的主要功能需求是根据个人收入、家庭负担、身体状态等情况，预估计算个人每年应支付的社保金，该社保金的计算方式可能随着国家经济的变化而动态改变，针对上述需求描述，该软件系统适宜采用 (51) 架构风格设计，该风格的主要特点是 (52)。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315960,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>社保金的计算方式不是固定的，可以采用Rule-based system （基于规则的系统）实现。基于规则的系统中的规则引擎负责对规则进行解释实现，能够将业务规则跟应用程序分离开来，减少了运维的工作。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 将业务逻辑中频繁变化的部分定义为规则 ",
                        "各构件间相互独立",
                        "支持并发",
                        "无数据不工作"
                    ]
                },
                {
                    "index": 342,
                    "belong_page": 1,
                    "question_id": 315964,
                    "question_title": "<p>在架构评估过程中，评估人员所关注的是系统的质量属性。其中，(53) 是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的 (54)</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315963,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>安全性是系统向合法用户提供服务并阻止非法用户的能力。</p><p>性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的。</p><p>可用性是是系统能够正常运行的时间比例。经常用两次故障之间的时 间长度或在出现故障时系统能够恢复正常的速度来表示。</p><p>可靠性是软件系统在应用或系统错误面前，在意外或错误使用的情况 下维持软件系统的功能特性的基本能力。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "安全性",
                        "性能",
                        "可用性",
                        "可靠性"
                    ]
                },
                {
                    "index": 343,
                    "belong_page": 1,
                    "question_id": 315965,
                    "question_title": "<p>在架构评估过程中，评估人员所关注的是系统的质量属性。其中，(53) 是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的 (54)</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315963,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>安全性是系统向合法用户提供服务并阻止非法用户的能力。</p><p>性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的。</p><p>可用性是是系统能够正常运行的时间比例。经常用两次故障之间的时 间长度或在出现故障时系统能够恢复正常的速度来表示。</p><p>可靠性是软件系统在应用或系统错误面前，在意外或错误使用的情况 下维持软件系统的功能特性的基本能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "个数",
                        "速度",
                        "消耗",
                        "故障率"
                    ]
                },
                {
                    "index": 344,
                    "belong_page": 1,
                    "question_id": 315966,
                    "question_title": "<p>在一个分布式软件系统中，一个构件失去了与另一个远程构件的连接。在系统修复后，连接于 30 秒之内恢复，系统可以重新正常工作。这一描述体现了软件系统的 (55)</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315966,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>可用性是是系统能够正常运行的时间比例。经常用两次故障之间的时 间长度或在出现故障时系统能够恢复正常的速度来表示。“在系统修复后，连接于 30 秒之内恢复......”这属于可用性的特征。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "安全性",
                        "可用性",
                        "兼容性",
                        "可移植性"
                    ]
                },
                {
                    "index": 345,
                    "belong_page": 1,
                    "question_id": 315971,
                    "question_title": "<p>在架构评估中，场景是从（58）的角度对与系统交互的描述，一般采用（59）三方面来对场景进行描述。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315970,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>在进行体系结构（架构）评估时，一般首先要精确地得出具体的质量目标，并以之作为判定该体系结构优劣的标准。我们把为得出这些目标而采用的机制叫做场景。</p><p>场景是从风险承担者的角度对与系统的交互的简短描述。在体系结构评估中，一般采用刺激、环境和响应三方面来对场景进行描述。</p><p>刺激是场景中解释或描述风险承担者怎样引发与系统的交互部分。例如，用户可能会激发某个功能，维护可能会做某个更改，测试人员可能会执行某种测这些都属于对场景的刺激。</p><p>环境描述的是刺激发生时的情况。例如，当前系统处于什么状态？有什么特殊的约束条件？系统的负载是否很大？某个网络通道是否出现了阻塞等。</p><p>响应是指系统是如何通过体系结构对刺激作出反应的例如，用户所要求的功能是否得到满足?维护人员的修改是否成功?测试人员的测试是否成功等。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "系统设计者",
                        "系统开发者",
                        "风险承担者",
                        "系统测试者"
                    ]
                },
                {
                    "index": 346,
                    "belong_page": 1,
                    "question_id": 315972,
                    "question_title": "<p>在架构评估中，场景是从（58）的角度对与系统交互的描述，一般采用（59）三方面来对场景进行描述。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315970,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>在进行体系结构（架构）评估时，一般首先要精确地得出具体的质量目标，并以之作为判定该体系结构优劣的标准。我们把为得出这些目标而采用的机制叫做场景。</p><p>场景是从风险承担者的角度对与系统的交互的简短描述。在体系结构评估中，一般采用刺激、环境和响应三方面来对场景进行描述。</p><p>刺激是场景中解释或描述风险承担者怎样引发与系统的交互部分。例如，用户可能会激发某个功能，维护可能会做某个更改，测试人员可能会执行某种测这些都属于对场景的刺激。</p><p>环境描述的是刺激发生时的情况。例如，当前系统处于什么状态？有什么特殊的约束条件？系统的负载是否很大？某个网络通道是否出现了阻塞等。</p><p>响应是指系统是如何通过体系结构对刺激作出反应的例如，用户所要求的功能是否得到满足?维护人员的修改是否成功?测试人员的测试是否成功等。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 刺激源、制品、响应 ",
                        "刺激、制品、响应",
                        "刺激、环境、响应",
                        "刺激、制品、环境"
                    ]
                },
                {
                    "index": 347,
                    "belong_page": 1,
                    "question_id": 315974,
                    "question_title": "<p>在架构评估中，（60）是一个或多个构件（和／或构件之间的关系）的特性。改变加密级别的设计决策属于（61）,因为它可能会对安全性和性能产生非常重要的影响。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315973,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>敏感点是一个或多个构件（和／或构件之间的关系）的特性。</p><p>改变加密级别的设计决策属于权衡点,因为它可能会对安全性和性能产生非常重要的影响。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "敏感点",
                        "非风险点",
                        "权衡点",
                        "风险点"
                    ]
                },
                {
                    "index": 348,
                    "belong_page": 1,
                    "question_id": 315975,
                    "question_title": "<p>在架构评估中，（60）是一个或多个构件（和／或构件之间的关系）的特性。改变加密级别的设计决策属于（61）,因为它可能会对安全性和性能产生非常重要的影响。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315973,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>敏感点是一个或多个构件（和／或构件之间的关系）的特性。</p><p>改变加密级别的设计决策属于权衡点,因为它可能会对安全性和性能产生非常重要的影响。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "敏感点",
                        "非风险点",
                        "权衡点",
                        "风险点"
                    ]
                },
                {
                    "index": 349,
                    "belong_page": 1,
                    "question_id": 315977,
                    "question_title": "<p>在三层C/S架构中，（62）是应用的用户接口部分，负责与应用逻辑间的对话功能；（63）是应用的本体，负责具体的业务处理逻辑。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315976,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>三层C/S架构将应用系统分成表示层、功能层和数据层三个部分：</p><p>（1）表示层。表示层是系统的用户接口部分，担负着用户与系统之间的对话功能。它用于检查用户从键盘等输入的数据，显示输出的数据。</p><p>（2）功能层。功能层也称为业务逻辑层，是将具体的业务处理逻辑编入程序中。</p><p>（3）数据层。数据层相当于二层C/S架构中的服务器，负责对DBMS的管理和控制。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "表示层",
                        "感知层",
                        "设备层",
                        "业务逻辑层"
                    ]
                },
                {
                    "index": 350,
                    "belong_page": 1,
                    "question_id": 315978,
                    "question_title": "<p>在三层C/S架构中，（62）是应用的用户接口部分，负责与应用逻辑间的对话功能；（63）是应用的本体，负责具体的业务处理逻辑。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 315976,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>三层C/S架构将应用系统分成表示层、功能层和数据层三个部分：</p><p>（1）表示层。表示层是系统的用户接口部分，担负着用户与系统之间的对话功能。它用于检查用户从键盘等输入的数据，显示输出的数据。</p><p>（2）功能层。功能层也称为业务逻辑层，是将具体的业务处理逻辑编入程序中。</p><p>（3）数据层。数据层相当于二层C/S架构中的服务器，负责对DBMS的管理和控制。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "数据层",
                        "分发层",
                        "功能层",
                        "算法层"
                    ]
                },
                {
                    "index": 351,
                    "belong_page": 1,
                    "question_id": 348858,
                    "question_title": "<p>以下关于模块化设计的叙述中，正确的是（ ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348858,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 尽量考虑低内聚、高耦合，保持模块的相对独立 ",
                        " <br/>  通过信息隐蔽可以提高软件的可修改性、可测试性和可移植性，\n它也是现代软件设计的一个关键性原则。 ",
                        " 模块的规模要合适 ",
                        " <br/>  模块的扇入指模块直接下级模块的个数。模块的直属上级模块个\n数即为模块的扇出 "
                    ]
                },
                {
                    "index": 352,
                    "belong_page": 1,
                    "question_id": 348870,
                    "question_title": "<p>在基于体系结构的软件设计方法中，采用（1）来描述软件架构，采用（2） 但来描述功能需求，采用（3）来描述质量需求。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 348869,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "根据基于软件架构的设计的定义，基于软件架构的设计 （Architecture Based Software Development，ABSD） 强调由商业、质量和功能需求的组合驱动软件架构设计。它强 调采用视角和视图来描述软件架构，采用用例和质量属性场景 来描述需求。进一步来说，用例描述的是功能需求，质量属性 场景描述的是质量需求（或侧重于非功能需求）。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "类图和序列图",
                        "视角与视图",
                        "构件和类图",
                        "构件与功能"
                    ]
                },
                {
                    "index": 353,
                    "belong_page": 1,
                    "question_id": 348871,
                    "question_title": "<p>在基于体系结构的软件设计方法中，采用（1）来描述软件架构，采用（2） 但来描述功能需求，采用（3）来描述质量需求。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": null,
                    "new_parent_id": 348869,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "试题分析 根据基于软件架构的设计的定义，基于软件架构的设计 （Architecture Based Software Development，ABSD） 强调由商业、质量和功能需求的组合驱动软件架构设计。它强 调采用视角和视图来描述软件架构，采用用例和质量属性场景 来描述需求。进一步来说，用例描述的是功能需求，质量属性 场景描述的是质量需求（或侧重于非功能需求）。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "连接件",
                        "用例",
                        "质量场景",
                        "质量属性"
                    ]
                },
                {
                    "index": 354,
                    "belong_page": 1,
                    "question_id": 348873,
                    "question_title": "<p>某医院预约系统的部分需求为：患者可以查看医院发布的专家特长 介绍及其就诊时间；系统记录患者信息，患者预约特定时间就诊。 用DFD对其进行功能建模时，患者是（ ）；用ERD对其进行数据 建模时，患者是（ ）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348872,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "患者不涉及加工，为外部实体。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "外部实体",
                        "加工",
                        "数据流",
                        "数据存储"
                    ]
                },
                {
                    "index": 355,
                    "belong_page": 1,
                    "question_id": 348874,
                    "question_title": "<p>某医院预约系统的部分需求为：患者可以查看医院发布的专家特长 介绍及其就诊时间；系统记录患者信息，患者预约特定时间就诊。 用DFD对其进行功能建模时，患者是（ ）；用ERD对其进行数据 建模时，患者是（ ）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348872,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "患者有其信息，所以为实体。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "实体",
                        "属性",
                        "联系",
                        "弱实体"
                    ]
                },
                {
                    "index": 356,
                    "belong_page": 1,
                    "question_id": 348876,
                    "question_title": "<p>模块A、B和 C有相同的程序块，块内的语句之间没有任何联系，\n现把改程序块取出来，形成新的模块D，则模块D的内聚类型为（ ）\n内聚。以下关于该内聚类型的叙述中，不正确的是（ ）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348875,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "• 试题分析<br/>• 功能内聚：完成一个单一功能，各个部分协同工作，缺一不可。<br/>• 顺序内聚：处理元素相关，而且必须顺序执行。<br/>• 通信内聚：所有处理元素集中在一个数据结构的区域上。<br/>• 过程内聚：处理元素相关，而且必须按特定的次序执行。<br/>• 瞬时内聚：所包含的任务必须在同一时间间隔内执行（如初始化模 块）。<br/>• 逻辑内聚：完成逻辑上相关的一组任务。<br/>• 偶然内聚：完成一组没有关系或松散关系的任务。<br/>• 巧合内聚就是偶然内聚。偶然内聚由于内容都是不相关的，所以必 然导致它与外界多个模块有关联，这也使得模块间的耦合度增加。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "巧合",
                        "逻辑",
                        "时间",
                        "过程"
                    ]
                },
                {
                    "index": 357,
                    "belong_page": 1,
                    "question_id": 348877,
                    "question_title": "<p>模块A、B和 C有相同的程序块，块内的语句之间没有任何联系，\n现把改程序块取出来，形成新的模块D，则模块D的内聚类型为（ ）\n内聚。以下关于该内聚类型的叙述中，不正确的是（ ）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348875,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "• 试题分析<br/>• 功能内聚：完成一个单一功能，各个部分协同工作，缺一不可。<br/>• 顺序内聚：处理元素相关，而且必须顺序执行。<br/>• 通信内聚：所有处理元素集中在一个数据结构的区域上。<br/>• 过程内聚：处理元素相关，而且必须按特定的次序执行。<br/>• 瞬时内聚：所包含的任务必须在同一时间间隔内执行（如初始化模 块）。<br/>• 逻辑内聚：完成逻辑上相关的一组任务。<br/>• 偶然内聚：完成一组没有关系或松散关系的任务。<br/>• 巧合内聚就是偶然内聚。偶然内聚由于内容都是不相关的，所以必 然导致它与外界多个模块有关联，这也使得模块间的耦合度增加。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "具有最低的内聚性",
                        "不易修改和维护",
                        "不易理解",
                        "不影响模块间的耦合关系"
                    ]
                },
                {
                    "index": 358,
                    "belong_page": 1,
                    "question_id": 348880,
                    "question_title": "<p>特定领域软件架构（Domain Specific Software Architecture,\nDSSA）的基本活动包括领域分析、领域设计和领域实现。其中，领域分\n析的主要目的是获得领域模型。领域设计的主要目标是获得（1），领域\n实现是为了（2）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348879,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "试题分析\n特定领域软件架构（Domain Specific Software Architecture，DSSA）\n以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等\n组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。\nDSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主\n要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域\n需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求\n的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重\n用信息，并对基础软件架构进行实现。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "特定领域软件需求",
                        "特定领域软件架构",
                        "特定领域软件设计模型",
                        "特定领域软件重用模型"
                    ]
                },
                {
                    "index": 359,
                    "belong_page": 1,
                    "question_id": 348881,
                    "question_title": "<p>特定领域软件架构（Domain Specific Software Architecture,\nDSSA）的基本活动包括领域分析、领域设计和领域实现。其中，领域分\n析的主要目的是获得领域模型。领域设计的主要目标是获得（1），领域\n实现是为了（2）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348879,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "试题分析\n特定领域软件架构（Domain Specific Software Architecture，DSSA）\n以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等\n组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。\nDSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主\n要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域\n需求；领域设计的主要目标是获得DSSA，DSSA描述领域模型中表示需求\n的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重\n用信息，并对基础软件架构进行实现。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "评估多种软件架构",
                        "验证领域模型",
                        "开发和组织可重用信息，对基础软件架构进行实现",
                        "特定领域软件重用模型"
                    ]
                },
                {
                    "index": 360,
                    "belong_page": 1,
                    "question_id": 348886,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348885,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "性能",
                        "吞吐量&nbsp;",
                        "可靠性",
                        "可修改性"
                    ]
                },
                {
                    "index": 361,
                    "belong_page": 1,
                    "question_id": 348887,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348885,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "操作串行化",
                        "资源调度",
                        "心跳",
                        "内置监控器"
                    ]
                },
                {
                    "index": 362,
                    "belong_page": 1,
                    "question_id": 348888,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348885,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "可测试性",
                        "易用性",
                        "可用性",
                        "互操作性"
                    ]
                },
                {
                    "index": 363,
                    "belong_page": 1,
                    "question_id": 348889,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348885,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "主动冗余",
                        "信息隐藏&nbsp;",
                        "抽象接口",
                        "记录/回放"
                    ]
                },
                {
                    "index": 364,
                    "belong_page": 1,
                    "question_id": 348890,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348885,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "5",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "可用性",
                        "安全性",
                        "可测试性",
                        "可修改性"
                    ]
                },
                {
                    "index": 365,
                    "belong_page": 1,
                    "question_id": 348891,
                    "question_title": "<p>某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别\n出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易\n请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）\n架构策略实现该属性；\n“当系统由于软件故障意外崩溃后，需要在0.5小时\n内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实\n现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”\n主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348885,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "6",
                    "analyze": "对于题干描述：\n“在并发用户数量为1000人时，用户的交易请求需要\n在0.5秒内得到响应”\n，主要与性能这一质量属性相关，实现该属性\n的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、\n采用资源调度等。\n“当系统由于软件故障意外崩溃后，需要在0.5小\n时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、\nPing/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；\n“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要\n与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、\n追踪审计等架构策略实现该属性",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "内置监控器",
                        "记录/回放",
                        "追踪审计",
                        "维护现有接口"
                    ]
                },
                {
                    "index": 366,
                    "belong_page": 1,
                    "question_id": 348893,
                    "question_title": "<p>识别风险、非风险、敏感点和权衡点是进行软件架构评估的重要过程。\n“改变业务数据编码方式会对系统的性能和安全性产生影响”是对（ ）\n的描述，\n“假设用户请求的频率为每秒1个，业务处理时间小于30毫秒，\n则将请求响应时间设定为1秒钟是可以接受的”是对（ ）的描述。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348892,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "风险是某个存在问题的架构设计决策，可能会导致问题；非风险与风险相\n对，是良好的架构设计决策；敏感点是一个或多个构件的特性；权衡点是\n影响多个质量属性的特性，是多个质量属性的敏感点。根据上述定义，可\n以看出“改变业务数据编码方式会对系统的性能和安全性产生影响”是对\n权衡点的描述，\n“假设用户请求的频率为每秒1个，业务处理时间小于30毫\n秒，则将请求响应时间设定为1秒钟是可以接受的”是对非风险的描述。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "风险点",
                        "非风险",
                        "敏感点",
                        "权衡点"
                    ]
                },
                {
                    "index": 367,
                    "belong_page": 1,
                    "question_id": 348894,
                    "question_title": "<p>识别风险、非风险、敏感点和权衡点是进行软件架构评估的重要过程。\n“改变业务数据编码方式会对系统的性能和安全性产生影响”是对（ ）\n的描述，\n“假设用户请求的频率为每秒1个，业务处理时间小于30毫秒，\n则将请求响应时间设定为1秒钟是可以接受的”是对（ ）的描述。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348892,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "风险是某个存在问题的架构设计决策，可能会导致问题；非风险与风险相\n对，是良好的架构设计决策；敏感点是一个或多个构件的特性；权衡点是\n影响多个质量属性的特性，是多个质量属性的敏感点。根据上述定义，可\n以看出“改变业务数据编码方式会对系统的性能和安全性产生影响”是对\n权衡点的描述，\n“假设用户请求的频率为每秒1个，业务处理时间小于30毫\n秒，则将请求响应时间设定为1秒钟是可以接受的”是对非风险的描述",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "风险点&nbsp;",
                        "非风险&nbsp;",
                        "敏感点&nbsp;",
                        "权衡点"
                    ]
                },
                {
                    "index": 368,
                    "belong_page": 1,
                    "question_id": 348896,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是\n一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和\n可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包\n括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估\n过程强调以（ ）作为架构评估的核心概念。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348895,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "架构权衡分析方法(Architecture Tradeoff Analysis Method，\nATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、\n可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可\n以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性\n模型构造和分析、架构决策与折中，整个评估过程强调以属性作\n为架构评估的核心概念",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "可测试性&nbsp;",
                        "可移植性&nbsp;",
                        "可用性&nbsp;",
                        "易用性"
                    ]
                },
                {
                    "index": 369,
                    "belong_page": 1,
                    "question_id": 348897,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是\n一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和\n可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包\n括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估\n过程强调以（ ）作为架构评估的核心概念。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348895,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "架构权衡分析方法(Architecture Tradeoff Analysis Method，\nATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、\n可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可\n以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性\n模型构造和分析、架构决策与折中，整个评估过程强调以属性作\n为架构评估的核心概念",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "架构视图&nbsp;",
                        "架构排序&nbsp;",
                        "架构风格&nbsp;",
                        "架构策略"
                    ]
                },
                {
                    "index": 370,
                    "belong_page": 1,
                    "question_id": 348898,
                    "question_title": "<p>架构权衡分析方法(Architecture Tradeoff Analysis Method，ATAM)是\n一种系统架构评估方法，主要在系统开发之前，针对性能、（ ）、安全性和\n可修改性等质量属性进行评价和折中。ATAM可以分为4个主要的活动阶段，包\n括需求收集、（ ）描述、属性模型构造和分析、架构决策与折中，整个评估\n过程强调以（ ）作为架构评估的核心概念。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348895,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "架构权衡分析方法(Architecture Tradeoff Analysis Method，\nATAM)是一种系统架构评估方法，主要在系统开发之前，针对性能、\n可用性、安全性和可修改性等质量属性进行评价和折中。ATAM可\n以分为4个主要的活动阶段，包括需求收集、架构视图描述、属性\n模型构造和分析、架构决策与折中，整个评估过程强调以属性作\n为架构评估的核心概念",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "用例&nbsp;",
                        "视图&nbsp;",
                        "属性&nbsp;",
                        "模型"
                    ]
                },
                {
                    "index": 371,
                    "belong_page": 1,
                    "question_id": 348900,
                    "question_title": "<p>在某销售系统中，客户采用扫描二维码进行支付。若采用面向对象\n方法开发该销售系统，则客户类属于（ ）类， 二维码类属于（ ）\n类。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348899,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "类可以分为三种：实体类、接口类（边界类）和控制类。实体类的\n对象表示现实世界中真实的实体，如人、物等。接口类（边界类）\n的对象为用户提供一种与系统合作交互的方式，分为人和系统两大\n类，其中人的接口可以是显示屏、窗口、Web窗体、对话框、菜单、\n列表框、其他显示控制、条形码、二维码或者用户与系统交互的其\n他方法。系统接口涉及到把数据发送到其他系统，或者从其他系统\n接收数据。控制类的对象用来控制活动流，充当协调者",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "接口&nbsp;",
                        "实体&nbsp;",
                        "控制&nbsp;",
                        "状态"
                    ]
                },
                {
                    "index": 372,
                    "belong_page": 1,
                    "question_id": 348901,
                    "question_title": "<p>在某销售系统中，客户采用扫描二维码进行支付。若采用面向对象\n方法开发该销售系统，则客户类属于（ ）类， 二维码类属于（ ）\n类。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348899,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "类可以分为三种：实体类、接口类（边界类）和控制类。实体类的\n对象表示现实世界中真实的实体，如人、物等。接口类（边界类）\n的对象为用户提供一种与系统合作交互的方式，分为人和系统两大\n类，其中人的接口可以是显示屏、窗口、Web窗体、对话框、菜单、\n列表框、其他显示控制、条形码、二维码或者用户与系统交互的其\n他方法。系统接口涉及到把数据发送到其他系统，或者从其他系统\n接收数据。控制类的对象用来控制活动流，充当协调者。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "接口&nbsp;",
                        "实体&nbsp;",
                        "控制&nbsp;",
                        "状态"
                    ]
                },
                {
                    "index": 373,
                    "belong_page": 1,
                    "question_id": 348903,
                    "question_title": "<p>如下所示的图为UML的（ ），用于展示某汽车导航系统中（ ）。\nMapping对象获取汽车当前位置（GPS Location）的消息为\n（ ）<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20220819/1660902547572315.png\" title=\"1660902547572315.png\" alt=\"image.png\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348902,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "通信图（communication diagram）。通信图是一种交互图，它\n强调收发消息的对象或参与者的结构组织。顺序图和通信图表达了\n类似的基本概念，但它们所强调的概念不同，顺序图强调的是时序，\n通信图强调的是对象之间的组织结构（关系）；获取汽车当前位置\n的消息为2.1：getCarLocation()",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        "类图&nbsp;",
                        "组件图&nbsp;",
                        "通信图&nbsp;",
                        "部署图"
                    ]
                },
                {
                    "index": 374,
                    "belong_page": 1,
                    "question_id": 348904,
                    "question_title": "<p>如下所示的图为UML的（ ），用于展示某汽车导航系统中（ ）。\nMapping对象获取汽车当前位置（GPS Location）的消息为\n（ ）<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20220819/1660902547572315.png\" title=\"1660902547572315.png\" alt=\"image.png\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348902,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "通信图（communication diagram）。通信图是一种交互图，它\n强调收发消息的对象或参与者的结构组织。顺序图和通信图表达了\n类似的基本概念，但它们所强调的概念不同，顺序图强调的是时序，\n通信图强调的是对象之间的组织结构（关系）；获取汽车当前位置\n的消息为2.1：getCarLocation()。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "对象之间的消息流及其顺序",
                        "完成任务所进行的活动流",
                        "对象的状态转换及其时间顺序",
                        "对象之间消息的时间顺序"
                    ]
                },
                {
                    "index": 375,
                    "belong_page": 1,
                    "question_id": 348905,
                    "question_title": "<p>如下所示的图为UML的（ ），用于展示某汽车导航系统中（ ）。\nMapping对象获取汽车当前位置（GPS Location）的消息为\n（ ）<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20220819/1660902547572315.png\" title=\"1660902547572315.png\" alt=\"image.png\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348902,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "通信图（communication diagram）。通信图是一种交互图，它\n强调收发消息的对象或参与者的结构组织。顺序图和通信图表达了\n类似的基本概念，但它们所强调的概念不同，顺序图强调的是时序，\n通信图强调的是对象之间的组织结构（关系）；获取汽车当前位置\n的消息为2.1：getCarLocation()。",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "1: getGraphic()&nbsp;",
                        "2: getCarPos()&nbsp;",
                        "1.1: CurrentArea()&nbsp;",
                        "2. 1: getCarLocation()"
                    ]
                },
                {
                    "index": 376,
                    "belong_page": 1,
                    "question_id": 348907,
                    "question_title": "<p>假设现在要创建一个Web应用框架，基于此框架能够创建不同的具\n体Web应用，比如博客、新闻网站和网上商店等；并可以为每个\nWeb应用创建不同的主题样式，如浅色或深色等。这一业务需求的\n类图设计适合采用（ ）模式（如下图所示）。其中（ ）是客户程\n序使用的主要接口，维护对主题类型的引用。此模式为（ ），体现\n的最主要的意图是（ ）<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20220819/1660902813912014.png\" title=\"1660902813912014.png\" alt=\"image.png\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348906,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "略",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "观察者（Observer）&nbsp;",
                        "访问者（Ⅴisitor）",
                        "策略（Strategy）&nbsp;",
                        "桥接（Bridge）"
                    ]
                },
                {
                    "index": 377,
                    "belong_page": 1,
                    "question_id": 348908,
                    "question_title": "<p>假设现在要创建一个Web应用框架，基于此框架能够创建不同的具\n体Web应用，比如博客、新闻网站和网上商店等；并可以为每个\nWeb应用创建不同的主题样式，如浅色或深色等。这一业务需求的\n类图设计适合采用（ ）模式（如下图所示）。其中（ ）是客户程\n序使用的主要接口，维护对主题类型的引用。此模式为（ ），体现\n的最主要的意图是（ ）<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20220819/1660902813912014.png\" title=\"1660902813912014.png\" alt=\"image.png\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348906,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "略",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "WebApplication&nbsp;",
                        "Blog&nbsp;",
                        "Theme&nbsp;",
                        "Ligh"
                    ]
                },
                {
                    "index": 378,
                    "belong_page": 1,
                    "question_id": 348909,
                    "question_title": "<p>假设现在要创建一个Web应用框架，基于此框架能够创建不同的具\n体Web应用，比如博客、新闻网站和网上商店等；并可以为每个\nWeb应用创建不同的主题样式，如浅色或深色等。这一业务需求的\n类图设计适合采用（ ）模式（如下图所示）。其中（ ）是客户程\n序使用的主要接口，维护对主题类型的引用。此模式为（ ），体现\n的最主要的意图是（ ）<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20220819/1660902813912014.png\" title=\"1660902813912014.png\" alt=\"image.png\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348906,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "略",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "创建型对象模式&nbsp;",
                        "结构型对象模式",
                        "行为型类模式&nbsp;",
                        "行为型对象模式"
                    ]
                },
                {
                    "index": 379,
                    "belong_page": 1,
                    "question_id": 348910,
                    "question_title": "<p>假设现在要创建一个Web应用框架，基于此框架能够创建不同的具\n体Web应用，比如博客、新闻网站和网上商店等；并可以为每个\nWeb应用创建不同的主题样式，如浅色或深色等。这一业务需求的\n类图设计适合采用（ ）模式（如下图所示）。其中（ ）是客户程\n序使用的主要接口，维护对主题类型的引用。此模式为（ ），体现\n的最主要的意图是（ ）<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20220819/1660902813912014.png\" title=\"1660902813912014.png\" alt=\"image.png\"/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348906,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "略",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "将抽象部分与其实现部分分离，使它们都可以独立地变化&nbsp;",
                        "动态地给一个对象添加一些额外的职责&nbsp;",
                        "为其他对象提供一种代理以控制对这个对象的访问&nbsp;",
                        "将一个类的接口转换成客户希望的另外一个接口"
                    ]
                },
                {
                    "index": 380,
                    "belong_page": 1,
                    "question_id": 348912,
                    "question_title": "<p>对计算机评价的主要性能指标有时钟频率、( )、运算精度和内存容量等。对数据库管理系统评价的主要性能指标有( )、数据库所允许的索引数量和最大并发实物处理能力等。</p><p><br/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348911,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>性能指标，是软、硬件的性能指标的集成。在硬件中,包括计算机、各种</p><p>通信交换设备、各类网络设备等;在软件中,包括:操作系统、协议以及应用程序等。</p><p>对计算机评价的主要性能指标有:时钟频率(主频) ;运算速度;运算精</p><p>度;内存的存储容量t;存储器的存取周期;数据处理速率PDR(processing data rate) ;吞吐率;各种响应时间;各种利用率;RASIS特性(即:可靠性Reliability、 可用性Availability、 可维护性、完整性和安全性;平均故障响应时间;兼容性;可扩充性;性能价格比。<br/>衡量事务处理能力、负载均衡能力、最大连接数等等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 丢包率 ",
                        " 端口吞吐量 ",
                        "可移植性",
                        "数据处理速率"
                    ]
                },
                {
                    "index": 381,
                    "belong_page": 1,
                    "question_id": 348913,
                    "question_title": "<p>对计算机评价的主要性能指标有时钟频率、( )、运算精度和内存容量等。对数据库管理系统评价的主要性能指标有( )、数据库所允许的索引数量和最大并发实物处理能力等。</p><p><br/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348911,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>性能指标，是软、硬件的性能指标的集成。在硬件中，包括计算机、各种通信交换设备、各类网络设备等;在软件中,包括:操作系统、协议以及应用程序等。对计算机评价的主要性能指标有:时钟频率(主频) ;运算速度;运算精度;内存的存储容量t;存储器的存取周期;数据处理速率PDR</p><p>(processing data rate) ;吞吐率;各种响应时间;各种利用率;</p><p>RASIS特性(即:可靠性Reliability、 可用性Availability、 可维护性、完</p><p>整性和安全性;平均故障响应时间;兼容性;可扩充性;性能价格比。<br/>衡量事务处理能力、负载均衡能力、最大连接数等等。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " MIPS ",
                        " 支持协议和标准 ",
                        "最大连接数",
                        "时延抖动"
                    ]
                },
                {
                    "index": 382,
                    "belong_page": 1,
                    "question_id": 348915,
                    "question_title": "<p>为了优化系统的性能，有时需要对系统进行调整。对于不同的系统，其调整参数也不尽相同。例如，对于数据库系统，主要包括CPU/内存使用状况、( )、进程/线程使用状态、日志文件大小等。对于应用系统，主要包括应用系统的可用性、响应时间、( ) 、特定应用资源占用等。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348914,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>为了优化系统性能，有时需要对系统进行调整。对于数据库系统，性能</p><p>调整主要包括CPU/内存使用状况、优化数据库设计、优化数据库管理</p><p>以及进程/线程状态、硬盘剩余空间、日志文件大小等;对于应用系统，</p><p>性能调整主要包括应用系统的可用性、响应时间、并发用户数以及特定</p><p>应用的系统资源占用等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 数据丢包率 ",
                        " 端口吞吐量 ",
                        " 数据处理速率 ",
                        "查询语句性能"
                    ]
                },
                {
                    "index": 383,
                    "belong_page": 1,
                    "question_id": 348916,
                    "question_title": "<p>为了优化系统的性能，有时需要对系统进行调整。对于不同的系统，其调整参数也不尽相同。例如，对于数据库系统，主要包括CPU/内存使用状况、( )、进程/线程使用状态、日志文件大小等。对于应用系统，主要包括应用系统的可用性、响应时间、( ) 、特定应用资源占用等。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348914,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>为了优化系统性能，有时需要对系统进行调整。对于数据库系统，性能</p><p>调整主要包括CPU/内存使用状况、优化数据库设计、优化数据库管理</p><p>以及进程/线程状态、硬盘剩余空间、日志文件大小等;对于应用系统，</p><p>性能调整主要包括应用系统的可用性、响应时间、并发用户数以及特定</p><p>应用的系统资源占用等。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 并发用户数 ",
                        " 支持协议和标准 ",
                        " 最大连接数 ",
                        "时延抖动"
                    ]
                },
                {
                    "index": 384,
                    "belong_page": 1,
                    "question_id": 348918,
                    "question_title": "<p>计算机系统性能评估中，( )考虑了各类指令在程序中所占的比例。( )考虑了诸如I/O结构、操作系统、编译程序的效率对系统性能的影响,可以较为准确评估计算机系统的实际性能。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348917,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "略",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 时钟频率法 ",
                        " 等效指令速度法 ",
                        "综合理论性能法",
                        "基准程序法"
                    ]
                },
                {
                    "index": 385,
                    "belong_page": 1,
                    "question_id": 348919,
                    "question_title": "<p>计算机系统性能评估中，( )考虑了各类指令在程序中所占的比例。( )考虑了诸如I/O结构、操作系统、编译程序的效率对系统性能的影响,可以较为准确评估计算机系统的实际性能。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348917,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "略",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 时钟频率法 ",
                        " 等效指令速度法 ",
                        " 综合理论性能法 ",
                        " 基准程序法 "
                    ]
                },
                {
                    "index": 386,
                    "belong_page": 1,
                    "question_id": 348921,
                    "question_title": "<p>DES 是一种( )，其密钥长度为 56 位，3DES 是利用 DES 的加密\n方式，对明文进行 3 次 加密，以提高加密强度，其密钥长度是 ( ) 位</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348920,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "DES加密是一种对称加密算法，加密与解密秘钥相同。由于DES的密\n钥长度较短，为了提高安全性，就出现了使用112位密钥对数据进行\n三次加密的算法（3DES），即用两个56位的密钥K1和K2，发送方\n用K1加密，K2解密，再使用K1加密；接收方则使用K1解密，K2加\n密，再使用K1解密，其效果相当于将密钥长度加倍。",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        "共享密钥&nbsp;",
                        "公开密钥",
                        "报文摘要&nbsp;",
                        "访问控制"
                    ]
                },
                {
                    "index": 387,
                    "belong_page": 1,
                    "question_id": 348922,
                    "question_title": "<p>DES 是一种( )，其密钥长度为 56 位，3DES 是利用 DES 的加密\n方式，对明文进行 3 次 加密，以提高加密强度，其密钥长度是 ( ) 位</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 348920,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "DES加密是一种对称加密算法，加密与解密秘钥相同。由于DES的密\n钥长度较短，为了提高安全性，就出现了使用112位密钥对数据进行\n三次加密的算法（3DES），即用两个56位的密钥K1和K2，发送方\n用K1加密，K2解密，再使用K1加密；接收方则使用K1解密，K2加\n密，再使用K1解密，其效果相当于将密钥长度加倍。",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        "56&nbsp;",
                        "112&nbsp;",
                        "128&nbsp;",
                        "168"
                    ]
                },
                {
                    "index": 388,
                    "belong_page": 1,
                    "question_id": 350337,
                    "question_title": "<p>在构件组装过程中需要检测并解决架构失配问题。其中&nbsp;（45） 失配主要包括由于系统对构件基础设施、控制模型和数据模型的假设存在冲突引起的失配。&nbsp;（46） 失配包括由于系统对构件交互协议、构件连接时数据格式的假设存在冲突引起的失配。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350336,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>在架构模型的指导下，可复用构件可以通过组装的方式在较高层次上实现系统，并能够提高系统实现的效率。在构件组装过程中需要检测并解决架构失配问题。其中构件失配主要包括由于系统对构件基础设施、控制模型和数据模型的假设存在冲突引起的失配。连接子失配包括由于系统对构件交互协议、构件连接时数据格式的假设存在冲突引起的失配。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 构件 ",
                        " 模型 ",
                        " 协议 ",
                        " 连接子 "
                    ]
                },
                {
                    "index": 389,
                    "belong_page": 1,
                    "question_id": 350338,
                    "question_title": "<p>在构件组装过程中需要检测并解决架构失配问题。其中&nbsp;（45） 失配主要包括由于系统对构件基础设施、控制模型和数据模型的假设存在冲突引起的失配。&nbsp;（46） 失配包括由于系统对构件交互协议、构件连接时数据格式的假设存在冲突引起的失配。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350336,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>在架构模型的指导下，可复用构件可以通过组装的方式在较高层次上实现系统，并能够提高系统实现的效率。在构件组装过程中需要检测并解决架构失配问题。其中构件失配主要包括由于系统对构件基础设施、控制模型和数据模型的假设存在冲突引起的失配。连接子失配包括由于系统对构件交互协议、构件连接时数据格式的假设存在冲突引起的失配。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 构件 ",
                        " 模型 ",
                        " 协议 ",
                        " 连接子 "
                    ]
                },
                {
                    "index": 390,
                    "belong_page": 1,
                    "question_id": 350339,
                    "question_title": "<p>以下关于软件中间件的叙述，错误的是&nbsp;（47） 。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350339,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。</p><p>软件中间件有助于封装共性问题的解决方法，提供简单统一的接口，从而减少开发人员软件设计的复杂度，提高开发效率。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 中间件通过标准接口实现与应用程序的关联，提供特定功能的服务 ",
                        " 使用中间件可以提高应用软件可移植性 ",
                        " 使用中间件将增加应用软件设计的复杂度 ",
                        " 使用中间件有助于提高开发效率 "
                    ]
                },
                {
                    "index": 391,
                    "belong_page": 1,
                    "question_id": 350340,
                    "question_title": "<p>架构描述语言(Architecture Description Language，ADL)是一种为明确说明软件系统的概念架构和对这些概念架构建模提供功能的语言。ADL主要包括以下组成部分：组件、组件接口、&nbsp;（48） 和架构配置。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350340,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>ADL 是一种为明确说明软件系统的概念架构和为这些概念架构建模提供功能的语言，主 要包括组件、组件接口、连接件和架构配置。ADL 对连接件的重视成为区分它和其他建模语 言的重要特征之一。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 架构风格 ",
                        " 架构实现 ",
                        " 连接件 ",
                        " 组件实现 "
                    ]
                },
                {
                    "index": 392,
                    "belong_page": 1,
                    "question_id": 350342,
                    "question_title": "<p>特定领域软件架构（Domain Specific Software Achitecture，DSSA）是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA通常是一个具有三个层次的系统模型，包括&nbsp;（49） 环境、领域特定应用开发环境和应用执行环境，其中&nbsp;（50） 主要在领域特定应用开发环境中工作。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350341,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>本题主要考查特定领域软件架构的基础知识。</p><p>DSSA是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。它通常是一个具有3个层次的系统模型，包括领域开发环境、领域特定应用开发环境和应用执行环境，其中应用工程师主要在领域特定应用开发环境中工作。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 领域需求 ",
                        " 领域开发 ",
                        " 领域执行 ",
                        " 领域应用 "
                    ]
                },
                {
                    "index": 393,
                    "belong_page": 1,
                    "question_id": 350343,
                    "question_title": "<p>特定领域软件架构（Domain Specific Software Achitecture，DSSA）是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA通常是一个具有三个层次的系统模型，包括&nbsp;（49） 环境、领域特定应用开发环境和应用执行环境，其中&nbsp;（50） 主要在领域特定应用开发环境中工作。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350341,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>本题主要考查特定领域软件架构的基础知识。</p><p>DSSA是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。它通常是一个具有3个层次的系统模型，包括领域开发环境、领域特定应用开发环境和应用执行环境，其中应用工程师主要在领域特定应用开发环境中工作。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 操作员 ",
                        " 领域架构师 ",
                        " 应用工程师 ",
                        " 程序员 "
                    ]
                },
                {
                    "index": 394,
                    "belong_page": 1,
                    "question_id": 350345,
                    "question_title": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的&nbsp;（51） 特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用&nbsp;（52） 架构风格。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350344,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的结构和语义两个方面的特征。对于语音识别和知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用黑板架构风格，以知识为中心进行分析与推理。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 语法和语义 ",
                        " 结构和语义 ",
                        " 静态和动态 ",
                        " 行为和约束 "
                    ]
                },
                {
                    "index": 395,
                    "belong_page": 1,
                    "question_id": 350346,
                    "question_title": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的&nbsp;（51） 特征。对于语音识别、知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用&nbsp;（52） 架构风格。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350344,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>软件架构风格描述某一特定领域中的系统组织方式和惯用模式，反映了领域中众多系统所共有的结构和语义两个方面的特征。对于语音识别和知识推理等问题复杂、解空间很大、求解过程不确定的这一类软件系统，通常会采用黑板架构风格，以知识为中心进行分析与推理。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 管道-过滤器 ",
                        " 解释器 ",
                        " 黑板 ",
                        " 过程控制 "
                    ]
                },
                {
                    "index": 396,
                    "belong_page": 1,
                    "question_id": 350347,
                    "question_title": "<p>系统中的构件和连接件都有一个顶部和一个底部，构件的顶部应连接到某连接件的底部；构件的底部则应连接到某连接的顶部，构件和构件之间不允许直接连接。连接件直接连接时，必须由其中一个的底部连接到另一个的顶部。上述构件和连接件的组织规则描述的是&nbsp;（53） 架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350347,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>C2体系结构风格可以概括为通过连接件绑定在一起按照一组规则运作的并行构件网络，其中的系统组织规则如下。</p><p>（1）系统中的构件和连接件都有一个顶部和一个底部。</p><p>（2）构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接件的顶部，而构件与构件之间的直接连接是不允许的。</p><p>（3）一个连接件可以和任意数目的其他构件和连接件连接。</p><p>（4）当两个连接件进行直接连接时，必须将其中一个的底部连接到另一个的顶部。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 管道―过滤器 ",
                        " 分层系统 ",
                        " C2 ",
                        " 面向对象 "
                    ]
                },
                {
                    "index": 397,
                    "belong_page": 1,
                    "question_id": 350349,
                    "question_title": "<p>若系统中的某子模块需要为其他模块提供访问不同数据库系统的功能，这些数据库系统提供的访问接口有一定的差异，但访问过程却都是相同的，例如，先连接数据库，再打开数据库，最后对数据进行查询。针对上述需求，可以采用&nbsp;（54） 设计模式抽象出相同的数据库访问过程，该设计模式&nbsp;（55） 。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350348,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>外观模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 外观 ",
                        " 装饰 ",
                        " 桥接 ",
                        " 享元 "
                    ]
                },
                {
                    "index": 398,
                    "belong_page": 1,
                    "question_id": 350350,
                    "question_title": "<p>若系统中的某子模块需要为其他模块提供访问不同数据库系统的功能，这些数据库系统提供的访问接口有一定的差异，但访问过程却都是相同的，例如，先连接数据库，再打开数据库，最后对数据进行查询。针对上述需求，可以采用&nbsp;（54） 设计模式抽象出相同的数据库访问过程，该设计模式&nbsp;（55） 。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350348,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>外观模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可以动态、透明地给单个对象添加职责 ",
                        " 为子系统定义了一个高层接口，这个接口使得这一子系统更加容易使用 ",
                        " 通过运用共享技术，有效支持大量细粒度的对象 ",
                        " 将抽象部分与它的实现部分分离，使它们都可以独立地变化 "
                    ]
                },
                {
                    "index": 399,
                    "belong_page": 1,
                    "question_id": 350352,
                    "question_title": "<p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与&nbsp;（56） 质量属性相关，通常可采用&nbsp;（57） 架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与&nbsp;（58） 质量属性相关，通常可采用&nbsp;（59） 架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与&nbsp;（60） 质量属性相关，通常可采用&nbsp;（61） 架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350351,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与性能这一质量属性相关，实现该属性的常见架构策略包括增加计算资源、减少计算开销、引入并发机制、采用资源调度等；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 性能 ",
                        " 可用性 ",
                        " 易用性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 400,
                    "belong_page": 1,
                    "question_id": 350353,
                    "question_title": "<p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与&nbsp;（56） 质量属性相关，通常可采用&nbsp;（57） 架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与&nbsp;（58） 质量属性相关，通常可采用&nbsp;（59） 架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与&nbsp;（60） 质量属性相关，通常可采用&nbsp;（61） 架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350351,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与性能这一质量属性相关，实现该属性的常见架构策略包括增加计算资源、减少计算开销、引入并发机制、采用资源调度等；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 主动冗余 ",
                        " 信息隐藏 ",
                        " 抽象接口&nbsp;&nbsp; ",
                        " 记录/回放 "
                    ]
                },
                {
                    "index": 401,
                    "belong_page": 1,
                    "question_id": 350354,
                    "question_title": "<p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与&nbsp;（56） 质量属性相关，通常可采用&nbsp;（57） 架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与&nbsp;（58） 质量属性相关，通常可采用&nbsp;（59） 架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与&nbsp;（60） 质量属性相关，通常可采用&nbsp;（61） 架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350351,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与性能这一质量属性相关，实现该属性的常见架构策略包括增加计算资源、减少计算开销、引入并发机制、采用资源调度等；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 易用性 ",
                        " 性能 ",
                        " 互操作性 "
                    ]
                },
                {
                    "index": 402,
                    "belong_page": 1,
                    "question_id": 350355,
                    "question_title": "<p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与&nbsp;（56） 质量属性相关，通常可采用&nbsp;（57） 架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与&nbsp;（58） 质量属性相关，通常可采用&nbsp;（59） 架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与&nbsp;（60） 质量属性相关，通常可采用&nbsp;（61） 架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350351,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与性能这一质量属性相关，实现该属性的常见架构策略包括增加计算资源、减少计算开销、引入并发机制、采用资源调度等；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 操作串行化 ",
                        " 资源调度 ",
                        " 心跳&nbsp;&nbsp; ",
                        " 内置监控器 "
                    ]
                },
                {
                    "index": 403,
                    "belong_page": 1,
                    "question_id": 350356,
                    "question_title": "<p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与&nbsp;（56） 质量属性相关，通常可采用&nbsp;（57） 架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与&nbsp;（58） 质量属性相关，通常可采用&nbsp;（59） 架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与&nbsp;（60） 质量属性相关，通常可采用&nbsp;（61） 架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350351,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "5",
                    "analyze": "<p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与性能这一质量属性相关，实现该属性的常见架构策略包括增加计算资源、减少计算开销、引入并发机制、采用资源调度等；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性 ",
                        " 安全性 ",
                        " 可测试性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 404,
                    "belong_page": 1,
                    "question_id": 350357,
                    "question_title": "<p>某公司欲开发一个网上商城系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与&nbsp;（56） 质量属性相关，通常可采用&nbsp;（57） 架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与&nbsp;（58） 质量属性相关，通常可采用&nbsp;（59） 架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与&nbsp;（60） 质量属性相关，通常可采用&nbsp;（61） 架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350351,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "6",
                    "analyze": "<p>“系统主站断电后，能够在2分钟内自动切换到备用站点，并恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“在并发用户数不超过1000人时，用户的交易请求应该在0.5s内完成”主要与性能这一质量属性相关，实现该属性的常见架构策略包括增加计算资源、减少计算开销、引入并发机制、采用资源调度等；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 内置监控器 ",
                        " 记录/回放 ",
                        " 追踪审计 ",
                        " 维护现有接口 "
                    ]
                },
                {
                    "index": 405,
                    "belong_page": 1,
                    "question_id": 350359,
                    "question_title": "<p>架构权衡分析方法（Architecture Tradeoff Analysis Method，ATAM）是在基于场景的架构分析方法（Scenarios-based Architecture Analysis Method，SAAM）基础之上发展起来的，主要包括场景和需求收集、&nbsp;（62） 、属性模型构造和分析、属性模型折中等4个阶段。ATAM方法要求在系统开发之前，首先对这些质量属性进行&nbsp;（63） 和折中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350358,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>ATAM &nbsp;是在基于场景的架构分析方法基础之上发展起来的，主要包括场景和需求收集、 架构视图和场景实现、属性模型构造和分析、属性模型折中等 4 个阶段。该方法要求在系统 开发之前，首先对这些质量属性进行评价和折中。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 架构视图和场景实现 ",
                        " 架构风格和场景分析 ",
                        " 架构设计和目标分析 ",
                        " 架构描述和需求评估 "
                    ]
                },
                {
                    "index": 406,
                    "belong_page": 1,
                    "question_id": 350360,
                    "question_title": "<p>架构权衡分析方法（Architecture Tradeoff Analysis Method，ATAM）是在基于场景的架构分析方法（Scenarios-based Architecture Analysis Method，SAAM）基础之上发展起来的，主要包括场景和需求收集、&nbsp;（62） 、属性模型构造和分析、属性模型折中等4个阶段。ATAM方法要求在系统开发之前，首先对这些质量属性进行&nbsp;（63） 和折中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 350358,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>ATAM &nbsp;是在基于场景的架构分析方法基础之上发展起来的，主要包括场景和需求收集、 架构视图和场景实现、属性模型构造和分析、属性模型折中等 4 个阶段。该方法要求在系统 开发之前，首先对这些质量属性进行评价和折中。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 设计 ",
                        " 实现 ",
                        " 测试 ",
                        " 评价 "
                    ]
                },
                {
                    "index": 407,
                    "belong_page": 1,
                    "question_id": 352298,
                    "question_title": "<p>&nbsp;在CORBA构件模型中，&nbsp;（45） 的作用是在底层传输平台与接收调用并返回结果的对象实现之间进行协调，&nbsp;（46） 是最终完成客户请求的服务对象实现。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352297,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>POA是对象实现与ORB其他组件之间的中介，它将客户请求传送到伺服对象。按需创建子POA，提供管理伺服对象的策略。</p><p>CORBA对象可看作是一个具有对象标识、对象接口及对象实现的抽象实体。之所以说是抽象的，是因为并没有硬性规定CORBA对象的实现机制。由于独立于程序设计语言和特定ORB产品，所以一个CORBA对象的引用又称“可互操作的对象引用”（Interoperable&nbsp;Object&nbsp;Reference，IOR）。从客户程序的角度看，IOR中包含了对象的标识、接口类型及其他信息，以查找对象实现。</p><p>伺服对象是指具体程序设计语言的对象或实体，通常存在于一个服务程序的进程之中。</p><p>客户程序通过对象引用发出的请求经过ORB担当中介角色，转换为对特定的伺服对象的调用。在一个CORBA对象的生命期中，它可能与多个伺服对象相关联，因而对该对象的请求可能被发送到不同的伺服对象。</p><p>对象标识（Object&nbsp;ID）是一个在POA中用于标识一个CORBA对象的字符串，它既可由程序员指派，也可由对象适配器自动分配，这两种方式都要求对象标识在创建它的对象适配器中必须具有唯一性。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 伺服对象激活器 ",
                        " 适配器激活器 ",
                        " 伺服对象定位器 ",
                        " 可移植对象适配器（POA） "
                    ]
                },
                {
                    "index": 408,
                    "belong_page": 1,
                    "question_id": 352299,
                    "question_title": "<p>&nbsp;在CORBA构件模型中，&nbsp;（45） 的作用是在底层传输平台与接收调用并返回结果的对象实现之间进行协调，&nbsp;（46） 是最终完成客户请求的服务对象实现。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352297,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>POA是对象实现与ORB其他组件之间的中介，它将客户请求传送到伺服对象。按需创建子POA，提供管理伺服对象的策略。</p><p>CORBA对象可看作是一个具有对象标识、对象接口及对象实现的抽象实体。之所以说是抽象的，是因为并没有硬性规定CORBA对象的实现机制。由于独立于程序设计语言和特定ORB产品，所以一个CORBA对象的引用又称“可互操作的对象引用”（Interoperable&nbsp;Object&nbsp;Reference，IOR）。从客户程序的角度看，IOR中包含了对象的标识、接口类型及其他信息，以查找对象实现。</p><p>伺服对象是指具体程序设计语言的对象或实体，通常存在于一个服务程序的进程之中。</p><p>客户程序通过对象引用发出的请求经过ORB担当中介角色，转换为对特定的伺服对象的调用。在一个CORBA对象的生命期中，它可能与多个伺服对象相关联，因而对该对象的请求可能被发送到不同的伺服对象。</p><p>对象标识（Object&nbsp;ID）是一个在POA中用于标识一个CORBA对象的字符串，它既可由程序员指派，也可由对象适配器自动分配，这两种方式都要求对象标识在创建它的对象适配器中必须具有唯一性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " CORBA对象 ",
                        " 分布式对象标识 ",
                        " 伺服对象（Servant） ",
                        " 活动对象映射表 "
                    ]
                },
                {
                    "index": 409,
                    "belong_page": 1,
                    "question_id": 352300,
                    "question_title": "<p>&nbsp;在构件组装阶段失配问题主要不包括&nbsp;（47） 。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352300,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>在构件组装阶段失配问题主要包括：</p><p>（1）由构件引起的失配，包括由于系统对构件基础设施、构件控制模型和构件数据模型的假设存在冲突引起的失配。</p><p>（2）由连接子引起的失配，包括由于系统对构件交互协议、连接子数据模型的假设存在冲突引起的失配。</p><p>（3）由于系统成分对全局体系结构的假设存在冲突引起的失配等。要解决失配问题，首先需要检测出失配问题，井在此基础上通过适当的手段消除检测出的失配问题。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 由构件引起的失配 ",
                        " 由连接子引起的失配 ",
                        " 由于系统成分对全局体系结构的假设存在冲突引起的失配 ",
                        " 由构件操作不当引起的失配 "
                    ]
                },
                {
                    "index": 410,
                    "belong_page": 1,
                    "question_id": 352301,
                    "question_title": "<p>&nbsp;软件架构是降低成本、改进质量、按时和按需交付产品的关键因素， 软件架构设计 需要满足系统的&nbsp;（48） ，如性能、安全性和可修改性等，并能够指导设计人员和实现人员的工作。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352301,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件架构是降低成本、改进质量、按时和按需交付产品的关键因素，软件架构设计需要 满足系统的质量属性，如性能、安全性和可修改性等。并且需要确定组件之间的依赖关系， 支持项目计划和管理活动。软件架构能够指导设计人员和实现人员的工作，一般在设计软件 架构之初会根据用户需求确定多个候选架构，并从中选择一个较优的架构。然后随着软件的 开发，对这个架构进行微调，以达到最佳效果。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 功能需求 ",
                        " 性能需求 ",
                        " 质量属性 ",
                        " 业务属性 "
                    ]
                },
                {
                    "index": 411,
                    "belong_page": 1,
                    "question_id": 352302,
                    "question_title": "<p>&nbsp;以下关于软件架构风格与系统性能关系的叙述中， 错误的是&nbsp;（49） 。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352302,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>对于采用层次化架构风格的系统， 划分的层次越多，系统的性能越差。</p><p>对于采用隐式调用架构风格的系统可以通过处理函数的并发调用提高系统处理性能，如果处理函数是性能瓶颈的话。</p><p>采用面向对象架构风格的系统有可能通过建立更多的对象来提高系统性能，例如建立更多线程对象提供高并发处理能力。</p><p>采用解释器架构风格的系统可以通过部分解释代码预先编译的方式提高系统性能。例如JAVA虚拟机中采用JIT（即时编译）技术提高运行速度。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 对于采用层次化架构风格的系统， 划分的层次越多，系统的性能越好 ",
                        " 对于采用隐式调用架构风格的系统可以通过处理函数的并发调用提高系统处 理性能 ",
                        " 采用面向对象架构风格的系统有可能建立更多的对象提高系统性能 ",
                        " 采用解释器架构风格的系统可以通过部分解释代码预先编译的方式提高系统性能。 "
                    ]
                },
                {
                    "index": 412,
                    "belong_page": 1,
                    "question_id": 352304,
                    "question_title": "<p>&nbsp;基于架构的软件开发(Architecture Based Software Development，ABSD)强调由商业、 质量和功能需求的组合驱动软件架构设计，它强调采用&nbsp;（50） 来描述软件架构；采用&nbsp;（51） 来描述需求。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352303,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>根据定义，基于软件架构的开发强调由商业、质量和功能需求的组合驱动软件架构设计， 它强调采用视角与视图来描述软件架构； 采用用例和质量场景来描述需求。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 类图和序列图 ",
                        " 视角与视图 ",
                        " 构件和类图 ",
                        " 构件与功能 "
                    ]
                },
                {
                    "index": 413,
                    "belong_page": 1,
                    "question_id": 352305,
                    "question_title": "<p>&nbsp;基于架构的软件开发(Architecture Based Software Development，ABSD)强调由商业、 质量和功能需求的组合驱动软件架构设计，它强调采用&nbsp;（50） 来描述软件架构；采用&nbsp;（51） 来描述需求。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352303,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>根据定义，基于软件架构的开发强调由商业、质量和功能需求的组合驱动软件架构设计， 它强调采用视角与视图来描述软件架构； 采用用例和质量场景来描述需求。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 用例与类图 ",
                        " 用例与视角 ",
                        " 用例与质量场景 ",
                        " 视角与质量场景 "
                    ]
                },
                {
                    "index": 414,
                    "belong_page": 1,
                    "question_id": 352306,
                    "question_title": "<p>&nbsp;某公司拟开发一个轿车巡航定速系统，系统需要持续测量车辆当前的实时速度， 并 根据设定的期望速度自动控制轿车的油门和刹车。针对上述需求，采用&nbsp;（52） 架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352306,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>根据题目描述，轿车巡航定速系统是一个十分典型的控制系统。其特点是不断采集系统 当前状态，与系统中的设定状态进行对比，并通过将当前状态与设定状态进行对比而进行控制。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 解释器 ",
                        " 过程控制 ",
                        " 分层 ",
                        " 管道-过滤器 "
                    ]
                },
                {
                    "index": 415,
                    "belong_page": 1,
                    "question_id": 352307,
                    "question_title": "<p>&nbsp;体系结构权衡分析方法(Architecture TradeoffAnalysis Method，ATAM)包含 4 个主要的活动领域，分别是场景和需求收集、体系结构视图和场景实现、属性模型构造和分析、&nbsp;（53） 。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352307,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>ATAM分为4个主要的活动领域(或阶段) ，分别是场景和需求收集、体系结构视图和场景实现、属性模型构造和分析、折中。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 架构设计 ",
                        " 用例设计 ",
                        " 折中 ",
                        " 质量建模 "
                    ]
                },
                {
                    "index": 416,
                    "belong_page": 1,
                    "question_id": 352309,
                    "question_title": "<p>&nbsp;按照设计模式的目的进行划分，现有的设计模式可以分为3类，其中创建型模式通 过采用抽象类所定义的接口封装了系统中对象如何创建及组合等信息，其代表有&nbsp;（54） 模式等；&nbsp;（55） 模式主要用于如何组合已有的类和对象以获得更大的结构，其代表有Adapter 模式等；&nbsp;（56） 模式主要用于对象之间的职责及其提供服务的分配方式，其代表有&nbsp;（57） 模式等。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352308,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>按照设计模式的目的进行划分，现有的设计模式可以分为3类，其中创建型模式通过采用抽象类所定义的接口，封装了系统中对象如何创建、组合等信息，其代表有Singleton模式等；结构型模式主要用于如何组合己有的类和对象以获得更大的结构，其代表有Adapter模式等；行为型模式主要用于对象之间的职责及其提供服务的分配方式，其代表有Visitor模式等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " Decorator ",
                        " Fly weight ",
                        " Command ",
                        " Singleton "
                    ]
                },
                {
                    "index": 417,
                    "belong_page": 1,
                    "question_id": 352310,
                    "question_title": "<p>&nbsp;按照设计模式的目的进行划分，现有的设计模式可以分为3类，其中创建型模式通 过采用抽象类所定义的接口封装了系统中对象如何创建及组合等信息，其代表有&nbsp;（54） 模式等；&nbsp;（55） 模式主要用于如何组合已有的类和对象以获得更大的结构，其代表有Adapter 模式等；&nbsp;（56） 模式主要用于对象之间的职责及其提供服务的分配方式，其代表有&nbsp;（57） 模式等。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352308,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>按照设计模式的目的进行划分，现有的设计模式可以分为3类，其中创建型模式通过采用抽象类所定义的接口，封装了系统中对象如何创建、组合等信息，其代表有Singleton模式等；结构型模式主要用于如何组合己有的类和对象以获得更大的结构，其代表有Adapter模式等；行为型模式主要用于对象之间的职责及其提供服务的分配方式，其代表有Visitor模式等。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 合成型 ",
                        " 组合型 ",
                        " 结构型 ",
                        " 聚合型 "
                    ]
                },
                {
                    "index": 418,
                    "belong_page": 1,
                    "question_id": 352311,
                    "question_title": "<p>&nbsp;按照设计模式的目的进行划分，现有的设计模式可以分为3类，其中创建型模式通 过采用抽象类所定义的接口封装了系统中对象如何创建及组合等信息，其代表有&nbsp;（54） 模式等；&nbsp;（55） 模式主要用于如何组合已有的类和对象以获得更大的结构，其代表有Adapter 模式等；&nbsp;（56） 模式主要用于对象之间的职责及其提供服务的分配方式，其代表有&nbsp;（57） 模式等。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352308,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>按照设计模式的目的进行划分，现有的设计模式可以分为3类，其中创建型模式通过采用抽象类所定义的接口，封装了系统中对象如何创建、组合等信息，其代表有Singleton模式等；结构型模式主要用于如何组合己有的类和对象以获得更大的结构，其代表有Adapter模式等；行为型模式主要用于对象之间的职责及其提供服务的分配方式，其代表有Visitor模式等。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 行为型 ",
                        " 交互型 ",
                        " 耦合性 ",
                        " 关联型 "
                    ]
                },
                {
                    "index": 419,
                    "belong_page": 1,
                    "question_id": 352312,
                    "question_title": "<p>&nbsp;按照设计模式的目的进行划分，现有的设计模式可以分为3类，其中创建型模式通 过采用抽象类所定义的接口封装了系统中对象如何创建及组合等信息，其代表有&nbsp;（54） 模式等；&nbsp;（55） 模式主要用于如何组合已有的类和对象以获得更大的结构，其代表有Adapter 模式等；&nbsp;（56） 模式主要用于对象之间的职责及其提供服务的分配方式，其代表有&nbsp;（57） 模式等。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352308,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>按照设计模式的目的进行划分，现有的设计模式可以分为3类，其中创建型模式通过采用抽象类所定义的接口，封装了系统中对象如何创建、组合等信息，其代表有Singleton模式等；结构型模式主要用于如何组合己有的类和对象以获得更大的结构，其代表有Adapter模式等；行为型模式主要用于对象之间的职责及其提供服务的分配方式，其代表有Visitor模式等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " Prototype ",
                        " Facade ",
                        " Proxy ",
                        " Visitor "
                    ]
                },
                {
                    "index": 420,
                    "belong_page": 1,
                    "question_id": 352314,
                    "question_title": "<p>&nbsp;某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”主要与&nbsp;（58）&nbsp;质量属性相关，通常可采用&nbsp;（59）&nbsp;架构策略实现该属性；“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”主要与&nbsp;（60）&nbsp;质量属性相关，通常可采用&nbsp;（61）&nbsp;架构策略实现该属性；“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”主要与&nbsp;（62）&nbsp;质量属性相关，通常可采用&nbsp;（63）&nbsp;架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352313,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”属于可用性属性场景，因为场景描述的是故障恢复问题，主动冗余是可用性的常见策略。</p><p>“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”属于性能属性场景，资源调度是其常见策略。</p><p>“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”属于安全性属性场景，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 可用性 ",
                        " 性能 ",
                        " 易用性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 421,
                    "belong_page": 1,
                    "question_id": 352315,
                    "question_title": "<p>&nbsp;某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”主要与&nbsp;（58）&nbsp;质量属性相关，通常可采用&nbsp;（59）&nbsp;架构策略实现该属性；“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”主要与&nbsp;（60）&nbsp;质量属性相关，通常可采用&nbsp;（61）&nbsp;架构策略实现该属性；“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”主要与&nbsp;（62）&nbsp;质量属性相关，通常可采用&nbsp;（63）&nbsp;架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352313,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”属于可用性属性场景，因为场景描述的是故障恢复问题，主动冗余是可用性的常见策略。</p><p>“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”属于性能属性场景，资源调度是其常见策略。</p><p>“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”属于安全性属性场景，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 抽象接口 ",
                        " 信息隐藏 ",
                        " 主动冗余 ",
                        " 记录/回放 "
                    ]
                },
                {
                    "index": 422,
                    "belong_page": 1,
                    "question_id": 352316,
                    "question_title": "<p>&nbsp;某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”主要与&nbsp;（58）&nbsp;质量属性相关，通常可采用&nbsp;（59）&nbsp;架构策略实现该属性；“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”主要与&nbsp;（60）&nbsp;质量属性相关，通常可采用&nbsp;（61）&nbsp;架构策略实现该属性；“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”主要与&nbsp;（62）&nbsp;质量属性相关，通常可采用&nbsp;（63）&nbsp;架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352313,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”属于可用性属性场景，因为场景描述的是故障恢复问题，主动冗余是可用性的常见策略。</p><p>“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”属于性能属性场景，资源调度是其常见策略。</p><p>“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”属于安全性属性场景，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 可测试性 ",
                        " 易用性 ",
                        " 互操作性 ",
                        " 性能 "
                    ]
                },
                {
                    "index": 423,
                    "belong_page": 1,
                    "question_id": 352317,
                    "question_title": "<p>&nbsp;某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”主要与&nbsp;（58）&nbsp;质量属性相关，通常可采用&nbsp;（59）&nbsp;架构策略实现该属性；“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”主要与&nbsp;（60）&nbsp;质量属性相关，通常可采用&nbsp;（61）&nbsp;架构策略实现该属性；“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”主要与&nbsp;（62）&nbsp;质量属性相关，通常可采用&nbsp;（63）&nbsp;架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352313,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”属于可用性属性场景，因为场景描述的是故障恢复问题，主动冗余是可用性的常见策略。</p><p>“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”属于性能属性场景，资源调度是其常见策略。</p><p>“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”属于安全性属性场景，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 资源调度 ",
                        " 操作串行化  <br/> ",
                        " 心跳  <br/> ",
                        " 内置监控器 "
                    ]
                },
                {
                    "index": 424,
                    "belong_page": 1,
                    "question_id": 352318,
                    "question_title": "<p>&nbsp;某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”主要与&nbsp;（58）&nbsp;质量属性相关，通常可采用&nbsp;（59）&nbsp;架构策略实现该属性；“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”主要与&nbsp;（60）&nbsp;质量属性相关，通常可采用&nbsp;（61）&nbsp;架构策略实现该属性；“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”主要与&nbsp;（62）&nbsp;质量属性相关，通常可采用&nbsp;（63）&nbsp;架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352313,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "5",
                    "analyze": "<p>“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”属于可用性属性场景，因为场景描述的是故障恢复问题，主动冗余是可用性的常见策略。</p><p>“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”属于性能属性场景，资源调度是其常见策略。</p><p>“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”属于安全性属性场景，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性 ",
                        " 安全性 ",
                        " 可测试性 ",
                        " 可修改性 "
                    ]
                },
                {
                    "index": 425,
                    "belong_page": 1,
                    "question_id": 352319,
                    "question_title": "<p>&nbsp;某公司欲开发一个智能机器人系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”主要与&nbsp;（58）&nbsp;质量属性相关，通常可采用&nbsp;（59）&nbsp;架构策略实现该属性；“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”主要与&nbsp;（60）&nbsp;质量属性相关，通常可采用&nbsp;（61）&nbsp;架构策略实现该属性；“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”主要与&nbsp;（62）&nbsp;质量属性相关，通常可采用&nbsp;（63）&nbsp;架构策略实现该属性。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352313,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "6",
                    "analyze": "<p>“机器人系统主电源断电后，能够在10s内自动启动备用电源并进行切换，恢复正常运行”属于可用性属性场景，因为场景描述的是故障恢复问题，主动冗余是可用性的常见策略。</p><p>“机器人在正常运动过程中如果发现前方2米内有人或者障碍物，应在1s内停止并在2s内选择一条新的运行路径”属于性能属性场景，资源调度是其常见策略。</p><p>“对机器人的远程控制命令应该进行加密，从而能够抵挡恶意的入侵破坏行为，并对攻击进行报警和记录”属于安全性属性场景，常见的策略是追踪审计。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 内置监控器 ",
                        " 追踪审计 ",
                        " 记录/回放 ",
                        " 维护现有接口 "
                    ]
                },
                {
                    "index": 426,
                    "belong_page": 1,
                    "question_id": 352384,
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352383,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可用性 ",
                        " 可靠性 ",
                        " 性能 ",
                        " 容错性 "
                    ]
                },
                {
                    "index": 427,
                    "belong_page": 1,
                    "question_id": 352385,
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352383,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 可用性 ",
                        " 可修改性 ",
                        " 可靠性 ",
                        " 安全性 "
                    ]
                },
                {
                    "index": 428,
                    "belong_page": 1,
                    "question_id": 352386,
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352383,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 可用性  <br/> ",
                        " 可修改性&nbsp;  <br/> ",
                        " 可靠性&nbsp;  &nbsp; ",
                        " 安全性&nbsp; &nbsp;  <br/> "
                    ]
                },
                {
                    "index": 429,
                    "belong_page": 1,
                    "question_id": 352387,
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352383,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 权衡点&nbsp; ",
                        " 风险点&nbsp; ",
                        " 敏感点&nbsp; ",
                        " 非风险点&nbsp; "
                    ]
                },
                {
                    "index": 430,
                    "belong_page": 1,
                    "question_id": 352388,
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352383,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "5",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 权衡点 ",
                        "&nbsp;风险点",
                        "&nbsp;敏感点",
                        "&nbsp;非风险点"
                    ]
                },
                {
                    "index": 431,
                    "belong_page": 1,
                    "question_id": 352389,
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352383,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "6",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 权衡点 ",
                        " 风险点&nbsp; ",
                        " 敏感点 ",
                        " 非风险点&nbsp; "
                    ]
                },
                {
                    "index": 432,
                    "belong_page": 1,
                    "question_id": 352402,
                    "question_title": "<p>&nbsp;（）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（）模式最适合。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352401,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 组合 ",
                        " 外观 ",
                        " 享元 ",
                        " 装饰器 "
                    ]
                },
                {
                    "index": 433,
                    "belong_page": 1,
                    "question_id": 352403,
                    "question_title": "<p>&nbsp;（）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（）模式最适合。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352401,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 工厂方法 ",
                        " 享元 ",
                        " 观察者 ",
                        " 中介者 "
                    ]
                },
                {
                    "index": 434,
                    "belong_page": 1,
                    "question_id": 352404,
                    "question_title": "<p>&nbsp;（）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（）模式最适合。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352401,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 装饰器 ",
                        " 享元 ",
                        " 观察者 ",
                        " 中介者 "
                    ]
                },
                {
                    "index": 435,
                    "belong_page": 1,
                    "question_id": 352406,
                    "question_title": "<p>在uml图中，（）展现了一组对象、接口、协作和它们之间的关系。（）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352405,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 类图 ",
                        " 对象图 ",
                        " 部署图 ",
                        " 定时图 "
                    ]
                },
                {
                    "index": 436,
                    "belong_page": 1,
                    "question_id": 352407,
                    "question_title": "<p>在uml图中，（）展现了一组对象、接口、协作和它们之间的关系。（）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352405,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 类图&nbsp;  <br/> ",
                        " 包图&nbsp; ",
                        " 部署图&nbsp; ",
                        " 定时图&nbsp; "
                    ]
                },
                {
                    "index": 437,
                    "belong_page": 1,
                    "question_id": 352408,
                    "question_title": "<p>在uml图中，（）展现了一组对象、接口、协作和它们之间的关系。（）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352405,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 类图 ",
                        " 对象图&nbsp; ",
                        " 部署图 ",
                        " 交互图 "
                    ]
                },
                {
                    "index": 438,
                    "belong_page": 1,
                    "question_id": 352409,
                    "question_title": "<p>在uml图中，（）展现了一组对象、接口、协作和它们之间的关系。（）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352405,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 类图 ",
                        " 包图 ",
                        " 部署图&nbsp; ",
                        " 交互图&nbsp; "
                    ]
                },
                {
                    "index": 439,
                    "belong_page": 1,
                    "question_id": 352411,
                    "question_title": "<p>&nbsp;一般来说，架构可以分为三个层次。（）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352410,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ]
                },
                {
                    "index": 440,
                    "belong_page": 1,
                    "question_id": 352412,
                    "question_title": "<p>&nbsp;一般来说，架构可以分为三个层次。（）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352410,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " MVC ",
                        " spring&nbsp; ",
                        " AOP&nbsp; &nbsp;&nbsp; ",
                        " Hibernate "
                    ]
                },
                {
                    "index": 441,
                    "belong_page": 1,
                    "question_id": 352413,
                    "question_title": "<p>&nbsp;一般来说，架构可以分为三个层次。（）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352410,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 模型 ",
                        " 控制器 ",
                        " 视图 ",
                        " 处理器 "
                    ]
                },
                {
                    "index": 442,
                    "belong_page": 1,
                    "question_id": 352414,
                    "question_title": "<p>&nbsp;一般来说，架构可以分为三个层次。（）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（）结构来实现，其中的（）负责接收用户的请求，并决定应该调用哪个模型来处理。（）主要负责将业务数据存储在文件、数据库等持久化存储介质中。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352410,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "4",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ]
                },
                {
                    "index": 443,
                    "belong_page": 1,
                    "question_id": 352416,
                    "question_title": "<p>软件架构设计主要关注软件构件的（50）、属性和（51）&nbsp;，并通过多种视图全面描述特定系统的架构。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352415,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>软件架构设计主要关注软件构件的结构、属性和交互作用 ，并通过多种视图全面描述特定系统的架构。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 功能 ",
                        " 实现 ",
                        " 组成元素 ",
                        " 结构 "
                    ]
                },
                {
                    "index": 444,
                    "belong_page": 1,
                    "question_id": 352417,
                    "question_title": "<p>软件架构设计主要关注软件构件的（50）、属性和（51）&nbsp;，并通过多种视图全面描述特定系统的架构。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352415,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>软件架构设计主要关注软件构件的结构、属性和交互作用 ，并通过多种视图全</p><p>面描述特定系统的架构。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 实现方式 ",
                        " 交互作用 ",
                        " 设计方案&nbsp;&nbsp; ",
                        " 测试方式 "
                    ]
                },
                {
                    "index": 445,
                    "belong_page": 1,
                    "question_id": 352418,
                    "question_title": "<p>某公司拟开发一个新闻系统，该系统可根据用户的注册兴趣，向用户推送其感兴趣的新闻内容，该系统应该采用（52）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352418,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>用户会注册自己的兴趣，然后系统也会把新闻按兴趣分类，如果某个新闻事件发生，可以通过事件来触发推送动作，将新闻推送给对其感兴趣的用户。这是典型独立构件中的事件驱动系统应用场景。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 虚拟机 ",
                        " 基于规则的系统 ",
                        " 独立构件 ",
                        " 主程序-子程序 "
                    ]
                },
                {
                    "index": 446,
                    "belong_page": 1,
                    "question_id": 352419,
                    "question_title": "<p>某公司欲开发一个漫步者机器人，用来完成火星探测任务。机器人的控制者首先定义探测任务和任务之间的时序依赖性，机器人接受任务后，需要根据自身状态和外界环境进行动态调整，最终自动完成任务。针对这些需求，该机器人应该采用（53）架构风格最为合适。<br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352419,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>根据“机器人接受任务后，需要根据自身状态和外界环境进行动态调整”这句话判断采用虚拟机风格更加合适。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 虚拟机 ",
                        " 黑板风格 ",
                        " 面向对象风格 ",
                        " 管道-过滤器 "
                    ]
                },
                {
                    "index": 447,
                    "belong_page": 1,
                    "question_id": 352421,
                    "question_title": "<p>传统的编译器采用（54）风格。现代编译器的集成开发环境则采用（55）风格。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352420,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>管道过滤器风格的完整流程为：「读端口」获取需要处理的信息，通过管道传递给过滤器链，每个过滤器自行判断是否需要对信息进行处理，一个过滤器处理完后通过管道将消息传递给下一个或多个过滤器，直到所有的过滤器全部处理完毕，通过写端口，将处理完成的信息写出到目标位置。而传统编译器（包括词法分析、语法分析、语义分析和代码生成）一个阶段的输出是另一个阶段的输入，符合管道过滤器风格的特点。集成开发环境集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，针对这种需求，采用数据共享风格架构风格比较合适。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 虚拟机 ",
                        " 管道过滤器风格 ",
                        " 数据共享风格 ",
                        " 进程通信 "
                    ]
                },
                {
                    "index": 448,
                    "belong_page": 1,
                    "question_id": 352422,
                    "question_title": "<p>传统的编译器采用（54）风格。现代编译器的集成开发环境则采用（55）风格。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352420,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>管道过滤器风格的完整流程为：「读端口」获取需要处理的信息，通过管道传递给过滤器链，每个过滤器自行判断是否需要对信息进行处理，一个过滤器处理完后通过管道将消息传递给下一个或多个过滤器，直到所有的过滤器全部处理完毕，通过写端口，将处理完成的信息写出到目标位置。而传统编译器（包括词法分析、语法分析、语义分析和代码生成）一个阶段的输出是另一个阶段的输入，符合管道过滤器风格的特点。集成开发环境集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，针对这种需求，采用数据共享风格架构风格比较合适。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 数据流 ",
                        " 管道过滤器风格 ",
                        " 数据共享风格 ",
                        " 进程通信 "
                    ]
                },
                {
                    "index": 449,
                    "belong_page": 1,
                    "question_id": 352423,
                    "question_title": "<p>（56）架构风格的核心是资源抽象，将系统中的每一个实体抽象成一种资源。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352423,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>&nbsp;在REST中，资源可以简单的理解为URI，表示一个网络实体。比如，/users/1/name，对应id=1的用户的属性name。既然资源是URI，就会具有以下特征：名词，代表一个资源；它对应唯一的一个资源，是资源的地址。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 虚拟机 ",
                        " Rest风格 ",
                        " 层次风格 ",
                        " 数据共享 "
                    ]
                },
                {
                    "index": 450,
                    "belong_page": 1,
                    "question_id": 352425,
                    "question_title": "<p>&nbsp;与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（57）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（58）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（59）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352424,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>&nbsp;UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>&nbsp;&nbsp;WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>&nbsp;&nbsp;SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " UDDI ",
                        " Rest ",
                        " WSDL ",
                        " SOAP "
                    ]
                },
                {
                    "index": 451,
                    "belong_page": 1,
                    "question_id": 352426,
                    "question_title": "<p>&nbsp;与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（57）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（58）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（59）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352424,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>&nbsp;UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>&nbsp;&nbsp;WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>&nbsp;&nbsp;SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " UDDI&nbsp; ",
                        " Rest&nbsp; ",
                        " WSDL&nbsp; ",
                        " SOAP&nbsp; "
                    ]
                },
                {
                    "index": 452,
                    "belong_page": 1,
                    "question_id": 352427,
                    "question_title": "<p>&nbsp;与SOA紧密相关的技术主要有UDDI、WSDL、SOAP和REST等，而这些技术都是以XML为基础而发展起来的。（57）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。（58）是对服务进行描述的语言，它有一套基于XML的语法定义，包含服务实现定义和服务接口定义。（59）定义了服务请求者和服务提供者之间的消息传输规范。通过它，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352424,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "3",
                    "analyze": "<p>&nbsp;UDDI（Universal Description Discovery and Integration，统一描述、发现和集成）提供了一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现和使用它。</p><p>&nbsp;&nbsp;WSDL（Web Service Description Language，Web服务描述语言）是对服务进行描述的语言，它有一套基于XML的语法定义。WSDL描述的重点是服务，它包含服务实现定义和服务接口定义。</p><p>&nbsp;&nbsp;SOAP（Simple Object Access Protocol，简单对象访问协议）定义了服务请求者和服务提供者之间的消息传输规范。SOAP用XML来格式化消息，用HTTP来承载消息。通过SOAP，应用程序可以在网络中进行数据交换和远程过程调用（Remote Procedure Call，RPC）</p><p>简单来说，WSDL用来描述服务，UDDI用来注册和查找服务，而SOAP作为传输层，用来在消费这和服务者之间传送消息，一个消费者可以在UDDI注册表查找服务，取得服务的WSDL描述，然后通过SOAP来调用该服务。</p><p>&nbsp;REST（Representational State Transfer，表述性状态转移）是一种只使用HTTP和XML进行基于Web通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        "&nbsp; UDDI ",
                        "&nbsp; Rest ",
                        "&nbsp; WSDL ",
                        "&nbsp; SOAP "
                    ]
                },
                {
                    "index": 453,
                    "belong_page": 1,
                    "question_id": 352428,
                    "question_title": "<p>&nbsp;SOA的一种实现方式, （60）在服务请求者和提供者之间传递数据,以及对这些数据进行转换的能力,并支持由实践中总结出来的一些模式如同步模式、异步模式等；</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 352428,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>ESB是SOA的一种实现方式, ESB在面向服务的架构中起到的是总线作用,将各种服务进行连接与整合，在服务请求者和提供者之间传递数据,以及对这些数据进行转换的能力,并支持由实践中总结出来的一些模式如同步模式、异步模式等。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " Sharding ",
                        " ESB ",
                        " BPEL ",
                        " bind "
                    ]
                },
                {
                    "index": 454,
                    "belong_page": 1,
                    "question_id": 356111,
                    "question_title": "<p>在架构评估中，（ &nbsp;）是一个或多个构件（和／或构件之间的关系）的特性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356111,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>敏感点是一个或多个构件（和／或构件之间的关系）的特性。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A.敏感点 ",
                        " B. 非风险点 ",
                        " C. 权衡点 ",
                        " D. 风险点 "
                    ]
                },
                {
                    "index": 455,
                    "belong_page": 1,
                    "question_id": 356112,
                    "question_title": "<p>在架构评估中，改变加密级别的设计决策属于（ &nbsp;）,因为它可能会对安全性和性能产生非常重要的影响。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356112,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>改变加密级别的设计决策属于权衡点,因为它可能会对安全性和性能产生非常重要的影响。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A.敏感点 ",
                        " B. 非风险点 ",
                        " C. 权衡点&nbsp; ",
                        " D. 风险点 "
                    ]
                },
                {
                    "index": 456,
                    "belong_page": 1,
                    "question_id": 356116,
                    "question_title": "<p>在一个分布式软件系统中，一个构件失去了与另一个远程构件的连接。在系统修复后，连接于 30 秒之内恢复，系统可以重新正常工作。这一描述体现了软件系统的（ ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356116,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>可用性是是系统能够正常运行的时间比例。经常用两次故障之间的时 间长度或在出现故障时系统能够恢复正常的速度来表示。“在系统修复后，连接于 30 秒之内恢复......”这属于可用性的特征。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " A.安全性&nbsp; ",
                        " B.可用性 ",
                        " &nbsp;C.兼容性 ",
                        " D.可移植性 "
                    ]
                },
                {
                    "index": 457,
                    "belong_page": 1,
                    "question_id": 356117,
                    "question_title": "<p>某公司拟开发一个个人社保管理系统，该系统的主要功能需求是根据个人收入、家庭负担、身体状态等情况，预估计算个人每年应支付的社保金，该社保金的计算方式可能随着国家经济的变化而动态改变，针对上述需求描述，该软件系统适宜采用（ &nbsp;）架构风格设计。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356117,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>社保金的计算方式不是固定的，可以采用Rule-based system （基于规则的系统）实现。&nbsp;</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " A.Layered system&nbsp;&nbsp; ",
                        " B.Data flow&nbsp; ",
                        " C.Event system&nbsp;&nbsp; ",
                        " D.Rule-based system "
                    ]
                },
                {
                    "index": 458,
                    "belong_page": 1,
                    "question_id": 356118,
                    "question_title": "<p>某公司拟开发一个个人社保管理系统，该系统的主要功能需求是根据个人收入、家庭负担、身体状态等情况，预估计算个人每年应支付的社保金，该社保金的计算方式可能随着国家经济的变化而动态改变，针对上述需求描述，该软件系统适宜采用（/ ）架构风格设计。架构风格的主要特点是（ 请作答此空 ）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356118,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>基于规则的系统中的规则引擎负责对规则进行解释实现，能够将业务规则跟应用程序分离开来，减少了运维的工作。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A.将业务逻辑中频繁变化的部分定义为规则 ",
                        " B.各构件间相互独立 ",
                        " C.支持并发 ",
                        " D.无数据不工作 "
                    ]
                },
                {
                    "index": 459,
                    "belong_page": 1,
                    "question_id": 356119,
                    "question_title": "<p>某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3 个核心质量属性场景。其中“网站在并发用户数量10 万的负载情况下，用户请求的平均响应时间应小于3 秒”这一场景主要与（）&nbsp;质量属性相关。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356119,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>题目中描述的人员管理系统在架构设计阶段,公司的架构师识别出3个核心质量属性场</p><p>景,其中“网站在并发用户数量l0万的负载情况下,用户请求的平均响应时间应小于3秒”这一场景主要与性能质量属性相关。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A ． 性能 ",
                        " B ．可用性 ",
                        " &nbsp;C ．易用性&nbsp; ",
                        " D ．可修改性 "
                    ]
                },
                {
                    "index": 460,
                    "belong_page": 1,
                    "question_id": 356120,
                    "question_title": "<p>接上题，通常可采用（）&nbsp;架构策略实现上述属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356120,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>题目中描述的人员管理系统在架构设计阶段,公司的架构师识别出3个核心质量属性场</p><p>景,其中“网站在并发用户数量l0万的负载情况下,用户请求的平均响应时间应小于3秒”这一场景主要与性能质量属性相关,通常可采用提高计算效率、减少计算开销、控制资源使用、资源调度、负载均衡等架构策略实现该属性。&nbsp;</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " A ．抽象接口 ",
                        " B ．信息隐藏 ",
                        " C ．主动冗余 ",
                        " D ．资源调度 "
                    ]
                },
                {
                    "index": 461,
                    "belong_page": 1,
                    "question_id": 356121,
                    "question_title": "<p>某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3 个核心质量属性场景。其中“网站在并发用户数量10 万的负载情况下，用户请求的平均响应时间应小于3 秒”这一场景主要与（-）&nbsp;质量属性相关。通常可采用（-）&nbsp;架构策略实现上述属性。“主站宕机后，系统能够在10 秒内自动切换至备用站点并恢复正常运行”主要与（请作答此空）质量属性相关。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356121,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>“主站宕机后,系统能够在l0秒内自动切 换至备用站点并恢复正常运行”主要与可用性质量属性相关。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " &nbsp;A ．性能&nbsp; ",
                        " B ．可用性 ",
                        " &nbsp;C ．易用性 ",
                        " &nbsp;D ．可修改性 "
                    ]
                },
                {
                    "index": 462,
                    "belong_page": 1,
                    "question_id": 356122,
                    "question_title": "<p>某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3 个核心质量属性场景。其中“网站在并发用户数量10 万的负载情况下，用户请求的平均响应时间应小于3 秒”这一场景主要与（/）&nbsp;质量属性相关。通常可采用（请作答此空）&nbsp;架构策略实现上述属性。</p><p><br/></p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356122,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>题目中描述的人员管理系统在架构设计阶段,公司的架构师识别出3个核心质量属性场景,其中“网站在并发用户数量l0万的负载情况下,用户请求的平均响应时间应小于3秒”这一场景主要与性能质量属性相关,通常可采用提高计算效率、减少计算开销、控制资源使用、资源调度、负载均衡等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 抽象接口 ",
                        " 信息隐藏 ",
                        " 主动冗余 ",
                        " 资源调度 "
                    ]
                },
                {
                    "index": 463,
                    "belong_page": 1,
                    "question_id": 356123,
                    "question_title": "<p>某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3 个核心质量属性场景。其中“网站在并发用户数量10 万的负载情况下，用户请求的平均响应时间应小于3 秒”这一场景主要与（-）&nbsp;质量属性相关。通常可采用（-）&nbsp;架构策略实现上述属性。“主站宕机后，系统能够在10 秒内自动切换至备用站点并恢复正常运行”主要与（-）质量属性相关。通常可采用（-）架构策略实现该属性。“系统完成上线后，少量的外围业务功能和界面的调整与修改不超过10 人・月”主要与（请作答此空）质量属性相关。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356123,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>“系统完成上线后,少量的外围业务功能和界面的调整与修改不超过l0人·月”主要与可修改性质量属性相关。&nbsp;</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " A ．性能 ",
                        " B ．可用性&nbsp; ",
                        " C ．易用性 ",
                        " D ．可修改性 "
                    ]
                },
                {
                    "index": 464,
                    "belong_page": 1,
                    "question_id": 356124,
                    "question_title": "<p>系统中的构件和连接件都有一个顶部和一个底部，构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接的顶部，构件和构件之间不允许直接连接，连接件直接连接时，必须由其中一个的底部连接到另一个的顶部。上述构件和连接件的组织规则描述的是（）架构风格。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356124,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>C2体系结构风格可以概括为：通过连接件绑定在一起按照一组规则运作的并行构件网络。C2风格中的系统组织规则如下。</p><p>①系统中的构件和连接件都有一个顶部和一个底部。</p><p>②构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接件的顶部。而构件与构件之间的直接连接是不允许的。</p><p>③一个连接件可以和任意数目的其他构件和连接件连接。</p><p>④当两个连接件进行直接连接时，必须由其中一个的底部到另一个的顶部。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " A.管道-过滤器 ",
                        " &nbsp;B.分层系统 ",
                        " C.C2 ",
                        " D.面向对象 "
                    ]
                },
                {
                    "index": 465,
                    "belong_page": 1,
                    "question_id": 356125,
                    "question_title": "<p>某公司拟开发一个新闻系统，该系统可根据用户的注册兴趣，向用户推送其感兴趣的新闻内容，该系统应该采用（）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356125,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>用户会注册自己的兴趣，然后系统也会把新闻按兴趣分类，如果某个新闻事件发生，可以通过事件来触发推送动作，将新闻推送给对其感兴趣的用户。这是典型的事件驱动系统应用场景。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A. &nbsp;事件驱动系统&nbsp; ",
                        " B. &nbsp;主程序-子程序 ",
                        " C. &nbsp;黑板 ",
                        " D. &nbsp;管道-过滤器 "
                    ]
                },
                {
                    "index": 466,
                    "belong_page": 1,
                    "question_id": 356126,
                    "question_title": "<p>某公司拟为某种新型可编程机器人开发相应的编译器。该编译过程包括词法分析、语法分析、语义分析和代码生成四个阶段，每个阶段产生的结果作为下一个阶段的输入，且需独立存储。针对上述描述，该集成开发环境应采用（ &nbsp;）架构风格最为合适。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356126,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>在管道和过滤器软件体系结构中,每个模块都有一组输入和一组输出。每个模块从它的输入端接收输入数据流,在其内部经过处理后,按照标准的顺序,将结果数据流送到输出端,以达到传递一组完整的计算结果实例的目的。它最典型的应用是在编译系统。一个普通的编译系统包括词法分析器,语法分析器,语义分析与中间代码生成器,优化器,目标代码生成器等一系列对源程序进行处理的过程。题干描述适合管道-过滤器模式。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A．管道-过滤器 ",
                        " B．数据仓储 ",
                        " C．主程序-子程序 ",
                        " D．解释器 "
                    ]
                },
                {
                    "index": 467,
                    "belong_page": 1,
                    "question_id": 356196,
                    "question_title": "<p>通常，嵌入式中间件没有统一的架构风格，根据应用对象的不同可存在多种类型，比较常见的是消息中间件和分布式对象中间件。以下有关消息中间件的描述中，不正确的是（12）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356196,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>消息中间件，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。消息队列（Message queue 即MQ）是在消息的传输过程中保存消息的容器。MQ负责两个系统之间传递消息，这两个系统可以是异构的，处于不同硬件、不同操作系统、用不同语言编写，只需要简单配置、以及简单的调用几个MQ的API，就可以互相通讯，不必考虑底层系统和网络的复杂性，MQ能够应付多种异常情况。消息中间件支持点对点模式、订阅发布模式、推拉模式。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 消息中间件是消息传输过程中保存消息的一种容器 ",
                        " 消息中间件具有两个基本特点：采用异步处理模式、应用程序和应用程序  调用关系为松耦合关系 ",
                        " 消息中间件主要由一组对象来提供系统服务，对象间能够跨平台通信 ",
                        " 消息中间件的消息传递服务模型有点对点模型和发布-订阅模型之分 "
                    ]
                },
                {
                    "index": 468,
                    "belong_page": 1,
                    "question_id": 356219,
                    "question_title": "<p>以下关于微服务架构与面向服务架构的描述中，正确的是（32）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356219,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>SOA还是中心化集成老架构，ESB是SOA架构的中心；</p><p>而微服务架构倡导去中心化的服务管理和治理,尽量不设置中心化的管理服务。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 两者均采用去中心化管理 ",
                        " 两者均采用集中式管理 ",
                        " 微服务架构采用去中心化管理，面向服务架构采用集中式管理 ",
                        " 微服务架构采用集中式管理，面向服务架构采用去中心化管理 "
                    ]
                },
                {
                    "index": 469,
                    "belong_page": 1,
                    "question_id": 356223,
                    "question_title": "<p>以下有关构件特征的的描述，说法不正确的是（35）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356223,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>构件作为可部署单元，具有原子性，是不可拆分的。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 构件是独立的部署单元 ",
                        " 构件可作为第三方的组装单元 ",
                        " 构件没有外部的可见状态 ",
                        " 构件作为部署单元是可拆分的 "
                    ]
                },
                {
                    "index": 470,
                    "belong_page": 1,
                    "question_id": 356224,
                    "question_title": "<p>在构件的定义中，（36）是一个已命名的一组操作的集合。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356224,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>构件的接口是一种服务提供者对消费者的承诺，即契约（contract），用契约确保一组构件之间的行为组合。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 接口 ",
                        " 对象 ",
                        " 函数 ",
                        " 模块 "
                    ]
                },
                {
                    "index": 471,
                    "belong_page": 1,
                    "question_id": 356225,
                    "question_title": "<p>在服务端构件模型的典型解决方案中，（37）较为适用于应用服务器。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356225,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>EJB（Enterprise Java Beans） 是运行在独立服务器上的组件。</p><p>COM+ 是 Microsoft 组件对象模型 (COM) 和 Microsoft Transaction Server (MTS) 的演变。COM+ 可用于开发适用于Windows的企业范围、任务关键型分布式应用程序。</p><p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器。</p><p>ASP即Active Server Pages，是Microsoft公司开发的服务器端脚本环境，可用来创建动态交互式网页并建立强大的web应用程序。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " EJB和COM+模型 ",
                        " EJB和servlet模型 ",
                        " COM+和ASP模型 ",
                        " COM+和servlet模型 "
                    ]
                },
                {
                    "index": 472,
                    "belong_page": 1,
                    "question_id": 356226,
                    "question_title": "<p>以下有关构件演化的描述中，说法不正确的是（38）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356226,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>此题采用排除法，ABC显然都是正确的。另，安装新版本构件时，有两种方式，一种是全量构建，另一种是增量构建，后一种不需要停止所有已有版本构件的运行只要升级增量部分即可。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 安装新版本构件可能与现有系统发生冲突 ",
                        " 构件通常也会经历一般软件产品具有的演化过程 ",
                        " 解决遗留系统移植问题，还需要通过使用包裹器构件，更适配旧版软件 ",
                        " 为安装新版本的构建，必须终止系统中所有已有版本构件后运行 "
                    ]
                },
                {
                    "index": 473,
                    "belong_page": 1,
                    "question_id": 356227,
                    "question_title": "<p>软件复杂性度量中，（39）可以反映原代码结构的复杂度。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356227,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件源码复杂度度量方法主要有三种：代码行、Helstead方法、McCabe方法（环形复杂度）。</p><p>1、代码行方法：是一种最简单的方法，该方法认为，代码行越多，软件越容易产生漏洞。</p><p>2、Helstead方法：思路是根据程序中可执行代码行的操作符和操作数的数量来计算程序的复杂性。操作符和操作数的量越大，程序结构就越复杂。</p><p>3、McCabe方法：环路复杂度用来定量度量程序的逻辑复杂度。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 模块数 ",
                        " 环路数 ",
                        " 用户数 ",
                        " 对象数 "
                    ]
                },
                {
                    "index": 474,
                    "belong_page": 1,
                    "question_id": 356233,
                    "question_title": "<p>在软件体系结构的建模与描述中，多视图是一种描述软件体系结构的重要途径，其体现了（44）的思想。其中，4+1模型是描述软体系结的常用型，在该模型中，“1”指的是（45），</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356232,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>Kruchten在1995年提出了一个“4＋1”的视图模型。“4＋1”视图模型从5个不同的视角来描述软件架构，每个视图只关心系统的一个侧面，5个视图结合在一起才能反映软件架构的全部内容，其思想即为关注点分离。其中，“4”为逻辑视图、开发视图、进程视图、物理视图；“1”为场景。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 关注点分离 ",
                        " 面网对象 ",
                        " 模型驱动 ",
                        " UML&nbsp; "
                    ]
                },
                {
                    "index": 475,
                    "belong_page": 1,
                    "question_id": 356234,
                    "question_title": "<p>在软件体系结构的建模与描述中，多视图是一种描述软件体系结构的重要途径，其体现了（44）的思想。其中，4+1模型是描述软体系结的常用型，在该模型中，“1”指的是（45），</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356232,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>Kruchten在1995年提出了一个“4＋1”的视图模型。“4＋1”视图模型从5个不同的视角来描述软件架构，每个视图只关心系统的一个侧面，5个视图结合在一起才能反映软件架构的全部内容，其思想即为关注点分离。其中，“4”为逻辑视图、开发视图、进程视图、物理视图；“1”为场景。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 统一场景 ",
                        " 开发视图 ",
                        " 逻辑视图 ",
                        " 物理视图 "
                    ]
                },
                {
                    "index": 476,
                    "belong_page": 1,
                    "question_id": 356236,
                    "question_title": "<p>基于体系结构的软件设计（Architecture-Based Software Design. ABSD） 方法是体系结构驱动，是指构成体系结构的（46）的组合驱动的。ABSD方法是一个自项向下、递归细化的方法，软件系统的体系结构通过该方法得到细化，直到能产生（47）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356235,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>ABSD方法是体系结构驱动，即指构成体系结构的商业、质量和功能需求的组合驱动的。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 产品、功能需求和设计活动 ",
                        " 商业、质量和功能需求 ",
                        " 商业、产品和功能需求 ",
                        " 商业、质量和设计活动 "
                    ]
                },
                {
                    "index": 477,
                    "belong_page": 1,
                    "question_id": 356237,
                    "question_title": "<p>基于体系结构的软件设计（Architecture-Based Software Design. ABSD） 方法是体系结构驱动，是指构成体系结构的（46）的组合驱动的。ABSD方法是一个自项向下、递归细化的方法，软件系统的体系结构通过该方法得到细化，直到能产生（47）。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356235,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>ABSD方法是一个自顶向下，递归细化的方法，软件系统的体系结构通过该方法得到细化，直到能产生软件构件和类。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 软件产品和代码 ",
                        " 软件构件和类 ",
                        " 软件构件和连接件 ",
                        " 类和软件代码 "
                    ]
                },
                {
                    "index": 478,
                    "belong_page": 1,
                    "question_id": 356239,
                    "question_title": "<p>软件体系结构风格是描述某一特定应用领城中系统组织方式的惯用模式。其中，在批处理风格软件体系结构中，每个处理步骤是一个单独的程序，每一步必须在前一步结束后才能开始，并且数据必须是完整的，以（48）的方式传递，基于规则的系统包括规则集、规则解释器、规则/数据选择器及（49）</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356238,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>构件为一系列固定顺序的计算单元，构件之间只通过数据传递交互。每个处理步骤是一个独立的程序，每一步必须在其前一步结束后才能开始，数据必须是完整的，以整体的方式传递。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 迭代 ",
                        " 整体 ",
                        " 统一格式 ",
                        " 递增 "
                    ]
                },
                {
                    "index": 479,
                    "belong_page": 1,
                    "question_id": 356240,
                    "question_title": "<p>软件体系结构风格是描述某一特定应用领城中系统组织方式的惯用模式。其中，在批处理风格软件体系结构中，每个处理步骤是一个单独的程序，每一步必须在前一步结束后才能开始，并且数据必须是完整的，以（48）的方式传递，基于规则的系统包括规则集、规则解释器、规则/数据选择器及（49）</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356238,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>基于规则的系统包括规则集、规则解释器、规则/数据选择器和工作内存，一般用在人工智能领域和DSS中。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 解释引擎 ",
                        " 虚拟机 ",
                        " 数据 ",
                        " 工作内存 "
                    ]
                },
                {
                    "index": 480,
                    "belong_page": 1,
                    "question_id": 356242,
                    "question_title": "<p>在软件架构复用中，（50）是指开发过程中，只要发现有可复用的资产，就对其进行复用。（51）是指在开发之前，就要进行规划，以决定哪些需要复用。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356241,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>无</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 发现复用 ",
                        " 机会复用 ",
                        " 资产复用 ",
                        " 过程复用 "
                    ]
                },
                {
                    "index": 481,
                    "belong_page": 1,
                    "question_id": 356243,
                    "question_title": "<p>在软件架构复用中，（50）是指开发过程中，只要发现有可复用的资产，就对其进行复用。（51）是指在开发之前，就要进行规划，以决定哪些需要复用。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356241,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "无",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 预期复用 ",
                        " 计划复用 ",
                        " 资产复用 ",
                        " 系统复用 "
                    ]
                },
                {
                    "index": 482,
                    "belong_page": 1,
                    "question_id": 356244,
                    "question_title": "<p>软件复用过程的主要阶段包括（52）</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356244,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>软件复用过程包含：创建、复用、支持、管理4个过程。</p><p>1、创建过程：界定和提供可复用资产，以满足复用者的需要；</p><p>2、复用过程：利用可复用资产来生产应用软件产品；</p><p>3、支持过程：全面支持可复用资产的获取、管理和维护工作；</p><p>4、管理过程：执行计划、启动、资源、跟踪，并协调其他各个过程；</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 分析可复用的软件资产、管理可复用资产和使用可复用资产 ",
                        " 构造/获取可复用的软件资产、管理可复用资产和使用可复用资产 ",
                        " 构造/取可复用的软件资产和管理可复用资产&nbsp; ",
                        " 分析可复用的软件资产和使用可复用资产 "
                    ]
                },
                {
                    "index": 483,
                    "belong_page": 1,
                    "question_id": 356245,
                    "question_title": "<p>DSSA（Domain Specific Software Architecture）就是在一个特定应用领域中为一组应用提供组织结构参考的标准软件体系结构，实施DSSA的过程中包含了一临基本的活动。其中，领域模型是（53）阶段的主要目标。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356245,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>领域分析的主要目标是获得领域模型。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 领城设计 ",
                        " 领域实现 ",
                        " 领域分析 ",
                        " 领域工程 "
                    ]
                },
                {
                    "index": 484,
                    "belong_page": 1,
                    "question_id": 356247,
                    "question_title": "<p>软件系统质量属性（Quality Attribute）是一个系统的可测量或者可测试的属性，它被用来描述系统满足利益相关者需求的程度，其中，（54）关注的是当需要修改缺陷、增加功能、提高质量属性时，定位修改点并实施修改的难易程度，（55）关注的是当用户数和数据量增加时，软件系统维持高服务质量的能力。<br/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356246,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>软件质量特性包括功能性、可靠性、易用性、效率、可维护性、可移植性等 6 个方面，每个方面都包含若干个子特性。</p><p>功能性：适合性、准确性、互操作性、依从性、安全性；</p><p>可靠性：成熟性、容错性、易恢复性；</p><p>易用性：易理解性、易学性、易操作性；</p><p>效率：时间特性、资源特性；</p><p>可维护性：易分析性、易改变性、稳定性、易测试性；</p><p>可移植性：适应性、易安装性、遵循性、易替换性；</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可靠性 ",
                        " 可测试性 ",
                        " 可维护性 ",
                        " 可重用性<br/> "
                    ]
                },
                {
                    "index": 485,
                    "belong_page": 1,
                    "question_id": 356248,
                    "question_title": "<p>软件系统质量属性（Quality Attribute）是一个系统的可测量或者可测试的属性，它被用来描述系统满足利益相关者需求的程度，其中，（54）关注的是当需要修改缺陷、增加功能、提高质量属性时，定位修改点并实施修改的难易程度，（55）关注的是当用户数和数据量增加时，软件系统维持高服务质量的能力。<br/></p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356246,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>软件质量特性包括功能性、可靠性、易用性、效率、可维护性、可移植性等 6 个方面，每个方面都包含若干个子特性。</p><p>功能性：适合性、准确性、互操作性、依从性、安全性；</p><p>可靠性：成熟性、容错性、易恢复性；</p><p>易用性：易理解性、易学性、易操作性；</p><p>效率：时间特性、资源特性；</p><p>可维护性：易分析性、易改变性、稳定性、易测试性；</p><p>可移植性：适应性、易安装性、遵循性、易替换性；</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可用性 ",
                        " 可扩展性 ",
                        " 可伸缩性 ",
                        " 可移植性 "
                    ]
                },
                {
                    "index": 486,
                    "belong_page": 1,
                    "question_id": 356250,
                    "question_title": "<p>为了精确描述软件系统的质量属性，通常采用质量属性场景（Quality Attribute Scenario）作为描述质量属性的手段。质量属性场景是一个具体的质量属性需求，是利益相关者与系统的交互的简短陈述，它由刺激源、刺激、环境、制品、（56）六部分组成。其中，想要学习系统特性、有效使用系统、使错误的影响最低、适配系统、对系统满意属于（57）质量属性场景的刺激。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356249,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>最常见的质量属性分别是：可用性（Availability）、可修改性（Modifiability）、性能（Performance）、安全性（Security）、可测试性（Testability）、易用性（Usability）。</p><p>刻画质量属性的手段由六部分组成：刺激源、刺激、环境、制品、响应、响应度量；</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " 响应和响应度量 ",
                        " 系统和系统响应 ",
                        " 依赖和响 ",
                        " 响应和优先 "
                    ]
                },
                {
                    "index": 487,
                    "belong_page": 1,
                    "question_id": 356251,
                    "question_title": "<p>为了精确描述软件系统的质量属性，通常采用质量属性场景（Quality Attribute Scenario）作为描述质量属性的手段。质量属性场景是一个具体的质量属性需求，是利益相关者与系统的交互的简短陈述，它由刺激源、刺激、环境、制品、（56）六部分组成。其中，想要学习系统特性、有效使用系统、使错误的影响最低、适配系统、对系统满意属于（57）质量属性场景的刺激。</p>",
                    "question_type": 9,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356249,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>最常见的质量属性分别是：可用性（Availability）、可修改性（Modifiability）、性能（Performance）、安全性（Security）、可测试性（Testability）、易用性（Usability）。</p><p>刻画质量属性的手段由六部分组成：刺激源、刺激、环境、制品、响应、响应度量；</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 可用性 ",
                        " 性能 ",
                        " 易用性&nbsp; &nbsp; &nbsp;&nbsp; ",
                        " 安全性 "
                    ]
                },
                {
                    "index": 488,
                    "belong_page": 1,
                    "question_id": 356252,
                    "question_title": "<p>改变加密级别可能会对安全性和性能产生非常重要的影响，因此在软件架构评估中，该设计决策是一个（58）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356252,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>敏感点是一个或多个构件的特性。权衡点是影响多个质量属性的特性，是多个质量属性的敏感点。由题干知，改变加密级别会影响安全性和性能两个质量属性，因此属于权衡点。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 敏感点 ",
                        " 风险点 ",
                        " 权衡点 ",
                        " 非风险点 "
                    ]
                },
                {
                    "index": 489,
                    "belong_page": 1,
                    "question_id": 356253,
                    "question_title": "<p>效用树是采用架构权衡分析方法（Architecture Tradeoff Analysis Method， ATAM）进行架构评估的工具之一，其树形结构从根部到叶子节点依次为（59）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356253,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>质量属性效用树结构为：根——质量属性——属性求精（细&nbsp;分）——场景（叶）</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " 树根、属性分类、优先级，质量属性场景<br/> ",
                        " 树根、质量属性、属性分类，质量属性场景 ",
                        " 树根、优先级、质量属性、质量属性场景 ",
                        " 树根、质量属性、属性分类，优先级 "
                    ]
                },
                {
                    "index": 490,
                    "belong_page": 1,
                    "question_id": 356254,
                    "question_title": "<p>平均失效等特时间（mean time to failure，MTTF）和平均失效间隔时间（mcan time between failure，MTBF）是进行系统可靠性分析时的要指标，在失效率为常数和修复时间很短的情况下，（60）。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356254,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>在失效率为常数和修复时间很短的情况下，MTTF和MTBF几乎相等。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " MTTF远远小于MTBF ",
                        " MTTF和MTBF无法计算 ",
                        " MTTF远远大于MTBF ",
                        " MTTF和MTBF几乎相等 "
                    ]
                },
                {
                    "index": 491,
                    "belong_page": 1,
                    "question_id": 356258,
                    "question_title": "<p>在进行架构评估时，首先要明确具体的质量目标，并以之作为判定该架构优劣的标准。为得出这些目标而采用的机制叫做场景，场景是从（63）的角度对与系统的交互的简短措述。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356258,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>场景（scenarios）在进行体系结构评估时，一般首先要精确地得出具体的质量目标，并以之作为判定该体系结构优劣的标准。为得出这些目标而采用的机制做场景。场景是从风险承担者的角度对与系统的交互的简短描述。在体系结构评估中，一般采用刺激（stimulus）、环境（environment）和响应（response）三方面来对场景进行描述。</p>",
                    "like": 0,
                    "answer": [
                        "D"
                    ],
                    "option": [
                        " 用户 ",
                        " 系统架构师 ",
                        " 项目管理者 ",
                        " 风险承担者<br/> "
                    ]
                },
                {
                    "index": 492,
                    "belong_page": 1,
                    "question_id": 356466,
                    "question_title": "<p>某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3 个核心质量属性场景。其中“网站在并发用户数量10 万的负载情况下，用户请求的平均响应时间应小于3 秒”这一场景主要与（-）&nbsp;质量属性相关。通常可采用（-）&nbsp;架构策略实现上述属性。“主站宕机后，系统能够在10 秒内自动切换至备用站点并恢复正常运行”主要与（-）质量属性相关。通常可采用（请作答此空）架构策略实现该属性。</p>",
                    "question_type": 1,
                    "answer_type": 1,
                    "show_type_name": "单选题",
                    "new_parent_id": 356466,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "<p>“主站宕机后,系统能够在l0秒内自动切 换至备用站点并恢复正常运行”主要与可用性质量属性相关,通常可采用Ping／Echo、心跳、异常检测、主动冗余、被动冗余、检查点等架构策略实现该属性。</p>",
                    "like": 0,
                    "answer": [
                        "C"
                    ],
                    "option": [
                        " 记录／回放 ",
                        " 操作串行化 ",
                        " 心跳 ",
                        " 增加计算资源 "
                    ]
                },
                {
                    "index": 493,
                    "belong_page": 1,
                    "question_id": 356114,
                    "question_title": "<p>在架构评估过程中，评估人员所关注的是系统的质量属性。其中，（ ）是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的 （ ）。</p>",
                    "question_type": 8,
                    "answer_type": 1,
                    "show_type_name": "完形填空题",
                    "new_parent_id": 356113,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "1",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的个数。</p>",
                    "like": 0,
                    "answer": [
                        "B"
                    ],
                    "option": [
                        " A.安全性&nbsp; ",
                        " B.性能 ",
                        " C.可用性 &nbsp; ",
                        " D.可靠性 "
                    ]
                },
                {
                    "index": 494,
                    "belong_page": 1,
                    "question_id": 356115,
                    "question_title": "<p>在架构评估过程中，评估人员所关注的是系统的质量属性。其中，（ ）是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的 （ ）。</p>",
                    "question_type": 8,
                    "answer_type": 1,
                    "show_type_name": "完形填空题",
                    "new_parent_id": 356113,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "2",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理的事件的个数。</p>",
                    "like": 0,
                    "answer": [
                        "A"
                    ],
                    "option": [
                        " A.个数 ",
                        " B.速度 ",
                        " &nbsp;C.消耗&nbsp; ",
                        " D.故障率 "
                    ]
                },
                {
                    "index": 495,
                    "belong_page": 1,
                    "question_id": 43727,
                    "question_title": "<p>试题一（25分）<br/>请详细阅读以下关于网络设备管理系统架构设计的说明，回答下列问题。<br/>【说明】<br/>某软件公司欲开发一个网络设备管理系统，对管理区域内的网络设备(如路由器和交换机等)进行远程监视和控制。公司的系统分析师首先对系统进行了需求分析，识别出如下3项核心需求：<br/>&nbsp;&nbsp; &nbsp;(a)目前需要管理的网络设备确定为10类20种，未来还将有新类别的网络设备纳入到该设备管理系统中；<br/>&nbsp;&nbsp; &nbsp;(b)不同类别的网络设备，监视和控制的内容差异较大；同一类网络设备，监视和控制的内容相似，但不同厂商的实现方式(包括控制接口格式、编程语言等)差异较大；<br/>&nbsp;&nbsp; &nbsp;(c)网络管理员能够在一个统一的终端之上实现对这些网络设备的可视化呈现和管理操作。<br/>&nbsp;&nbsp; &nbsp;&nbsp; 针对上述需求，公司研发部门的架构师对网络设备管理系统的架构进行了分析与设计，架构师王工认为该系统可以采用MVC架构风格实现，即对每种网络设备设计一个监控组件，组件通过调用网络设备厂商内置的编程接口对监控指令进行接收和处理；系统管理员通过管理模块向监控组件发送监控指令，对网络设备进行远程管理；网络状态、监控结果等信息会在控制终端上进行展示。针对不同网络设备的差异，王工认为可以对当前的20种网络设备接口进行调研与梳理，然后通过定义统一操作接口屏蔽设备差异。李工同意王工提出的MVC架构风格和定义统一操作接口的思路，但考虑到未来还会有新类别的网络设备接入，认为还需要采用扩展接口的方式支持系统开发人员扩展或修改现有操作接口。公司组织专家进行架构评审，最终同意了王工的方案和李工的改进意见。<br/>【问题1】<br/>请用300字以内的文字解释什么是MVC架构风格以及其中的组件交互关系，并根据题干描述，指出该系统中的M、V、C分别对应什么。</p><p>【问题2】<br/>扩展接口模式结构通常包含四个角色：基础接口、组件、扩展接口和客户端，它们之间的关系如下图所示。其中每个扩展接口需要通过扩展基础接口获得基本操作能力，然后加入自己特有的操作接口，并通过设置全局唯一接口ID对自身接口进行标识。每个具体的组件需要实现扩展接口完成实际操作。客户端不与组件直接交互，而需要通过与扩展接口交互提出调用请求，扩展接口根据请求查找并选择合适的实现组件响应客户端请求。请根据下图所示和题干描述，指出扩展接口模式结构中的四个角色分别对应网络设备管理系统的哪些部分；并以客户端发起调用操作这一场景为例，填写表1中的(1)～(5)。 <br/></p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/201807/259019098dcef69a92476253ba285be16187cc.png\"/></p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/201807/853cb66067e4f900abb393d2739c1c24b1cb55.png\"/></p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43727,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>答案：<br/>【问题1】<br/>MVC架构风格最初是Smalltalk-80中用来构建用户界面时采用的架构设计风格。其中M代表模型(Model)，V代表视图(View)，C代表控制器(Controller)。在该风格中，模型表示待展示的对象，视图表示模型的展示，控制器负责把用户的动作转成针对模型的操作。模型通过更新视图的数据来反映自身的变化。<br/>&nbsp;&nbsp; &nbsp;在本系统中，模型(M)代表监控组件、视图(V)代表控制终端、控制器(C)代表管理模块。</p><p>【问题2】</p><p>答案：1.扩展接口 2.组件 3.操作接口 4.接口ID 5.基础接口<br/>分析：各个角色与网络设备管理系统的对应关系为： <br/>&nbsp;&nbsp; &nbsp;基础接口对应统一操作接口； 组件对应监控组件； 扩展接口对应新网络设备的操作接口；客户端对应控制终端。 <br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>见解析</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 496,
                    "belong_page": 1,
                    "question_id": 43730,
                    "question_title": "<p>试题四（25分）<br/>请详细阅读有关软件架构评估方面的说明，回答下列问题。<br/>【说明】<br/>&nbsp;某电子商务公司拟升级目前正在使用的在线交易系统，以提高客户网上购物时在线支付环节的效率和安全性。公司研发部门在需求分析的基础上，给出了在线交易系统的架构设计。公司组织相关人员召开了针对架构设计的评估会议，会上用户提出的需求、架构师识别的关键质量属性场景和评估专家的意见等内容部分列举如下：<br/>&nbsp;&nbsp; &nbsp;(a)在正常负载情况下，系统必须在0.5秒内响应用户的交易请求；<br/>&nbsp;&nbsp; &nbsp;(b)用户的信用卡支付必须保证99.999%的安全性；<br/>&nbsp;&nbsp; &nbsp;(c)系统升级后用户名要求至少包含8个字符；<br/>&nbsp;&nbsp; &nbsp;(d)网络失效后，系统需要在2分钟内发现错误并启用备用系统；<br/>&nbsp;&nbsp; &nbsp;(e)在高峰负载情况下，用户发起支付请求后系统必须在10秒内完成支付功能；<br/>&nbsp;&nbsp; &nbsp;(f)系统拟采用新的加密算法，这会提高系统安全性，但同时会降低系统的性能；<br/>&nbsp;&nbsp; &nbsp;(g)对交易请求处理时间的要求将影响系统数据传输协议和交易处理过程的设计；<br/>&nbsp;&nbsp; &nbsp;(h)需要在30人月内为系统添加公司新购买的事务处理中间件；<br/>&nbsp;&nbsp; &nbsp;(i)现有架构设计中的支付部分与第三方支付平台紧耦合，当系统需要支持新的支付平台时，这种设计会导致支付部分代码的修改，影响系统的可修改性；<br/>&nbsp;&nbsp; &nbsp;(j)主站点断电后，需要在3秒内将访问请求重定向到备用站点；<br/>&nbsp;&nbsp; &nbsp;(k)用户信息数据库授权必须保证99.999%可用；<br/>&nbsp;&nbsp; &nbsp;(l)系统需要对Web界面风格进行修改，修改工作必须在4人月内完成；<br/>&nbsp;&nbsp; &nbsp;(m)系统需要为后端工程师提供远程调试接口，并支持远程调试。<br/><br/>【问题1】<br/>在架构评估过程中，质量属性效用树(utility tree)是对系统质量属性进行识别和优先级排序的重要工具。请给出合适的质量属性，填入下图中(1)、(2)空白处；并选择题干描述的(a)～(m)，填入(3)～(6)空白处，完成该系统的效用树。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/201807/85ab53d384c1c02dca677815f29730129890c3.png\"/></p><p><br/></p><p><br/></p><p>【问题2】</p><p>在架构评估过程中，需要正确识别系统的架构风险、敏感点和权衡点，并进行合理的架构决策。请用300字以内的文字给出系统架构风险、敏感点和权衡点的定义，并从题干(a)～(m)中各选出1个对系统架构风险、敏感点和权衡点最为恰当的描述。</p><p><br/></p><p><br/></p><p><br/></p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43730,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】</p><p>在架构评估过程中，质量属性效用树(utility tree)是对系统质量属性进行识别和优先级排序的重要工具。效用树主要关注性能、可修改性、可用性和安全4个方面</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20190830/1567130582945940.png\" title=\"1567130582945940.png\" alt=\"QQ截图20190830100425.png\"/><br/></p><p>【问题2】</p><p>系统架构风险是指架构设计中潜在的、存在问题的架构决策所带来的隐患。敏感点是为了实现某种特定质量属性，一个或多个系统组件所具有的特性。权衡点是影响多个质量属性，并对多个质量属性来说都是敏感点的系统属性。根据上述分析可知题干描述中，(i)描述的是系统架构风险；(g)描述的是敏感点；(f)描述的是权衡点。</p><p><br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 497,
                    "belong_page": 1,
                    "question_id": 43731,
                    "question_title": "<p>试题五<br/>请详细阅读有关Web应用架构设计方面的说明，回答下列问题。<br/>【说明】<br/>&nbsp;某软件公司开发运维了一个社交网站系统，该系统基于开源软件平台LAMP(Linux+Apache+MySQL+PHP)构建，运行一段时间以来，随着用户数量及访问量的增加，系统在Web服务器负载、磁盘I/O等方面出现了明显瓶颈，已不能满足大量客户端并发访问的要求，因此公司成立了专门的项目组，拟对系统架构进行调整以提高系统并发处理能力。目前系统采用了传统的三层结构，系统架构如下图所示。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/201807/b39f9b334efeaa5055a5468be633d60880e260.png\"/></p><p><br/></p><p><br/></p><p>【问题2】</p><p>针对并发数据库访问所带来的磁盘I/O瓶颈问题，项目组决定在数据层引入数据库扩展机制。经过调研得知系统数据库中存储的主要数据为以用户标识为索引的社交网络数据，且系统运行时发生的大部分数据库操作为查询操作。经过讨论，项目组决定引入数据库分区和MySQL主从复制两种扩展机制。数据库分区可采用水平分区和垂直分区两种方式，请用350字以内的文字说明在本系统中应采用哪种方式及其原因，并分析引入主从复制机制给系统带来的好处。</p><p><br/></p><p>【问题3】<br/>为进一步提高数据库访问效率，项目组决定在中间层与数据层之间引入缓存机制。赵工开始提出可直接使用MySQL的查询缓存(query cache)机制，但项目组经过分析好友动态显示等典型业务的操作需求，同时考虑已引入的数据库扩展机制，认为查询缓存尚不能很好地提升系统的查询操作效率，项目组最终决定在中间层与数据层之间引入Memcached分布式缓存机制。<br/>&nbsp;&nbsp; &nbsp;(a)请补充下述关于引入Memcached后系统访问数据库的基本过程：系统需要读取后台数据时，先检查数据是否存在于______中，若存在则直接从其中读取，若不存在则从______中读取并保存在______中；当______中数据发生更新时，需要将更新后的内容同步到______实例中。(备选答案：数据库、Memcached缓存)<br/>&nbsp;&nbsp; &nbsp;(b)请结合已知信息从缓存架构、缓存有效性及缓存数据类型等方面分析使用Memcached代替数据库查询缓存的原因。</p><p><br/></p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43731,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】</p><p>两种机制的基本原理：&nbsp;</p><p>&nbsp;&nbsp; &nbsp;基于DNS的负载均衡机制通过DNS服务器实现，通常通过循环复用具有同一域名的多个主机地址的服务器实现负载均衡。&nbsp;</p><p>反向代理负载均衡则是将来自Internet的连接请求以反向代理的方式动态转发给内部网络上的多台服务器进行处理，从而达到负载均衡的目的。&nbsp;</p><p>区别比较：</p><p>从系统执行效率方面讲，基于DNS的负载均衡机制实现简单，但其通常不能区分服务器的差异，也不能反映服务器的当前运行状态。基于反向代理的则可以根据内部服务器的性能差异及实时负载情况进行动态负载均衡，当系统多个Web服务器性能存在明显差异或内部Web服务器出现故障时，负载均衡器可以更快做出响应，从而保证客户端的访问效率。采用基于反向代理的负载均衡机制，可在代理服务器中引入调速缓存机制，对Web服务器返回的静态页面或图片等静态资源进行缓存，由代理服务器承担对原始服务器的静态资源访问请求，从而进一步降低原始Web服务器的负载。</p><p>&nbsp;&nbsp; &nbsp;从安全性方面讲，采用基于反向代理的负载均衡机制，代理服务器屏蔽了客户端对真实Web服务器的直接访问，恶意用户无法对真实Web服务器进行攻击，且可以通过代理服务器为原本不安全的客户端与Web服务器之间的连接建立安全通道。因此采用基于反向代理的负载均衡机制可为系统提供更好的安全性保障。<br/></p><p>（1）&nbsp;否（2）是（3）否（4）是（5）否（6）是（7）是（8）否</p><p>（注：主要意思答出来即可）<br/></p><p>【问题2】<br/></p><p>(1)本系统中应主要使用水平分区机制。根据已知信息，系统数据库中存储的主要数据为以用户标识为索引的社交网络数据，采用水平分区机制可根据用户标识将用户数据进行水平分割，用户操作时先将请求分发到不同数据库分区，再进行具体数据库操作，以提高数据库访问效率。</p><p>&nbsp;&nbsp; &nbsp;(2)引入主从复制机制所带来的好处：</p><p>&nbsp;&nbsp; &nbsp;①避免数据库单点故障：主服务器实时、异步复制数据到从服务器，当主数据库宕机时，可在从数据库中选择一个升级为主服务器，从而防止数据库单点故障。</p><p>&nbsp;&nbsp; &nbsp;②提高查询效率：根据系统数据库访问特点，可以使用主数据库进行数据的插入、删除及更新等写操作，而从数据库则专门用来进行数据查询操作，从而将查询操作分担到不同的从服务器以提高数据库访问效率。</p><p>【问题3】</p><p>（a）&nbsp;&nbsp;(1)Memcached缓存&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;(2)数据库&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;(3)Memcached缓存</p><p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;(4)数据库&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;(5)Memcached缓存</p><p>(b) 使用Memcached代替数据库查询缓存的原因：</p><p>&nbsp;&nbsp; &nbsp;(1)缓存架构：数据库查询缓存通常每个数据库只有一个实例，因此存储内容受数据库服务器可用内存限制，可缓存数据有限。而Memcaehed可采用高速分布式缓存服务器结构，不受数据库服务器约束，可扩展性更好。</p><p>&nbsp;&nbsp; &nbsp;(2)缓存有效性：数据库查询缓存只要在发生写操作时就会失效，即使更新的是数据库中的其他行。而Memcached可通过键值将数据进行散列缓存，有效降低缓存的更新频率，从而提高缓存的有效性。</p><p>&nbsp;&nbsp; &nbsp;(3)缓存数据类型：数据库查询缓存只能缓存数据库行，对社交网站好友动态显示等典型业务所需要的组合数据缓存缺乏有效支持，而Memcached理论上可缓存任何内容。因此可以将分散在数据库中的关系或者列表组合后进行缓存，以提高缓存数据的针对性和效率。</p><p>&nbsp;</p><p><br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 498,
                    "belong_page": 1,
                    "question_id": 43733,
                    "question_title": "<p><br/></p><p><br/></p><p>试题二&nbsp;&nbsp;论非功能性需求对企业应用架构设计的影响</p><p>&nbsp;&nbsp; &nbsp;企业应用架构(Enterpise Application Architecture)描述了企业IT系统的功能和技术实现内容，它在企业信息化建设中起到了统一规划、承上启下的作用，向上承接了企业战略发展方向和业务模式，向下规划和指导企业各IT系统的定位和功能。企业应用架构包括了企业的应用架构蓝图、架构标准、系统的边界和定义、系统间的关联关系等。其中非功能性需求是进行企业应用架构设计时需要重点考虑的因素，不同类型的非功能性需求从不同侧面影响应用系统的架构设计。</p><p>&nbsp;&nbsp; &nbsp;请围绕“非功能性需求对企业应用架构设计的影响”论题，依次从以下三个方面进行论述。</p><p>&nbsp;&nbsp; &nbsp;1．概要叙述你参与分析和开发的企业应用系统项目以及你所担任的主要工作。</p><p>&nbsp;&nbsp; &nbsp;2．分析在企业应用架构设计中应该考虑哪些非功能性需求，详细阐述这些非功能性需求是如何影响架构设计的。</p><p>&nbsp;&nbsp; &nbsp;3．详细说明你所参与的企业应用系统项目中，在进行系统架构设计时，考虑了哪些非功能性需求，如何通过架构设计满足了系统的这些非功能性需求。</p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43733,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "<p>见解析</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 499,
                    "belong_page": 1,
                    "question_id": 43815,
                    "question_title": "<p>阅读以下关于Web系统架构的设计的叙述，回答下列问题。<br/></p><p>某信息技术公司计划开发一套在线投票系统，用于为市场调研、信息调查和销售反馈等业务提供服务。该系统计划通过大量宣传和奖品鼓励的方式快速积累用户，当用户规模扩大到一定程度时，开始联系相关企业提供信息服务，并按照信息服务种类和用户投票数量收取费用。<br/></p><p><br/>为了降低开发成本和提高开发效率，项目组经过讨论后决定采用轻量级Java EE开发框架设计系统应用架构。在应用架构设计中，除了满足系统主要功能需求，还需要考虑的因素包括：</p><p>1.项目开发采用MySQL，数据库存储数据，但将来可能移植到其他数据库平台；</p><p>2.系统开发过程中尽可能降低或者消除SQL语句开发的工作量；</p><p>3.投票系统中数据之间的关系复杂，需要支持数据对象的聚合和继承等关系。</p><p><br/>项目组基于MVC模式设计出了投票系统的架构，包括表示层、业务逻辑层、数据持久层和数据层。在具体讨论数据持久层采用哪种技术方案时，老王建议采用成熟的Hibernate框架，小李则认为iBatis更加灵活，更适合作为投票系统数据持久层开发技术。</p><p>【问题1】</p><p>请用300以内文字说明什么是数据持久层，使用数据持久层能够为项目开发带来哪些好处?</p><p>【问题2】</p><p>针对在线投票系统的实际应用需求和要求，项目组应选用哪种技术实现数据持久层?请用200字以内文字说明其采用该技术的原因</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/201807/e636c28055ae3c3f8cd857eab63d0ce42562f4.png\"/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43815,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>数据持久层是根据分层思想，通过建立逻辑数据操作接口，采取一定的对象/关系映射策略，隐藏数据库访问代码细节，向业务开发人员提供透明的对象持久化操作机制。<br/></p><p><br/>能够为项目开发带来的好处：</p><p>(1)分离业务逻辑层和数据层，降低两者之间的耦合；</p><p>(2)通过对象/关系映射向业务逻辑提供面向对象的数据访问；</p><p>(3)简化数据层访问，隐藏数据库链接、数据读写命令和事务管理细节。</p><p><br/></p><p>项目组应该采用Hibernate框架。<br/></p><p>原因：(1)Hibernate支持多种不同类型数据库，满足项目组数据库移植需求；<br/></p><p>(2)Hibernate相对于iBatis减少了SQL语句开发的工作量；</p><p>(3)iBatis生成的PO是扁平化的，无法像Hibernate一样支持对象的继承和聚合等立体化关系。</p><p><br/><br/></p><p>答案：</p><p>(1)(c)&nbsp; &nbsp; (2)&nbsp; (b)&nbsp; &nbsp; (3)&nbsp; (d)&nbsp; &nbsp; (4)&nbsp; (a)</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>见解析</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 500,
                    "belong_page": 1,
                    "question_id": 43816,
                    "question_title": "<p><br/></p><h3>试题一&nbsp;&nbsp;论应用服务器基础软件</h3><p>应用服务器是在当今基于互联网的企业级应用迅速发展，电子商务应用出现并快速膨胀的需求下产生的一种新技术。在分布式、多层结构及基于组件和服务器端程序设计的企业级应用开发中，应用服务器提供的是一个开发、部署、运行和管理、维护的平台，提供软件“集群”功能，可以让多个不同的异构服务器协同工作、相互备份，以满足企业级应用所需要的高可用性、高性能、高可靠性和可伸缩性等实际需求。应用服务器技术的出现，能够加快应用的开发速度，减少应用的开发量。通过隔离底层细节，便于商业逻辑的实现与扩展，同时也为企业应用提供现成的、稳定的、灵活的、成熟的基础架构。</p><p>&nbsp;&nbsp; &nbsp;(请围绕“论应用服务器基础软件”论题，依次从以下三个方面进行论述。)</p><p>&nbsp;&nbsp; &nbsp;1．概要叙述你参与分析和开发的软件系统开发项目以及你所担任的主要工作。</p><p>&nbsp;&nbsp; &nbsp;2．论述并分析应用服务器在软件设计、开发、部署、运行和管理阶段，应该提供哪些核心功能?</p><p>&nbsp;&nbsp; &nbsp;3．详细说明你所参与的软件系统开发项目，采用了哪种应用服务器，在软件开发、部署和运行阶段，具体实施效果如何。</p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43816,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p>解析：</p><p>[写作要点]</p><p>&nbsp;&nbsp; &nbsp;一、简要描述所参与分析和开发的软件系统开发项目，并明确指出在其中承担的主要任务和开展的主要工作。</p><p>&nbsp;&nbsp; &nbsp;二、论述和分析应用服务器应该具备的核心功能。</p><p>&nbsp;&nbsp; &nbsp;应用服务器是应用设计、开发、部署、运行、管理、维护的平台。应用服务器既是应用开发的平台，包括表示层、应用层和数据层的设计模式和编程环境；同时又是多层结构应用的部署、运行平台，对多层结构应用进行配置、启动、监控、调整，并在开发的不同阶段提供不同的功能。</p><p>&nbsp;&nbsp; &nbsp;1．设计阶段，应用服务器完成底层通信、服务，并屏蔽掉复杂的底层技术细节，向用户提供结构简单、功能完善的编程接口，让用户可以专心于商务逻辑的设计。</p><p>&nbsp;&nbsp; &nbsp;2．开发阶段，应用服务器提供了完全开放的编程语言和应用接口，同时也提供快速开发的工具和手段，帮助用户提高开发效率。</p><p>&nbsp;&nbsp; &nbsp;3．部署阶段，应用服务器提供了对多种网络环境的支持，帮助用户在复杂的网络环境中配置系统参数，发挥系统最大性能。</p><p>&nbsp;&nbsp; &nbsp;4．运行阶段，应用服务器基于开发技术标准，提供了系统的运行环境，提供了系统的名字解析、路由选择、负载平衡、事务控制等服务，并提供系统容错、修复、迁移、升级扩展等功能。</p><p>&nbsp;&nbsp; &nbsp;5．管理阶段，应用服务器提供图形化界面来管理整个系统的资源，而且系统在运行期间也能动态监控和管理。</p><p>三、针对作者实际参与的软件系统开发项目，说明所采用的应用服务器，并描述该应用服务器在开发、部署和运行阶段的实际应用效果。&nbsp;　</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>见解析</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 501,
                    "belong_page": 1,
                    "question_id": 43817,
                    "question_title": "<p><br/></p><p><br/></p><p>试题二&nbsp;&nbsp;论软件系统架构风格</p><p>系统架构风格(System Architecture Style)是描述某一特定应用领域中系统组织方式的惯用模式。架构风格定义了一个词汇表和一组约束，词汇表中包含一些构件和连接件类型，而这组约束指出系统是如何将这些构件和连接件组合起来的。软件系统架构风格反映了领域中众多软件系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。软件系统架构风格的共有部分可以使得不同系统共享同一个实现代码，系统能够按照常用的、规范化的方式来组织，便于不同设计者很容易地理解系统架构。</p><p>&nbsp;&nbsp; &nbsp;(请围绕“论软件系统架构风格”论题，依次从以下三个方面进行论述。)</p><p>&nbsp;&nbsp; &nbsp;1．概要叙述你参与分析和开发的软件系统开发项目以及你所担任的主要工作。</p><p>&nbsp;&nbsp; &nbsp;2．分析软件系统开发中常用的软件系统架构风格有哪些?详细阐述每种风格的具体含义。</p><p>&nbsp;&nbsp; &nbsp;3．详细说明你所参与的软件系统开发项目中，采用了哪种软件系统架构风格，具体实施效果如何。</p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43817,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p>解析：</p><p>[写作要点]</p><p>&nbsp;&nbsp; &nbsp;一、简要描述所参与分析和开发的软件系统开发项目，并明确指出在其中承担的主要任务和开展的主要工作。</p><p>&nbsp;&nbsp; &nbsp;二、分析在软件系统开发中常用的软件系统架构风格，详细阐述每种风格的具体含义。</p><p>&nbsp;&nbsp; &nbsp;软件系统开发中常用的软件系统架构风格主要包括：</p><p>&nbsp;&nbsp; &nbsp;1．管道和过滤器风格</p><p>&nbsp;&nbsp; &nbsp;在管道/过滤器风格的软件体系结构中，每个构件都有一组输入和输出，构件读输入的数据流，经过内部处理，然后产生输出数据流。这个过程通常通过对输入流的变换及增量计算来完成，所以在输入被完全消费之前，输出便产生了。因此，这里的构件被称为过滤器，这种风格的连接件就像是数据流传输的管道，将一个过滤器的输出传到另一过滤器的输入。此风格特别重要的过滤器必须是独立的实体，它不能与其他的过滤器共享数据，而且一个过滤器不知道它上游和下游的标识。一个管道/过滤器网络输出的正确性并不依赖于过滤器进行增量计算过程的顺序。</p><p>&nbsp;&nbsp; &nbsp;2．数据抽象和面向对象风格</p><p>&nbsp;&nbsp; &nbsp;抽象数据类型概念对软件系统有着重要作用，目前软件界已普遍转向使用面向对象系统。这种风格建立在数据抽象和面向对象的基础上，数据的表示方法和它们的相应操作封装在一个抽象数据类型或对象中。这种风格的构件是对象，或者说是抽象数据类型的实例。对象是一种被称作管理者的构件，因为它负责保持资源的完整性。对象是通过函数和过程的调用来交互的。</p><p>&nbsp;&nbsp; &nbsp;3．基于事件的隐式调用风格</p><p>&nbsp;&nbsp; &nbsp;基于事件的隐式调用风格的思想是构件不直接调用一个过程，而是触发或广播一个或多个事件。系统中的其他构件中的过程在一个或多个事件中注册，当一个事件被触发，系统自动调用在这个事件中注册的所有过程，这样，一个事件的触发就导致了另一模块中的过程的调用。基于事件的隐式调用风格的主要特点是事件的触发者并不知道哪些构件会被这些事件影响。这样不能假定构件的处理顺序，甚至不知道哪些过程会被调用，因此，许多隐式调用的系统也包含显式调用作为构件交互的补充形式。</p><p>&nbsp;&nbsp; &nbsp;4．层次系统风格</p><p>&nbsp;&nbsp; &nbsp;层次系统组织成一个层次结构，每一层为上层服务，并作为下层客户。在一些层次系统中，除了一些精心挑选的输出函数外，内部的层只对相邻的层可见。这样的系统中构件在一些层实现了虚拟机(在另一些层次系统中层是部分不透明的)。连接件通过决定层间如何交互的协议来定义，拓扑约束包括对相邻层间交互的约束。这种风格支持基于可增加抽象层的设计。这样，允许将一个复杂问题分解成一个增量步骤序列的实现。由于每一层最多只影响两层，同时只要给相邻层提供相同的接口，允许每层用不同的方法实现，同样为软件重用提供了强大的支持。</p><p>&nbsp;&nbsp; &nbsp;5．仓库风格</p><p>&nbsp;&nbsp; &nbsp;在仓库风格中，有两种不同的构件：中央数据结构说明当前状态，独立构件在中央数据存储上执行，仓库与构件间的相互作用在系统中会有大的变化。控制原则的选取产生两个主要的子类。若输入流中某类时间触发进程执行的选择，则仓库是一传统型数据库；另一方面，若中央数据结构的当前状态触发进程执行的选择，则仓库是一黑板系统。</p><p>&nbsp;&nbsp; &nbsp;6．C2风格</p><p>&nbsp;&nbsp; &nbsp;C2体系结构风格可以概括为：通过连接件绑定在一起的按照一组规则运作的并行构件网络。C2风格中的系统组织规则如下：系统中的构件和连接件都有一个顶部和一个底部；构件的顶部应连接到某连接件的底部，构件的底部则应连接到某连接件的顶部，而构件与构件之间的直接连接是不允许的；一个连接件可以和任意数目的其他构件和连接件连接；当两个连接件进行直接连接时，必须由其中一个的底部到另一个的顶部。</p><p>&nbsp;&nbsp; &nbsp;三、针对作者实际参与的软件系统开发项目，说明所采用的软件架构风格，并描述该架构风格所产生的实际应用效果。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>见解析</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 502,
                    "belong_page": 1,
                    "question_id": 43818,
                    "question_title": "<p><br/></p><p><br/></p><h3>试题三&nbsp;&nbsp;论面向服务的架构及其应用</h3><p>面向服务的架构(Service-Oriented Architecture，SOA.是一种组件模型，把应用程序中的不同功能单元(即服务)通过这些服务之间定义良好的接口和契约联系起来，使得这些系统中的服务能够以一种统一和通用的方式进行交互。从应用角度看，SOA是一种应用框架，它关注企业日常的业务应用，将其划分为单独的业务功能和流程，并抽象为服务，用户和系统开发人员可以构建、部署和整合这些服务，无须依赖特定的应用程序及应用平台，从而提高企业业务流程的灵活性。SOA有助于实现更多的信息资产重用、更轻松地管理和更快地应用开发与部署。</p><p>&nbsp;&nbsp; &nbsp;(请围绕“面向服务的架构及其应用”论题，依次从以下三个方面进行论述。)</p><p>&nbsp;&nbsp; &nbsp;1．概要叙述你参与实施的、基于面向服务架构的软件开发项目以及所担任的主要工作。</p><p>&nbsp;&nbsp; &nbsp;2．指出SOA技术参考架构中都包含哪些服务类别，并对每类服务的定义和作用进行简要说明。</p><p>&nbsp;&nbsp; &nbsp;3．详细阐述你的项目是如何以面向服务的架构为指导进行实施的，在实施过程中遇到了哪些问题，是如何解决的。</p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 43818,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p><br/></p><p>解析：</p><p>一、论文中要具体介绍组织的业务背景、组织结构、现有应用系统的分布、采用的技术等内容和担任的实际工作。</p><p>&nbsp;&nbsp; &nbsp;二、SOA技术参考架构主要描述SOA基础技术平台与辅助工具，同时描述这两部分与其他外围相关元素之间的关系。SOA技术参考架构将服务分为6类，具体描述如下：</p><p>&nbsp;&nbsp; &nbsp;1．连接服务</p><p>&nbsp;&nbsp; &nbsp;连接服务又称连通服务，是面向服务架构的骨干，在完成服务的接入，服务间的通信和交互基础上，还提供安全性、可靠性、高性能的服务能力保障。连接服务的一个典型实现就是企业服务总线(Enterprise Service Bus，ESB)。</p><p>&nbsp;&nbsp; &nbsp;2．协作服务</p><p>&nbsp;&nbsp; &nbsp;协作服务通常由通信代理和Web服务代理两部分组成。通信代理与连通服务中的通信代理实现内部有效的数据通信，Web服务代理与外部的公共注册中心交互，注册本平台对外开放的Web服务以及查找所需要访问的外部Web服务。协作服务既可以实现组织之间(如供应链的合作伙伴之间)的交互通信，也可以实现组织内部(如跨地域的分支机构之间，并有防火墙进行保护的情况)之间的交互通信。</p><p>&nbsp;&nbsp; &nbsp;3．业务服务</p><p>&nbsp;&nbsp; &nbsp;业务服务指为新建服务提供的特定运行支持环境。新建服务包括单个服务以及合成服务，不包括流程化的服务。合成服务一般由应用编码实现，它可以调用其他的服务(包括：单个服务、合成服务和流程化的服务)。业务服务与连通服务相联接，其中的新建服务与其他服务的通信和交互通过连通服务来实现。业务服务的运行信息由运行管理服务保存，业务服务也接受并执行运行管理服务的管理和控制命令。</p><p>&nbsp;&nbsp; &nbsp;4．业务流程服务</p><p>&nbsp;&nbsp; &nbsp;流程服务是业务流程的运行环境，提供流程驱动、服务调用、事务管理等功能。流程服务是为业务流程的运行提供的一组标准服务。业务流程是一组服务的集合，可以按照特定的顺序并使用一组特定的规则进行调用。业务流程可以由不同粒度的服务组成，其本身也可视为服务。</p><p>&nbsp;&nbsp; &nbsp;5．交互服务</p><p>&nbsp;&nbsp; &nbsp;交互服务实现人与服务之间的交互功能。人可以是服务的消费者，也可以是服务的提供者。人不能直接消费服务，也不能直接提供服务，需要通过相应的程序实现代理操作(即人通过操作程序实现与服务的交互)。交互服务就是需要提供一组完整的功能，以实现人与服务的交互，并能够方便地进行交互。人员需要请求服务时，向连通服务发送消息请求，由连通服务查找服务，并将请求消息传递给服务提供者。</p><p>&nbsp;&nbsp; &nbsp;6．信息服务</p><p>&nbsp;&nbsp; &nbsp;信息服务特指为上层应用系统、同层的其他服务等提供数据访问及资源访问服务。其目标是使应用系统能够统一、透明、高效地访问和操纵位于网络环境中的各种分布、异构的数据资源，为实现全局数据访问、加快应用开发、增强网络应用和方便系统管理提供支持。</p><p>&nbsp;&nbsp; &nbsp;三、考生需要详细描述所参与的项目是如何以面向服务的架构为指导思想进行实施的，包括如何发现服务、如何对服务进行分类等。可能存在的问题包括如何进行服务规约，包括候选服务的分类与选择，服务编排，服务库的设计等；如何实现服务，包括将服务的实现分配到相应的服务构件中，并决定服务的实现方式。</p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>见解析</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 503,
                    "belong_page": 1,
                    "question_id": 45917,
                    "question_title": "<p>试题一(共 25 分)</p><p>阅读以下关于软件架构评估的叙述，在答题纸上回答问题 1 和问题 2.</p><p>【说明】</p><p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。在系统的需求分析与架构设计阶段，用户提出的需求、质量属性描述和架构特性如下:</p><p>(a) 系统用户分为高级管理员、数据管理员和数据维护员等三类:</p><p>(b) 系统应该具备完善的安全防护措施，能够对黑客的攻击行为进行检测与防御:</p><p>(c) 正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应:</p><p>(d) 对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计:</p><p>(e) 系统的用户名不能为中文，要求必须以字母开头，长度不少于 5 个字符;</p><p>(f) 更改系统加密的级别将对安全性和性能产生影响;</p><p>(g) 网络失效后，系统需要在 10 秒内发现错误并启用备用系统，</p><p>(h) 查询过程中涉及到的桥梁与公路的实时状态视频传输必须保证画面具有 1024*768 的分辨率， 40 帧 /秒的速率:</p><p>(i) 在系统升级时，必须保证在 10 人月内可添加一个新的消息处理中间件:</p><p>(j) 系统主站点断电后，必须在 3 秒内将请求重定向到备用站点:</p><p>(k) 如果每秒钟用户查询请求的数量是 10 个，处理单个请求的时间为 30 毫秒，则系统应保证在 1 秒内完成用户的查询请求:</p><p>(l) 对桥梁信息数据库的所有操作都必须进行完整记录:</p><p>(m) 更改系统的 Web 界面接口必须在 4 人周内完成:</p><p>(n) 如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性</p><p>(o) 系统必须提供远程调试接口，并支持系统的远程调试。</p><p>在对系统需求，质量属性描述和架构特性进行分析的基础上，系统的架构师给出了三个候选的架构设计方案，公司目前正在组织系统开发的相关人员对系统架构进行评估。</p><p>&nbsp;</p><p>【问题 1】(12 分)</p><p>在架构评估过程中，质量属性效用树 (utility tree) 是对系统质量属性进行识别和优先级排序的重要工具。请给出合适的质量属性，填入图 1-1 中 (1)、(2) 空白处:并选择题干描述的 (a)~ (0) ，填入(3)~(6) 空白处，完成该系统的效用树。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s1.51ctocdn.cn//images/20180827/1535368131569975.png\" title=\"1535368131569975.png\" alt=\"图片.png\"/><br/>【问题 2】(13 分)</p><p>在架构评估过程中，需要正确识别系统的架构风险、敏感点和权衡点，并进行合理的架构决策。请用 300 字以内的文字给出系统架构风险、敏感点和权衡点的定义，并从题干(a) - (0) 中分别选出 1 个对系统架构风险、敏感点和权衡点最为恰当的描述。</p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 45917,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>参考答案：</p><p>在架构评估过程中，质量属性效用树(utility tree)是对系统质量属性进行识别和优先级排序的重要工具。效用树主要关注性能、可修改性、可用性和安全4个方面</p><p>（1）~（6）内容如下：</p><p>（1）安全性 &nbsp;&nbsp;（2）可修改性 &nbsp;&nbsp;&nbsp;（3）h &nbsp;&nbsp;&nbsp;（4）l &nbsp;&nbsp;&nbsp;&nbsp;（5）j &nbsp;&nbsp;&nbsp;（6）m</p><p><br/></p><p>参考答案：</p><p>统架构风险是指架构设计中潜在的、存在问题的架构决策所带来的隐患。敏感点是为了实现某种特定质量属性，一个或多个系统组件所具有的特性。权衡点是影响多个质量属性，并对多个质量属性来说都是敏感点的系统属性。根据上述分析可知题干描述中，(n)描述的是系统架构风险；(d)描述的是敏感点；(f)描述的是权衡点。</p><p><br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 504,
                    "belong_page": 1,
                    "question_id": 45920,
                    "question_title": "<p>试题二(共 25 分)</p><p>阅读以下关于软件系统设计的叙述，在答题纸上回答问题 1 至问题 3.</p><p>【说明】</p><p>某软件企业受该省教育部门委托建设高校数字化教育教学资源共享平台，实现以众筹众创的方式组织省内普通高校联合开展教育教学资源内容建设，实现全省优质教学资 源整合和共享。该资源共享平台的主要功能模块包括:</p><p>(1)统一身份认证模块，提供统一的认证入口，为平台其他核心业务模块提供用 户管理、身份认证、权限分级和单点登录等功能:</p><p>(2) 共享资源管理模块:提供教学资源申报流程服务，包括了资源申报、分类定制、资料上传、资源审核和资源发布等功能:</p><p>(3)共享资源展示模块:提供教育教学共享资源的展示服务，包括资源导航、视 频点播、资源检索、分类展示、资源评价和推荐等功能:</p><p>(4) 资源元模型管理模块:依据资源类型提供共享资源的描述属性、内容属性和展示属性，包括共享资源统一标准和规范、资源加工和在线编辑工具、数字水印和模板定制等功能:</p><p>(5) 系统综合管理模块:提供系统管理和维护服务，包括系统配置、数据备份恢复、资源导入导出和统计分析等功能。</p><p>项目组经过分析和讨论，决定采用基于 Java EE 的 MVC 模式设计资源共享平台的 软件架构，如图 2-1 所示。</p><p><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535368417112986.png\" title=\"1535368417112986.png\" alt=\"图片.png\"/> </p><p>图2-1</p><p>【问题 1】 (9 分)</p><p>MVC 架构中包含哪三种元素，它们的作用分别是什么?请根据图 2-1 所示架构将 JavaEE 中JSP、Servlet、Service、JavaBean、DAO 五种构件分别填入空 (1)--(5) 所示位置。</p><p>【问题 2】(6 分)</p><p>项百组架构师王工提出在图 2-1 所示架构设计中加入 EJ B 构件，采用企业级 JavaEE架构开发资源共享平台。请说明 EJB 构件中的 Bean (构件)分为哪三种类型，每种类型Bean 的职责是什么。</p><br/><p>【问题 3】(10 分)</p><p>如果采用王工提出的企业级 JavaEE 架构，请说明下列(a)-(e) 所给出的业务功能构件中，有状态和无状态构件分别包括哪些。</p><p>（a）Identification Bean(身份认证构件〉</p><p>（b）ResPublish Bean(资源发布构件)</p><p>（c）ResRetrieval Bean(资源检索构件)</p><p>（d）OnlineEdit Bean(在线编辑构件)</p><p>（e）Statistics Bean(统计分析构件)</p><p><br/></p><br/><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 45920,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>参考答案：</p><p>MVC架构风格最初是Smalltalk-80中用来构建用户界面时采用的架构设计风格。其中M代表模型(Model)，V代表视图(View)，C代表控制器(Controller)。在该风格中，模型表示待展示的对象，视图表示模型的展示，并能接收用户的输入数据，但是它不进行任何实际业务处理，控制器负责把用户的动作转成针对模型的操作。模型通过更新视图的数据来反映自身的变化。</p><p>(1)JSP　（２）Servlet &nbsp;(3)Service &nbsp;(4)JavaBean &nbsp;(5)DAO</p><p>参考答案:</p><p>EJB中Bean分这三种类型：Session Bean ,Entity Bean,Message-Driven Bean.</p><p>Session Bean的职责：维护一个短暂会话，当客户端执行完成后，Session Bean和它的数据会消失。</p><p>Entity Bean的职责：维护一行持久稳固的数据，如果客户端终止或者服务结束，底层的服务会负责entity Bean数据的存储。</p><p>Message-Driven Bean的职责：结合了Session Bean 和JMS，允许异步接收消息。</p><p>&nbsp;</p><p>参考答案：</p><p>有状态构件包含：(a)、 (b) 、(d)</p><p>无状态构件包含：(c)、(e)</p><p><br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 505,
                    "belong_page": 1,
                    "question_id": 45921,
                    "question_title": "<p><br/></p><p>试题三〈共 25 分)</p><p>阅读以下关于机器人操作系统架构的描述，回答问题 1 至问题 3</p><p>【说明】</p><p>随着人工智能技术的发展，工业机器人已成为当前工业界的热点研究对象。某宇航设备公司为了扩大业务范围，决策层研究决定准备开展工业机器人研制新业务。公司将论证工作交给了软件架构师王工，王工经过分析和调研，从机器人市场现状、领域需求、 组成及关键技术和风险分析等方面开展了综合论证。论证报告指出:首先，为了保障本公司机器人研制的持续性，应根据领域需求选择一种适应的设计架构:其次，为了规避风险，公司的研制工作不能从零开始，应该采用国际开源社区所提供机器人操作系统 (Robot Operating System ，ROS)作为机器人开发的基本平台。</p><p>在讨论会上，架构师李工提出不同意见，他认为公司针对宇航领域已开发了某款嵌入式实时操作系统，且被多种宇航装备使用，可靠性较高。因此应该采用现有架构体系作为机器人的开发平台。会上王工说明了机器人操作系统与该款操作系统的差别，要沿用需要进行改造，技入较大。经过激烈讨论，公司领导同意了王工采用 ROS 的意见。</p><p>&nbsp;</p><p>【问题 1】 (5 分)</p><p>王工拟采用的 ROS 具有分布式进程框架，以点对点设计以及服务和节点管理器方式， 使得执行程序可以各自独立地设计，松散地、实时地组合起来。这些进程可以按照功能包和功能包集的方式分组，因而可以容易地分享和发布。请用 400 字以内文字说明 ROS 与嵌入式实时操作系统的共同点，以及在实时性和任务通信方式两个方面的差异。</p><p>【问题 2】 (10 分)</p><p>ROS 为应用程序问通信提供了主题(Topic) 、服务 (Service)和动作 (Action) 三种消息通信方式，每种通信方式都有其特点。请将以下给出的三类通信的主要特点填入表 3-1 中(1)-(5) 的空白处，将答案写在答题纸上。</p><p>(a) 适合用于传输传感器信息〈数据流)</p><p>(b) 能够知道是否渭南藏葫斗川</p><p>(c) 一对多模式</p><p>(d) 有握手信号</p><p>(e) 服务执行完会有反馈</p><p>(f) 可以监控长时间执行的进程</p><p>(g) 较复杂</p><p>(h) 可能让系统过载(数据太多)</p><p>(i) 服务执行完之前，程序会等待</p><p>(j) 建立通信较慢</p><p>(k) 可能丢失数据</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表3-1 ROS三类通信的主要特点</p><p><br/></p><p><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535368541788754.png\" title=\"1535368541788754.png\" alt=\"图片.png\"/><br/></p><p>【问题 3】 (10 分)</p><p>ROS 的架构定义了 ROS 系统由多个各自独立的节点(组件〉组成，并且各个节点之间可以通过发布/订阅(Pu blish/Subscribe )消息模型进行通信。图 3-1 给出一个简单机器人结构实例，请根据以下文字描述，补充图 3-1 中(1)-(5) 处空白，将答案写在答题纸上。&quot;机器人开始阶段，所有节点都要注册 (Registration) 到 Master 上，注册后，摄像 头节点声明它要发布(Pu blish)一个叫做 limage_data 的消息。另外两个节点〈图像处理处理节点和图像显示节点〉声明它们需要订阅( Subscribe) 这个 image _data 消息。因此， 一旦摄像头节点收到相机发送的数据(Data)，就立即将数据image_data直接发送到另外两个节点。</p><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535368588956869.png\" title=\"1535368588956869.png\" alt=\"图片.png\"/><br/><br/>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 45921,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>参考答案：</p><p>共同点如下：</p><p>（1）系统专用型强</p><p>（2）系统资源有限</p><p>（3）系统都采用嵌入式微型处理器</p><p>（4）软硬件依赖性强</p><p>差异：</p><p>实时性：ROS弱于嵌入式实时操作系统</p><p>通信方式：ROS通信方式丰富，嵌入式实时操作系统通信方式单一。</p><p>参考答案：</p><p>（1）（2）（c）（k）</p><p>（2）（4）（f）（i）</p><p>（5）（j）</p><p>参考答案：</p><p>(1)&nbsp;Registration (2)Data (3) publish (4)Subscribe &nbsp;(5)Subscribe</p><p><br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 506,
                    "belong_page": 1,
                    "question_id": 45923,
                    "question_title": "<p>试题五 (共 25 分)</p><p>阅读以下关于 Web 系统架构设计的叙述，在答题纸上回答问题 1 至问题 3.</p><p>【说明】</p><p>某电子商务企业因发展良好，客户量逐步增大，企业业务不断扩充，导致其原有的 B2C 商品交易平台己不能满足现有业务需求。因此，该企业委托某软件公司重新开发一套商品交易平台。该企业要求新平台应可适应客户从手机、平板设备、电脑等不同终端设备访问系统，同时满足电商定期开展&quot;秒杀&quot;、&quot;限时促销&quot;等活动的系统高并发访问量的需求。面对系统需求，软件公司召开项目组讨论会议，制定系统设计方案。讨论会议上，王工提出可以应用响应式Web设计满足客户从不同设备正确访问系统的需求。同时，采用增如镜像站点、CDN 内容分发等方式解决高并发访问量带来的问题。李工在王工的提议上补充，仅仅依靠上述外网加速技术不能完全解决高用户并发访问问题，如果访问量持续增加，系统仍存在崩溃可能.李工提出应同时结合负载均衡、缓存服务器、web 应用服务器、分布式文件系统、分布式数据库等方法设计系统架构。经过项目组讨论,最终决定综合王王和李工的思路，完成新系统的架构设计。</p><p>&nbsp;</p><p>【问题 1】 (5 分)</p><p>请用 200 字以内的文字描述什么是&quot;响应式 Web 设计&quot;，并列举 2 个响应式 Web 设计的实现方式。</p><p>【问题 2】 (16 分)</p><p>综合王工和李工的提议，项目组完成了新商品交易平台的系统架构设计方案.新系统架构图如图 5-1 所示。请从选项 (a) - (j) 中为架构图中(1) - (8) 处空白选择相应的内容，补充支持高并发的 Web 应用系统架构设计图</p><p>(a) Web 应用层</p><p>(b) 界面层</p><p>(c) 负载均衡层</p><p>(d) CDN内容分发</p><p>(e) 主数据库</p><p>(f) 缓存服务器集群</p><p>(g) 从数据库</p><p>(h) 写操作</p><p>(i) 读操作</p><p>(j) 文件服务器集群</p><p><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535368787338438.png\" title=\"1535368787338438.png\" alt=\"图片.png\"/><br/></p><p>【问题 3】 (4 分) 根据李工的提议，新的 B2C 商品交易平台引入了主从复制机制。请针对交易平台的特点，简要叙述引入该机制的好处。</p><p><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 45923,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>参考答案：</p><p>响应式Web设计是在开发和设计网页过程中产生的一种方式，它的目的是让内容布局能随用户使用显示器的不同而变化。</p><p>响应方式：</p><p>（1）弹性网格和布局</p><p>（2）图片</p><p>&nbsp;（3）CSS media query</p><p>参考答案：</p><p>（1）d &nbsp;（2）c &nbsp;（3）f &nbsp;（4）a &nbsp;&nbsp;&nbsp;（5）(6）e &nbsp;h &nbsp;&nbsp;（7）(8）g &nbsp;i</p><p>参考答案：</p><p>(1)&nbsp;可扩展性更优</p><p>采用单台数据库服务器，随着访问量增加，必然会产生访问瓶颈，而主从结构大大方便服务器扩容，不影响系统使用。</p><p>(2)&nbsp;性能大大提升</p><p>商务平台用户量大，并发访问高，主从方式采用一主多从，满足不同用户可以从不同数据库读取数据，提高访问速度。</p><p>(3)&nbsp;相当于做了负载均衡</p><p>一主多从相当于分担了主机任务，做了负载均衡。</p><p>(4)&nbsp;保证数据安全</p><p>&nbsp;&nbsp;&nbsp;&nbsp;主从方式实现了数据冗余，不会因某台机器硬件故障引起数据丢失。</p><p>&nbsp;</p><p><br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 507,
                    "belong_page": 1,
                    "question_id": 45950,
                    "question_title": "<p><br/></p><p style=\"text-indent:32px\">试题四（25分）</p><p>阅读以下关于应用服务器的叙述，，在答题纸上回答问题1至问题3。</p><p style=\"margin-top:5px;text-indent:28px;text-align:left\">【说明】</p><p>某电子产品制造公司，几年前开发建设了企业网站系统，实现了企业宣传、产品介绍、客服以及售后服务等基本功能。该网站技术上采用了Web服务器、动态脚本语言PHP。随着市场销售渠道变化以及企业业务的急剧拓展，该公司急需建立完善的电子商务平台。</p><p>公司张工建议对原有网站系统进行扩展，增加新的功能（包括订单系统、支付系统、库存管理等），这样有利于降低成本、快速上线；而王工则认为原有网站系统在技术上存在先天不足，不能满足企业业务的快速发展，尤其是企业业务将服务全球，需要提供24小时不间断服务，系统在大负荷和长时间运行下的稳定性至关重要。建议采用应用服务器的Web开发方法，例如J2EE，为该企业重新开发新的电子商务平台。</p><p>【问题1】（7分）</p><p>王工认为原有网站在技术上存在先天不足，不能满足企业业务的快速发展，根据你的理解，请用300字以内的文字说明原系统存在哪几个方面的不足。</p><p>【问题2】(8分)</p><p>请简要说明应用服务器的概念，并重点说明应用服务器如何来保障系统在大负荷和长时间运行下的稳定性以及可扩展性。</p><p>【问题3】（10分）</p><p>J2EE平台采用了多层分布式应用程序模型，实现不同逻辑功能的应用程序被封装到不同的构件中，处于不同层次的构件可被分别部署到不同的机器中。请填写图4-1中(1)～(5)处的空白，完成J2EE的N层体系结构。</p><p><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535370687174624.png\" title=\"1535370687174624.png\" alt=\"图片.png\"/><br/><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 45950,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>参考答案：</p><p>PHP是面向过程的语言，只要业务流程发生变化，修改工作量很大，所以可修改性差，同时可复用性也差。</p><p>PHP语言在可靠性方面比J2EE平台差，J2EE平台有大量增强可靠性的成熟解决方案，而PHP只是一种简单的脚本语言，在可靠性方面缺乏成熟解决方案。</p><p>PHP对于不同的数据库采用不同的数据库访问接口，而Java通过JDBC来访问数据库，通过不同的数据库厂商提供的数据库驱动方便地访问数据库，访问数据库的接口比较统一。所以原架构在数据库连接方面修改起来工作量也是很大的。</p><p>参考答案：</p><p>&nbsp;应用服务器是指通过各种协议把商业逻辑曝露给客户端的程序。</p><p>1、若系统负荷很大，可以布署多台应用服务，多台应用服务器分担任务，以达到性能要求。</p><p>2、应用服务器可以通过灵活的增加服务器完成扩展，所以可扩展性很好。</p><p>3、应用服务器可长时间稳定运行。因为当一台应用服务器出现故障时，可以将当前运行的事务转移至正常应用服务器上完成执行，不影响业务正常执行，从而保障高可靠性与稳定性。</p><p>参考答案：</p><p>(1)Applet &nbsp;&nbsp;(2)Servlet &nbsp;&nbsp;(3)EJB容器 &nbsp;&nbsp;&nbsp;(4)SessionBean &nbsp;&nbsp;(5)EntityBean</p><p><br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 508,
                    "belong_page": 1,
                    "question_id": 45952,
                    "question_title": "<p><br/></p><p style=\"text-indent:32px\">试题五（25分）</p><p>阅读以下关于Scrum敏捷开发过程的叙述，在答题纸上回答问题1至问题3。</p><p style=\"margin-top:5px;text-indent:28px;text-align:left\">【说明】</p><p>Scrum是一个增量的、迭代的敏捷软件开发过程。某软件公司计划开发一个基于Web的Scrum项目管理系统，用于支持项目团队采用Scrum敏捷开发方法进行软件开发，辅助主管智能决策。此项目管理系统提供的主要服务包括项目团队的管理、敏捷开发过程管理和工件的管理。</p><p>Scrum敏捷开发中，项目团队由Scrum主管、产品负责人和开发团队人员三种不同的角色组成，其开发过程由若干个Sprint（短的迭代周期，通常为2到4周）活动组成。</p><p>Product Backlog是在Scrum过程初期产生的一个按照商业价值排序的需求列表，该列表条目的体现形式通常为用户故事。在每一个Sprint活动中，项目团队从Product Backlog中挑选最高优先级的用户故事进行开发。被挑选的用户故事在Sprint计划会议上经过细化分解为任务，同时初步估算每一个任务的预计完成时间，编写Sprint Backlog。</p><p>在Sprint活动期间，项目团队每天早晨需举行每日站立会议，重新估算剩余任务的预计完成时间，更新Sprint Backlog、Sprint燃尽图和Release燃尽图。在每个Sprint活动结束时，项目团队召开评审会议和回顾会议，交付产品增量，总结Sprint期间的工作情况和问题。此时，如果Product Backlog中还有未完成的用户故事，则项目团队将开始筹备下一个Sprint活动迭代。</p><p>为完成Scrum项目管理系统，考虑到系统的智能决策需求，公司决定使用MVC架构模式开发该项目管理系统。具体来说，系统采用轻量级J2EE架构和SSH框架进行开发，使用MySQL数据库作为底层存储。</p><p>【问题1】（1 0分）</p><p>Scrum项目管理软件需真实模拟Scrum敏捷开发流程，请根据你的理解完成图5-1给出的Scrum敏捷开发状态图，．填写其中(1)～(5)的内容。</p><p><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535370724856536.png\" title=\"1535370724856536.png\" alt=\"图片.png\"/><br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535370750689225.png\" title=\"1535370750689225.png\" alt=\"图片.png\"/><br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535370768351642.png\" title=\"1535370768351642.png\" alt=\"图片.png\"/><br/></p><p>【问题3】（9分）</p><p>根据项目组给出的系统设计方案，将备选答案a~l的内容填写在图5-2中的空(1)～(9)，完成系统架构图。</p><p><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20180827/1535370803509620.png\" title=\"1535370803509620.png\" alt=\"图片.png\"/><br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181011/1539249747504803.png\" title=\"1539249747504803.png\" alt=\"QQ截图20181011172218.png\"/><br/></p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 45952,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略<br/></p>",
                    "like": 0,
                    "answer": [
                        "<p>参考答案：</p><p>(1)Product Backlog</p><p>(2)Sprint计划会议</p><p>(3)每日站立会议</p><p>(4)还有未完成的用户故事</p><p>(5)交付产品增量</p><p>参考答案：</p><p>(1)c、e、n</p><p>(2)a、f、j</p><p>(3)g</p><p>参考答案：</p><p>(1) (2)d f &nbsp;&nbsp;(3)h &nbsp;&nbsp;(4)g &nbsp;(5)a</p><p>(6)k &nbsp;(7)h &nbsp;(8)b &nbsp;&nbsp;(9)c</p><p>&nbsp;</p><p><br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 509,
                    "belong_page": 1,
                    "question_id": 54272,
                    "question_title": "<p>阅读以下软件系统架构选择的问题，在答题纸上回答问题1至问题3。<br/>某公司欲开发一个车辆定速巡航控制系统，以确保车辆在不断变化的地形中以固定的速度行驶。图4-1给出了该系统的简化示意图。表4-1描述了各种系统输入的含义。<br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181012/1539331310450770.jpg\" title=\"1539331310450770.jpg\" alt=\"1.jpg\"/><br/>表4-1 定速巡航控制系统输入说明<br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181012/1539331315903747.jpg\" title=\"1539331315903747.jpg\" alt=\"2.jpg\"/><br/>公司的领域专家对需求进行深入分析后，将系统需求认定为：任何时刻，只要定速巡航控制系统处于工作状态，就要有确定的期望速度，并通过调整引擎油门的设定值来维持期望速度。<br/>在对车辆定速巡航控制系统的架构进行设计时，公司的架构师王工提出采用面向对象的架构风格，而李工则主张采用控制环路的架构风格。在架构评估会议上，专家对这两种方案进行综合评价，最终采用了面向对象和控制环路相结合的混合架构风格。<br/>【问题1】（5分）<br/>在实际的软件项目开发中，采用成熟的架构风格是项目成功的保证。请用200字以内的文字说明：什么是软件架构风格；面向对象和控制环路两种架构风格各自的特点。<br/>【问题2】（12分）<br/>用户需求没有明确给出该系统如何根据输入集合计算输出。请用300字以内的文字针对该系统的增减速功能，分别给出两种架构风格中的主要构件，并详细描述计算过程。<br/>【问题3】（8分）<br/>实际的软件系统架构通常是多种架构风格的混合，不同的架构风格都有其适合的应用场景。以该系统为例，针对面向对象架构风格和控制环路架构风格，各给出两个适合的应用场景，并简要说明理由。</p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 54272,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>无</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】<br/>软件架构风格是描述某一类特定应用领域中软件系统组织方式和惯用方式。<br/>面向对象架构风格的特征是将数据表示和基本操作封装在对象中。这种模式的构件是对象，对象维护自身表示的完整性，对象之间通过消息机制进行通信，对象交互时需要知道彼此的标识，通过对象之间的协作完成计算过程。<br/>控制环路架构风格是将过程输出的指定属性维护在一个特定的参考值（设定点）。控制环路风格包括过程变量、被控变量、输入变量、操纵变量和设定点等构件，通过收集实际和理想的过程状态信息，并能调整过程变量使得实际状态趋于理想状态。<br/>【问题2】<br/>对于系统的增减速功能，采用面向对象风格的巡航控制系统首先会定义司机、油门、时钟、速度计和车轮等构件。<br/>整个计算的主要过程是：<br/>（1）司机进行增／减速操作设置期望速度，该期望速度以消息的形式传递给速度计；<br/>（2）速度计通过向车轮和时钟发送消息获取车轮转速和时钟值，得到当前速度；<br/>（3）速度计计算当前速度和期望速度的速度差值；<br/>（4）该差值以消息的形式发送给油门，油门通过速度差值调节自身状态；<br/>（5）整个过程在时钟的控制下定期向速度计发送消息，重复执行（2）～（4）。<br/>控制环路的架构风格以控制器为核心，期望速度、车轮脉冲、时钟和油门等作为构件。<br/>具体的计算过程是：<br/>（1）司机进行增／减速操作设置期望速度值；<br/>（2）将设定值置为期望速度值；<br/>（3）控制器采集车轮脉冲和时钟值，计算出当前速度；<br/>（4）比较期望速度和当前速度，计算速度差值，控制油门动作；<br/>（5）反复执行（3）和（4）。<br/>【问题3】<br/>适合面向对象架构风格的应用场景：<br/>（1）用户刹车，立即退出巡航控制系统。理由：这是一个典型的事件驱动的场景，适合于面向对象风格。<br/>（2）系统对突发事件的处理，如某些部件失灵等。理由：当发生突发事件时，系统会同时产生数据和事件，这种清况用对象建模较为恰当。<br/>适合面向控制环路架构风格的应用场景：<br/>（1）在达到期望速度后，系统维持恒定速度行驶。理由：这是一个典型的闭环控制的情景，系统需要在外界情况不断发生变化的情况下进行调整，使得系统状态尽可能接近期望状态。<br/>（2）用户改变期望速度后，系统不断进行调整，直至到达恒定速度。理由：这是一个闭环控制情景，当用户设定期望速度值后，系统需要在不断获取当前速度和外界条件的情况下对系统状态持续调整，使得系统状态尽可能接近这个新的期望状态。</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 510,
                    "belong_page": 1,
                    "question_id": 54273,
                    "question_title": "<p>阅读以下关于Web应用系统开发的问题，在答题纸上回答问题1至问题3。<br/>A公司承担了某企业应用系统的开发任务，用户要求系统最终应发布到Web上供企业员工及企业客户使用。项目组在进行方案论证时，首先肯定了该系统需使用B/S结构，但在系统应采用的底层平台上产生了分歧，一方认为应采用微软.NET平台，一方认为应采用Java企业版平台。经过认真讨论，结合两种平台的特点及项目的实际需求，项目组最终决定采用Java企业版平台作为系统开发运行的基础平台。<br/>【问题1】（9分）<br/>请在以下平台特点（1）~（9）中，选择出.NET平台与Java企业版平台各自具备的优势填入表5-1的（a）~（f）项中，选择出两个平台共有的特点填入表5-1的（g）~（i）项中。<br/>（1）良好跨平台可移植性支持<br/>（2）易于部署与配置<br/>（3）多程序设计语言支持<br/>（4）良好的Web多层应用开发支持<br/>（5）丰富的多厂商外部支持<br/>（6）良好的O/R（对象/关系）映射支持<br/>（7）针对特定平台的优化支持<br/>（8）良好的源代码以外的可定制性支持<br/>（9）良好的Web服务支持<br/>表5-1 .NET平台与Java平台的优势对比<br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181012/1539331364808232.jpg\" title=\"1539331364808232.jpg\" alt=\"1.jpg\"/><br/>【问题2】（8分）<br/>MVC（Model-View-Controller）模式是Web应用系统开发中常用的一种软件架构模式。请分别针对基于EJB的重量级框架和基于Struts等的轻量级框架，说明MVC模式中的各组件应采用何种构件实现。<br/>项目组在进行需求调研时，发现用户界面部分的变动可能会比较频繁，因此需要降低系统界面与业务逻辑之间的耦合度。MVP（Model-View-Presenter）模式是由MVC模式派生出的一种设计模式，其主要目的是降低MVC模式中模型（Model）与视图（View）的耦合度，请用300字以内文字，从组件耦合度、组件分工及对开发工程化支持等三方面说明MVP模式与MVC模式的主要区别。<br/>【问题3】（8分）<br/>因为系统中大量业务逻辑涉及企业的核心商业数据，为保证系统数据一致性，完善的事务（Transaction）控制是系统实现时必需考虑重要因素之一。请用200字以内文字说明事务的基本特征，并简单描述EJB规范中提供的两种事务控制的基本方法。</p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 54273,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>无</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】<br/>（a）~（c）：（2）、（3）、（7），以上三个答案顺序可调换；<br/>（d）~（f）：（1）、（5）、（8），以上三个答案顺序可调换；<br/>&nbsp;（g）~（i）：（4）、（6）、（9），以上三个答案顺序可调换；<br/>【问题2】<br/>在基于EJB的重量级框架中，实现的构件分别为：<br/>模型（Model）：由EJB构件实现<br/>视图（View）：由JSP构件实现<br/>控制器（Controller）：由Servlet构件实现<br/>在基于Struts等的轻量级框架中，实现的构件分别为：<br/>模型（Model）：由Java Bean构件实现<br/>视图（View）：由JSP构件实现<br/>控制器（Controller）：由Servlet构件实现<br/>MVP模式与MVC模式的主要区别为：<br/>（1）在组件耦合度方面：在MVP模式中，视图并不直接使用模型，它们之间的通信通过Presenter进行，从而实现了视图与模型的分离，而在MVC模式中，视图直接与模型交互。<br/>（2）在组件分工方面：在MVP模式中，视图需要处理鼠标及键盘等触发的界面事件，而在MVC模式中这通常是由控制器完成的工作；在MVP模式中，系统核心业务逻辑组织集中在Presenter中，而在MVC模式中，相应的控制器通常只完成事件的分发。<br/>（3）在开发工程化支持方面：MVP模式可更好地支持单元测试，而在MVC模式中，由于模型与视图绑定，因此难以实施相应的单元测试；在MVP模式中，Presenter基于约定接口与视图和模型交互，可更好地支持组件的重用。<br/>【问题3】<br/>事务的基本特征包括：<br/>原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样。<br/>一致性：在事务开始之前和事务结束以后，数据的完整性限制没有被破坏。<br/>隔离性：两个事务的执行是互不干扰的，两个事务时间不会互相影响。<br/>持久性：在事务完成以后，该事务对数据所作的更改便持久地保存在数据库之中，并且是完全的。<br/>EJB规范支持的两种事务控制方法为：<br/>容器维护的事务（Container Managed Transaction，CMT）：由EJB容器根据部署描述符或EJB构件注释中指定的事务属性自动控制事务的边界，容器维护的事务是方法级的，即默认将一个方法当作一个事务执行，当方法执行的过程中发生系统级异常，容器会自动将事务回滚，从而将方法前面执行的结果恢复。<br/>Bean维护的事务（Bean Managed Transaction，BMT）：由程序员在EJB的源代码中控制事务执行的边界，事务的边界通过Java事务接口（Java Transaction API，JTA）进行控制，Bean维护的事务可以跨越方法的边界。</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 511,
                    "belong_page": 1,
                    "question_id": 54354,
                    "question_title": "<p>阅读以下软件架构设计的问题，在答题纸上回答问题1和问题2。<br/>某软件开发公司欲为某电子商务企业开发一个在线交易平台，支持客户完成网上购物活动中的在线交易。在系统开发之初，企业对该平台提出了如下要求：<br/>（1）在线交易平台必须在1s内完成客户的交易请求。<br/>（2）该平台必须保证客户个人信息和交易信息的安全。<br/>（3）当发生故障时，该平台的平均故障恢复时间必须小于10s。<br/>（4）由于企业业务发展较快，需要经常为该平台添加新功能或进行硬件升级。添加新功能或进行硬件升级必须在6小时内完成。<br/>针对这些要求，该软件开发公司决定采用基于架构的软件开发方法，以架构为核心进行在线交易平台的设计与实现。<br/>【问题1】（9分）<br/>软件质量属性是影响软件架构设计的重要因素。请用200字以内的文字列举六种不同的软件质量属性名称，并解释其含义。<br/>【问题2】（16分）<br/>请对该在线交易平台的4个要求进行分析，用300字以内的文字指出每个要求对应何种软件质量属性；并针对每种软件质量属性，各给出2种实现该质量属性的架构设计策略。</p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 54354,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查考生对于质量属性及质量属性实现策略的掌握情况。<br/>【问题1】<br/>常见的软件质量属性有多种，例如性能（Performance）、可用性（Availability）、可靠性（Reliability）、健壮性（Robustness）、安全性（Security）、可修改性（Modification）、可变性（Changeability）、易用性（Usability）、可测试性（Testability）、功能性（Functionality）和互操作性（Inter-operation）等。<br/>这些质量属性的具体含义是：<br/>（1）性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。<br/>（2）可用性是系统能够正常运行的时间比例。<br/>（3）可靠性是指软件系统在应用或错误面前，在意外或错误使用的情况下维持软件系统功能特性的基本能力。<br/>（4）健壮性是指在处理或环境中，系统能够承受压力或变更的能力。<br/>（5）安全性是指系统向合法用户提供服务的同时能够阻止非授权用户使用的企图或拒绝服务的能力。<br/>（6）可修改性是指能够快速地以较高的性能价格比对系统进行变更的能力。<br/>（7）可变性是指体系结构经扩充或变更成为新体系结构的能力。<br/>（8）易用性是衡量用户使用一个软件产品完成指定任务的难易程度。<br/>（9）可测试性是指软件发现故障并隔离、定位其故障的能力特性，以及在一定的时间和成本前提下，进行测试设计、测试执行的能力。<br/>（10）功能性是系统所能完成所期望工作的能力。　<br/>（11）互操作性是指系统与外界或系统与系统之间的相互作用能力。<br/>【问题2】<br/>本题主要结合实际案例，考查实现各种质量属性的策略。<br/>（1）在线交易平台必须在1s内完成客户的交易请求。该要求主要对应性能，可以采用的架构设计策略有增加计算资源、改善资源需求（减少计算复杂度等）、资源管理（并发、数据复制等）和资源调度（先进先出队列、优先级队列等）。<br/>（2）该平台必须严格保证客户个人信息和交易信息的保密性和安全性。该要求主要对应安全性，可以采用的架构设计策略有抵御攻击（授权、认证和限制访问等）、攻击检测（入侵检测等）、从攻击中恢复（部分可用性策略）和信息审计等。<br/>（3）当发生故障时，该平台的平均故障恢复时间必须小于l0s。该要求主要对应可用性，可以采用的架构设计策略有Ping/Echo、心跳、异常和主动冗余等。<br/>（4）由于企业业务发展较快，需要经常为该平台添加新功能或进行硬件升级。添加新功能或进行平台升级必须在6小时内完成。该要求主要对应可修改性，可以采用的架构设计策略有软件模块泛化、限制模块之间通信、使用中介和延迟绑定等。</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】<br/>常见的软件质量属性有多种，例如性能（Performance）、可用性（Availability）、可靠性（Reliability）、健壮性（Robustness）、安全性（Security）、可修改性（Modification）、可变性（Changeability）、易用性（Usability）、可测试性（Testability）、功能性（Functionality）和互操作性（Inter-operation）等。<br/>这些质量属性的具体含义是：<br/>（1）性能是指系统的响应能力，即要经过多长时间才能对某个事件做出响应，或者在某段时间内系统所能处理事件的个数。<br/>（2）可用性是系统能够正常运行的时间比例。<br/>（3）可靠性是指软件系统在应用或错误面前，在意外或错误使用的情况下维持软件系统功能特性的基本能力。<br/>（4）健壮性是指在处理或环境中，系统能够承受压力或变更的能力。<br/>（5）安全性是指系统向合法用户提供服务的同时能够阻止非授权用户使用的企图或拒绝服务的能力。<br/>（6）可修改性是指能够快速地以较高的性能价格比对系统进行变更的能力。<br/>（7）可变性是指体系结构经扩充或变更成为新体系结构的能力。<br/>（8）易用性是衡量用户使用一个软件产品完成指定任务的难易程度。<br/>（9）可测试性是指软件发现故障并隔离、定位其故障的能力特性，以及在一定的时间和成本前提下，进行测试设计、测试执行的能力。<br/>（10）功能性是系统所能完成所期望工作的能力。<br/>（11）互操作性是指系统与外界或系统与系统之间的相互作用能力。<br/>【问题2】<br/>（1）在线交易平台必须在1s内完成客户的交易请求。该要求主要对应性能，可以采用的架构设计策略有增加计算资源、改善资源需求（减少计算复杂度等）、资源管理（并发、数据复制等）和资源调度（先进先出队列、优先级队列等）。<br/>（2）该平台必须严格保证客户个人信息和交易信息的保密性和安全性。该要求主要对应安全性，可以采用的架构设计策略有抵御攻击（授权、认证和限制访问等）、攻击检测（入侵检测等）、从攻击中恢复（部分可用性策略）和信息审计等。<br/>（3）当发生故障时，该平台的平均故障恢复时间必须小于l0s。该要求主要对应可用性，可以采用的架构设计策略有Ping/Echo、心跳、异常和主动冗余等。<br/>（4）由于企业业务发展较快，需要经常为该平台添加新功能或进行硬件升级。添加新功能或进行平台升级必须在6小时内完成。该要求主要对应可修改性，可以采用的架构设计策略有软件模块泛化、限制模块之间通信、使用中介和延迟绑定等。</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 512,
                    "belong_page": 1,
                    "question_id": 54356,
                    "question_title": "<p>阅读以下关于软件系统数据架构建模的说明，在答题纸上回答问题1至问题3。<br/>【说明】<br/>RMO是一家运动服装制造销售公司，计划在五年时间内将销售区域从华南地区扩展至全国范围。为了扩大信息技术对于未来业务发展的价值，公司邀请咨询顾问帮助他们制订战略信息系统规划。经过评审，咨询顾问给出的战略规划要点之一是建立客户关系支持系统CRSS。RMO公司决定由其技术部成立专门的项目组负责CRSS的开发和维护工作。<br/>项目组在仔细调研和分析了系统需求的基础上，确定了基于互联网的CRSS系统架构。但在确定系统数据架构时，张工认为应该采用集中式的数据架构，给出的理由是结构简单、易维护且开发及运行成本低；而刘工建议采用分布式的数据架构，并提出在开发中通过&quot;局部数据库+缓存&quot;的读写分离结构实现，具有较好的运行性能和可扩展性。<br/>项目组经过集体讨论，考虑到公司的未来发展规划，最终采用了刘工的建议。<br/>【问题1】（8分）<br/>请用300字以内的文字，说明张工和刘工提出的数据架构的基本思想。<br/>【问题2】（13分）<br/>&nbsp;在刘工建议的基础上，为了避免CRSS系统的单点故障，请用200字以内文字简要说明如何建立CRSS的数据库系统；对于数据的读取、添加、更改和删除操作分别如何实现。<br/>【问题3】（4分）<br/>RMO公司销售区域将在未来五年大面积扩展，其潜在客户数量也会因此大幅度增加，所以良好的可扩展性是CRSS系统所必需的质量属性。请分别说明在集中式和分布式数据架构下，可以采用哪些方法提升系统的可扩展性。</p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 54356,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查考生对于软件系统数据架构建模的掌握情况。<br/>数据架构定义了信息系统中文件和数据库的分布结构。数据架构建模是以数据为中心，建模业务数据类型和结构，以及设计满足应用需求的数据库系统。传统以主机为中心的信息系统开发中，利用单个的数据库系统实现数据的集中式存储，物理上所有的数据位于同一个位置，构成的是一种集中式的数据架构；现代基于网络的分布式系统开发中，很少有组织会将其全部的数据存储在单个的数据库中，通常需要多个数据库系统组成，数据在这些数据库系统之间可以传送，由多个不同的数据库管理系统控制，构成的是一种分布式的数据架构。<br/>【问题1】<br/>集中式数据架构中，一个或多个局域网中的客户共享一个单独计算机系统中的单个数据库。系统提供数据处理能力，用户可以在同样的站点上操作，也可以在地理位置隔开的其他站点上通过远程终端来操作。系统及其数据管理被某个或中心站点集中控制。单个数据库服务器结构的主要优点就是简单、易维护开发及运行成本低；但由于所有的客户直接请求服务器，容易发生性能瓶颈，如果服务失败，单个服务器不能提供备份和恢复，所有依赖的应用程序都将不能工作。<br/>分布式数据架构中，使用多个计算机系统以及用户能够访问远程系统的数据，数据可以在多个不同的数据库中进行传送，由不同的数据库管理系统软件进行管理，运行在多种不同的计算机上，支持多种不同的操作系统。这些机器位于（或分布在）不同的地理位置并通过多种通信网络连接在一起。企业数据可以分布在不同的计算机上，一个应用程序可以操作位于不同地理位置的机器上的数据。多个数据库服务器结构的主要优点就是系统的容错能力和对广域网容量的需求有所降低，可以采用多种策略提升整个系统的服务质量；由于多个数据库系统分布在不同的网络节点上，位于不同位置的数据之间需要同步和协作，系统结构复杂、运行成本高并且维护困难。<br/>在实际应用系统的数据架构建模中，应根据不同的应用需求选择集中式或分布式的数据架构。本题中由于RMO要扩展其销售区域，其潜在客户数量也会因此大幅度增加，所以良好的可扩展性是CRSS系统所必需的质量属性；并且由于其销售区域扩大后，系统中的数据会存储于不同的地理位置，所以采用分布式数据架构最为合理。<br/>【问题2】<br/>读写分离架构应用非常广泛，很多网站采用数据库+缓存的方式来实现。通过缓存层来承载大量的读访问，如广泛采用的Mencached，其自身往往不具备持久层存储的功能，通常和数据库一起组成分布式的数据架构，由数据库负责数据持久化存储和写入功能，缓存负责承载大量的并发访问，从而提高了系统的数据处理效率。要避免数据访问的单点故障，通常采用主数据库热备份的方式来实现。所以，要实现题目要求的分布式数据架构，需要多个局部数据库系统、多个热备份数据库系统和多个数据缓存组成。<br/>&nbsp;读写分离结构中，应用读取数据时访问缓存，如果没有命中所需数据，则从主数据库中读取数据并写入缓存；对于新增、修改和删除操作，需要采用延迟加载的策略，新增时只修改主数据库，修改和删除时除了修改主数据库中的内容，还需要将缓存中的数据标记为失效。<br/>【问题3】<br/>传统的集中式数据架构中由于只有单个的数据库系统，所以要满足可扩展性的要求，更多的只能通过硬件的方式来实现。具体的实现方式包括硬件扩容（增加CPU/内存容量/磁盘数量）和硬件升级（更换高端主机或高速磁盘等）。<br/>基于网络的分布式数据架构中由多个数据库系统共同组成，可以通过更改和优化数据分布来满足系统可扩展性的要求。具体的实现方式包括数据复制、数据垂直切分（或/和）水平切分、缓存和全文搜索。</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】<br/>（1）张工提出的集中式数据架构是由一个处理器、与它相关联的数据存储设备以及其他外围设备组成，它被物理地定义到单个位置。系统提供数据处理能力，用户可以在同样的站点上操作，也可以在地理位置隔开的其他站点上通过远程终端来操作。系统及其数据管理被某个或中心站点集中控制。<br/>（2）刘工提出的分布式数据架构使用多个计算机系统上的多个局部数据库系统构成，数据可以在多个不同的局部数据库中进行传送，由不同的数据库管理系统软件进行管理，运行在多种不同的计算机上，支持多种不同的操作系统。这些机器位于（或分布在）不同的地理位置并通过多种通信网络连接在一起。企业数据可以分布在不同的计算机上，一个应用程序可以操作位于不同地理位置的机器上的数据。<br/>【问题2】<br/>读写分离架构利用了数据库的复制技术，将数据的读和写分布在不同的处理节点上，从而达到提高可用性和扩展性的目的。<br/>CRSS的分布式数据库系统需要由多个局部数据库系统、多个热备份数据库系统和多个数据缓存组成。局部数据库负责数据的写入，多个热备份数据库系统用以解决单点故障的问题，数据缓存负责为应用提供所读取的数据。<br/>（1）读取数据：应用访问缓存，如果命中则返回，否则从局部数据库系统中读取数据并将数据加载到缓存后返回。<br/>（2）添加数据：采用延迟加载策略，应用将数据直接写入局部数据库。<br/>（3）更改数据：应用更改局部数据库中的数据，将缓存中的数据标记为失效。<br/>（4）删除数据：应用删除局部数据库中的数据，将缓存中的数据标记为失效。<br/>【问题3】<br/>张工提出的集中式数据架构通过向上扩展（Scale Up）提升系统的可扩展性。具体的实现方式包括硬件扩容（增加CPU数量、内存容量、磁盘数量）和硬件升级（更换为高端主机或高速磁盘等）。<br/>&nbsp;刘工提出的分布式数据架构通过向外扩展（Scale Out）提升系统的可扩展性。具体的实现方式包括数据复制、数据垂直切分（或/和）水平切分、缓存和全文搜索。</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 513,
                    "belong_page": 1,
                    "question_id": 54357,
                    "question_title": "<p>阅读以下关于嵌入式软件体系架构的叙述，在答题纸上回答问题1至问题3。<br/>某公司承担了一项宇航嵌入式设备的研制任务。本项目除对硬件设备环境有很高的要求外，还要求支持以下功能：<br/>（1）设备由多个处理机模块组成，需要时外场可快速更换（即LRM结构）；<br/>（2）应用软件应与硬件无关，便于软硬件的升级；<br/>（3）由于宇航嵌入式设备中要支持不同功能，系统应支持完成不同功能任务间的数据隔离；<br/>（4）宇航设备可靠性要求高，系统要有故障处理能力。<br/>公司在接到此项任务后，进行了反复论证，提出三层栈（TLS）软件总体架构，如图3-1所示，并将软件设计工作交给了李工，要求其在三周内完成软件总体设计工作，给出总体设计方案。<br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181012/1539335134863618.jpg\" title=\"1539335134863618.jpg\" alt=\"2.jpg\"/><br/>【问题1】（8分）<br/>用150字以内的文字，说明公司制定的TLS软件架构的层次特点，并针对上述功能需求（1）~（4），说明架构中各层内涵。<br/>【问题2】（10分）<br/>在TLS软件架构的基础上，关于选择哪种类型的嵌入式操作系统问题，李工与总工程师发生了严重分歧。李工认为，宇航系统是实时系统，操作系统的处理时间越快越好，隔离意味着以时间作代价，没有必要，建议选择类似于VxWorks5.5的操作系统；总工程师认为，应用软件间隔离是宇航系统安全性要求，宇航系统在选择操作系统时必须考虑这一点，建议选择类似于Linux的操作系统。<br/>请说明两种操作系统的主要差异，完成表3-1中的空白部分，并针对本任务要求，用200字以内的文字说明你选择操作系统的类型和理由。<br/>表3-1 两种操作系统的主要差异<br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181012/1539335119371041.jpg\" title=\"1539335119371041.jpg\" alt=\"1.jpg\"/><br/>【问题3】（7分）<br/>故障处理是宇航系统软件设计中极为重要的组成部分。故障处理主要包括故障监视、故障定位、故障隔离和系统容错（重组）。用150字以内的文字说明嵌入式系统中故障主要分哪几类？并分别给出两种常用的故障滤波算法和容错算法。</p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 54357,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查嵌入式系统设计的概念，主要包括嵌入式软件体系结构的框架设计，提高宇航设备可靠性的设计方法和掌握根据用户需求开展软件需求分析的手段。<br/>此类题目要求考生认真阅读题目对用户需求的描述，在分析、论证和概念设计的基础上，根据实例要求完善问题的解析。本题重点考查考生归纳问题、分析问题和解决问题的能力。<br/>本题首先给出用户针对宇航设备的4项功能要求：<br/>（1）设备由多个处理机模块组成，需要时外场可快速更换（即LRM结构）；<br/>（2）应用软件应与硬件无关，便于软硬件的升级；<br/>（3）由于宇航嵌入式设备中要支持不同功能，系统应支持完成不同功能任务间的数据隔离；<br/>（4）宇航设备可靠性要求高，系统要有故障处理能力。<br/>从4项要求分析看，第一项要求是考查考生的基础硬件知识，宇航设备应该由多个硬件模块组成，各个模块承担着不同功能，外场可快速更换是指在实验现场（如机场、发射基地）能够用备份模块替换掉故障硬件模块，从而节省维修时间。此项要求是本题设计软件体系总体架构的基础，也是采用三层栈（TLS）的首要点。第二项要求是考查考生从软／硬件升级方面理解三层栈（TLS）架构的优势，因为硬件要方便升级的基础是不会引起软件的更改（或极少更改），要想达到应用软件与硬件的无关性，必须采用操作系统实现硬件隔离。第三项要求是考查考生根据用户软件的技术要求，如何考虑操作系统的分析方法。要支持任务间的数据隔离，具有进程管理的操作系统最为合适，这里考查了考生必须深入了解什么是操作系统的进程概念。第四项要求是考查考生掌握设计高可靠性设备通常采用的技术。<br/>如果考生理解了上述4个用户要求，就能容易地回答本题的三个问题。<br/>【问题1】<br/>本题给出的TLS结构框架主要通过硬件抽象，形成模块支持层软件，将操作系统对硬件资源的管理抽象成对一种逻辑上相关的抽象资源的管理，这样就将操作系统软件与硬件进行了分离。而应用软件访问硬件资源靠操作系统提供的服务进行，这样，应用软件仅仅和具体功能实现有关，而不需关心硬件配置。因此，TLS结构框架的主要特点可概述为以下4点：<br/>（1）应用软件仅与操作系统服务相关，不直接操作硬件。<br/>（2）操作系统通过模块支持原软件访问硬件，可与具体硬件无关。<br/>（3）模块支持层将硬件抽象成标准操作。<br/>（4）通过三层栈的划分可实现硬件的快速更改与升级，应用软件的升级不会引起硬件的变更。<br/>基于这种思想，TLS结构框架实现了宇航设备中软件功能服务，这样考生就可以完整地叙述各层软件的设计内涵，即：<br/>（1）应用层主要完成宇航设备的具体工作，由多个功能任务组成，各功能任务间的隔离由操作系统层实现。<br/>（2）操作系统层实现应用软件与硬件的隔离，为应用软件提供更加丰富的计算机资源服务。操作系统为应用软件提供标准的API接口（如POSIX），确保了应用软件的可升级性。<br/>（3）模块支持层为操作系统管理硬件资源提供统一管理方法，用一种抽象的标准接口实现软件与硬件的无关性，达到硬件的升级要求，便于硬件的外场快速更换。<br/>【问题2】<br/>选择操作系统的依据是本题第三项的用户要求，主要考查考生对目前常用的嵌入式操作系统的了解程度。第一小问的表格给出的VxWorks和Linux两个操作系统是嵌入式系统常用的软件，两个软件在资源管理上存在本质区别，考生必须明确差异后，方能回答第二小问。两种操作系统的差异如下表所示。<br/>通过比较，显然选用类似于Linux的嵌入式操作系统适用本题要求。理由包括三点：<br/>（1）Linux操作系统是一种安全性较强的操作系统。内核工作在系统态，应用软件工作在用户态（这点是系统安全性要求），可以有效防止应用软件对操作系统的破坏。<br/>（2）Linux操作系统调度的最小单位是线程，线程归属于进程，进程具有自己独立的资源。进程通过存储器管理部件（MMU）实现多功能应用间隔离。<br/>（3）嵌入式Linux操作系统支持硬件抽象，可有效实现TLS结构，并将硬件抽象与操作系统分离，可方便实现硬件的外场快速更换。<br/>【问题3】<br/>作为宇航系统的嵌入式设备，硬／软件故障是宇航系统最为关注的内容，根据宇航系统的特点和系统组成，故障一般分为三类，即硬件故障、应用软件故障和操作系统故障，在设计中，应考虑这三类故障的处理方法。硬件故障一般包括CPU运算错误、存储器访问／越界错误、MMU配置错误、定时器计数错误和内总线错误等；应用软件故障一般包括计算越界、除0、溢出和超时等各种异常情况；操作系统故障一般包括越权访问、死锁、资源枯竭、调度超时、配置越界和操作系统异常等。<br/>一般情况下，宇航系统的故障分为瞬态故障和永久故障，瞬态故障是指偶然发生的错误，而永久故障是指发生后不可消失的错误。在容错系统中，故障一般是由瞬态故障向永久故障转变，将鉴别瞬态故障和永久故障的算法称为滤波算法。在嵌入式实时系统中，常用的滤波算法包括门限算法、递减算法、递增算法和周期滤波算法等。<br/>故障的鉴别目的是实现宇航系统的容错与重构。常用的容错算法是N+1备份、冷备、温备和热备。N+1备份是指N个通用模块之一的任何一个模块发生故障后，将故障模块的任务迁移到备份模块运行；冷备、温备和热备是三种备份方式，可根据宇航系统的总体备份时间或重要程度安排不同的备份算法。</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】<br/>TLS结构框架的主要特点：<br/>（1）应用软件仅与操作系统服务相关，不直接操作硬件。<br/>（2）操作系统通过模块支持原软件访问硬件，可与具体硬件无关。<br/>（3）模块支持层将硬件抽象成标准操作。<br/>（4）通过三层栈的划分可实现硬件的快速更改与升级，应用软件的升级不会引起硬件的变更。<br/>TLS结构框架的各层内涵是：<br/>（1）应用层主要完成宇航设备的具体工作，由多个功能任务组成，各功能任务间的隔离由操作系统层实现。<br/>（2）操作系统层实现应用软件与硬件的隔离，为应用软件提供更加丰富的计算机资源服务。操作系统为应用软件提供标准的API接口（如POSIX），确保了应用软件的可升级性。<br/>（3）模块支持层为操作系统管理硬件资源提供统一管理方法，用一种抽象的标准接口实现软件与硬件的无关性，达到硬件的升级要求，便于硬件的外场快速更换。<br/>【问题2】<br/>两种操作系统的差异见下表。<br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181012/1539335233145029.jpg\" title=\"1539335233145029.jpg\" alt=\"1.jpg\"/><br/>选择类似于Linux的嵌入式操作系统。理由如下：<br/>（1）Linux操作系统是一种安全性较强的操作系统。内核工作在系统态，应用软件工作在用户态，可以有效防止应用软件对操作系统的破坏。<br/>（2）Linux操作系统调度的最小单位是线程，线程归属于进程，进程具有自己独立的资源。进程通过存储器管理部件（MMU）实现多功能应用间隔离。<br/>（3）嵌入式Linux操作系统支持硬件抽象，可有效实现TLS结构，并将硬件抽象与操作系统分离，可方便实现硬件的外场快速更换。<br/>【问题3】<br/>（1）嵌入式系统中故障主要分为：<br/>① 硬件故障：如CPU、存储器和定时器等；<br/>② 应用软件故障：如数值越界、异常和超时等；<br/>③ 操作系统故障：如越权访问、死锁和资源枯竭等。<br/>（2）滤波算法：<br/>① 门限算法<br/>② 递减算法<br/>③ 递增算法<br/>④ 周期滤波算法<br/>（3）容错算法：<br/>① N+1备份<br/>② 冷备<br/>③ 温备<br/>④ 热备<br/></p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 514,
                    "belong_page": 1,
                    "question_id": 54358,
                    "question_title": "<p>阅读以下关于数据集成的叙述，在答题纸上回答问题 1 至问题3。<br/>某互联网销售企业需要建立自己的电子商务平台，将所有产品信息集中在一起，为用户提供全方位的产品信息检索服务。但产品供应商大多数已经建有自己的电子商务平台，且数据独立存储，而且数据格式和数据平台有较大差异，有的供应商甚至没有采用数据库来存储商品信息。为此该企业专门成立专家组来论证其数据集成方案。<br/>李工提出采用集中式集成方式把产品供应商的数据集中在一起，采用数据仓库技术来实现与各家供应商的数据集成。而王工提出采用松耦合的联邦数据库集成方案。专家组经过激烈讨论，认为王工方案更为合理，建议采用王工提出的集成方案。<br/>【问题 1】（10 分）<br/>请结合数据仓库和联邦数据库集成方案各自的特点，简要说明专家组采用王工提出的集成方案的原因。<br/>【问题 2】（7 分）<br/>部分供应商的产品信息没有相应的数据库，而是直接嵌入在 WEB 页面中供用户浏览。数据集成时需要直接从供应商电子商务平台的网页上获取其产品信息。请简要给出此类数据集成的方法和基本步骤。<br/>【问题 3】（8 分）<br/>在方案评审会上，项目组针对李工和王工的方案展开了激烈的讨论。刘工指出两种方案在实施的过程中，都存在数据源之间的语义映射和转换问题，都会带来数据集成的不确定。请简要说明产生不确定的原因。</p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 54358,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题主要考查数据集成中的数据仓库方案和联邦数据库方案的内容。<br/>【问题1】<br/>本问题考查数据仓库和联邦数据库集成方案的基本概念。数据仓库集成是把多种来的数据集中在一起，建立数据仓库，所有数据都驻留在单个数据库服务器上，配置大型处理器和存储容量。数据仓库主要用于决策支持，在数据处理过程中强调分析。其特点是：①集成的数据；②面向主题；③数据相对稳足；④包含历史信息。但是此种集成方法中需要将数据源的数据转换为数据仓库中的语义，而且需要定期的数据复制和数据更新。数据源往往指的是数据库系统。<br/>联邦数据库集成是把多个数据库系统联合在一起，构成&quot;联邦数据库系统&quot;，数据之间通过接口查询，互相通信，数据分布在不同地方的计算机或数据库服务器上，通过网络连接。其特点是：①联邦数据库提供集成的数据格式，对用户提供统一的访问，屏蔽了各个数据库的复杂性和分布情况，简化了开发数据库查询和对数据统一理解的工作。这种分布式的数据集成，更加符合应用系统的实际情况。②异构数据源不仅仅是数据库系统，通过中间件，可以扩展到传感器、文件和应用程序等。<br/>两种方式都需要将数据源中的数据语义转换为统一数据语义，这种转换往往存在不定性。<br/>【问题2】<br/>本问题考查Web内容提取或Web数据挖掘的相关知识。Web信息系统中的数据往住是非结构化或者半结构化的，但同一个数据源往往有统一的页面模式，但是其数据呈现是嵌入在页面中。因此需要采用Web内容提取（挖掘/文本挖掘）的集成方法来获取对应供应商的产品信息。<br/>其基本的步骤是：<br/>（1）分析页面，确定其页面中的数据模式。制定数据挖掘的特征和提取规则，编写特定的页面分析和数据提取程序。<br/>（2）抓取页面，通过爬虫技术获取对应的网页。将远端的页面下载到本地进行存储，为后续数据提取做准备。<br/>（3）特征提取与处理，获取相应数据，依据的原则是分析页面阶段所形成的特征和提取规则。<br/>（4）数据清洗，根据规则进行判断，抛弃异常数据。<br/>（5）数据转换，根据预先定义好的语义映射关系，将数据转换为统一格式。<br/>&nbsp;Web内容提取的算法程序本身是近似的，因此在获取数据的内容上存在不确定性。<br/>【问题3】<br/>本问题考查在数据集成过程存在的不确定性问题。问题1和问题2中实际己经明确了集成过程中存在不确定性。主要的原因在于数据集成系统依靠模式映射来指明数据源中的数据和中介所用数据之间的语义关系，但映射过程中可能发生不确定性。具体原因有：<br/>（1）数据源与中介模式之间的语义映射可能是近似的。实际系统中往往很难有非常精确、完整的语义映射。<br/>（2）用户不熟悉模式或系统的域太宽，不能提供基于表单式的查询接口，需要使用关键字查询，但将关键字查询转换成一组候选的结构化查询时，会带来不确定性。<br/>（3）数据常常是使用信息获取技术从非结构化数据源获取的，而这些获取技术一般只是&quot;大致可用&quot;，所取得的数据可能是不确定的。<br/>因此，在本试题中，无论采用数据仓库或者联邦数据库集成方案，都存在数据源之间的语义映射和转换问题，都会带来数据集成的不确定。</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】<br/>数据仓库集成是把多种来源的数据集中在一起，建立数据仓库，所有数据都驻留在单个数据库服务器上，配置大型处理器和存储容量。数据仓库主要用于决策支持，在数据处理过程中强调分析。其特点是：<br/>（1）集成的数据。<br/>（2）面向主题。<br/>（3）数据相对稳定。<br/>（4）包含历史信息。<br/>联邦数据库集成是把多个数据库系统联合在一起，构成&quot;联邦数据库系统&quot;，数据库之间通过接口查询，互相通信，数据分布在不同地方的计算机或数据库服务器上，通过网络连接。其特点是：<br/>（1）联邦数据库提供集成的数据格式，对用户提供统一的访问，屏蔽了各个数据库的复杂性和分布情况，简化了开发数据库查询和对数据统一理解的工作。这种分布式的数据集成，更加符合应用系统的实际情况。<br/>（2）异构数据源不仅仅是数据库系统，通过中间件，可以扩展到传感器、文件和应用程序等。<br/>【问题2】<br/>此类数据往往是非结构化或者半结构化的，但同一个数据源往往有统一的页面模式，因此应该采用Web内容提取（挖掘／文本挖掘）的集成方法来获取对应供应商的产品信息。<br/>其基本步骤为：<br/>（1）分析页面，确定其页面中的数据模式。<br/>（2）抓取页面，通过爬虫技术获取对应的网页。<br/>（3）特征提取与处理，获取相应数据。<br/>（4）数据清洗，根据规则进行判断，抛弃异常数据。<br/>（5）数据转换，根据顶先定义好的语义映射关系，将数据转换为统一格式。<br/>【问题3】<br/>数据集成系统依靠模式映射来指明数据源中的数据和中介所用数据之间的语义关系，但映射过程中可能发生不确定性，其原因有：<br/>（1）数据源与中介模式之间的语义映射可能是近似的。<br/>（2）用户不熟悉模式或系统的域太宽，不能提供基于表单式的查询接口，需要使用关键字查询，但将关键字查询转换成一组候选的结构化查询时，会带来不确定性。<br/>（3）数据常常是使用信息获取技术从非结构化数据源获取的，而这些获取技术一般只是&quot;大致可用&quot;，所取得的数据可能是不确定的。</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 515,
                    "belong_page": 1,
                    "question_id": 54359,
                    "question_title": "<p>阅读以下关于Web 应用系统负载均衡的问题，在答题纸上回答问题1至问题3。<br/>某电子商务公司的主要业务是书籍、服装、家电和日用品的在线销售。随着公司业务发展和用户规模的不断扩大，现有的网上交易系统无法正常处理日益增大的请求流量，公司决策层决定升级其网上交易系统。在对该系统的升级方案进行设计和讨论时，公司的系统分析师王工提出采用基于高性能主机系统的方法进行系统升级，另外一位系统分析师李工则提出采用基于负载均衡集群的方法进行系统升级。公司的分析师和架构师对这两种思路进行讨论与评估，最终采纳了李工的方法。<br/>【问题 1】（9 分）<br/>请从系统的可用性、可伸缩性和应用特点三个方面说明公司为何没有采用王工提出的方法。<br/>【问题 2】（8 分）<br/>负载均衡通常分为传输层负载均衡和应用层负载均衡两类。请基于这种分类方式，说明基于 DNS 的负载均衡方法和基于 HTTP 重定向服务器的负载均衡方法分别属于哪类负载均衡方法，并用200字以内的文字说明这两种方法实现负载均衡的方式。<br/>【问题 3】（8 分）<br/>在确定使用基于负载均衡集群的系统升级方法后，李工给出了一个基于LVS（Linux Virtual Server）的负载均衡集群实现方案。公司的系统分析师在对现有系统进行深入分析的基础上，认为以下两个实际情况对升级方案影响较大，需要对该方案进行改进。<br/>1. 系统需要为在线购物提供购物车功能，用来临时存放选中的产品。<br/>2. 系统需要保证向所有的VIP 用户提供高质量的服务。<br/>针对上述描述，首先说明每种情况分别会引入哪些与负载均衡相关的问题，并用 200字以内的文字说明针对不同的问题，应该如何改进李工的解决方案。</p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 54359,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>本题考查的是Web应用系统设计、维护和升级的相关内容，主要考查系统负载均衡技术。<br/>【问题1】<br/>本问题考查Web应用系统升级时的方案选择问题。在Web应用中，服务器的处理能力和IO已经成为提供应用服务的瓶颈。由于涉及的信息量非常大，用户访问频率也高，许多基于Web的大型应用系统每秒钟需要处理下百万个甚至更多的请求。显然单台服务器有限的性能难以解决这个问题。<br/>为了解决下述问题，采用高性能的主机系统（小型机或大型机）是可行的。但是，除了其价格昂贵、可扩展性差以外，这种主机系统在很多情况下也不能同时处理上百万个并发的请求。因为高速主机系统只是对于复杂单一任务和有限的并发处理显得高性能，而Internet中的Web应用绝大多数处理是简单任务、高强度并发处理。因此，即便有大量资金投入，采用高性能、高价格的主机系统，也不能满足Web应用的需要。<br/>【问题2】<br/>本问题主要考查负载均衡技术的分类和两种具体方法的掌握。负载均衡技术是集群系统中一项重要技术，可以提高集群系统的整体处理能力，也提高了系统的可靠性，最终目标是加快集群系统的响应速度，提高客户端访问的成功概率。<br/>负载均衡通常分为传输层负载均衡和应用层负载均衡两类。基于DNS的负载均衡属于传输层负载均衡技术，其主要原理是在DNS服务器中为同一个主机名配置多个地址，在应答DNS查询时，DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的节点上去，使得不同的客户端访问不同的节点，从而达到负载均衡的目的。基于HTTP重定向服务器的负载均衡属于应用层负载均衡技术，其主要原理是服务器使用HTTP重定向指令，将一个客户端重新路山到另一个位置。服务器返回一个重定向响应，而不是返回请求的对象。客户端确认新地址然后重发请求，从而达到负载均衡的目的。<br/>【问题3】<br/>主要考查负载均衡技术的实际应用。在实际应用中，通常会将传输层负载均衡方法与应用层负载均衡方法结合起来使用，以提高系统整体的性能、可用性和可靠性。<br/>题干描述中，第一种情况的描述说明系统需要提供应用会话数据支持。通常采用会话服务器（session server）机制在服务器端存放应用会话数据。但需要注意的是，应用会话数据大多数情况下是不可恢复的，因此采用支持应用会话数据容错的解决方案非常重要。<br/>第二种情况的描述要求保证特定用户的服务质量。当数据量不断增长时，由于在会话服务器或缓存服务器，业务服务器和会话（或缓存）服务器之间可能会反复移动较大量的数据，从而无法保证服务质量。因此，通常的做法是基于应用层负载均衡器实现客户端联系（client affinity）将某个客户端的所有请求转发到相同的服务器上，使得一个用户会话的所有请求被同一服务器实例处理，从而保证服务质量。</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题1】<br/>王工提出的方案是采用高性能的主机系统实现系统升级。从可用性角度看，采用高性能的主机系统很难实现系统的冗余机制，当发生故障后会导致整个系统会失去响应能力，从而无法保证系统的高可用性；从可伸缩性角度看，采用高性能的主机系统，升级服务器的成本与获得的相应能力不成比例，整个系统的可扩展性较差；从应用特点来看，Internet中的Web应用绝大多数是简单任务、高强度的并发处理，而主机系统只是对于复杂单一任务和有限的并发处理具有高性能，不能同时处理大量的并发请求。因此，公司没有采用王工的方案。<br/>【问题2】<br/>&nbsp;基于DNS的负载均衡属于传输层负载均衡技术，其主要原理是在DNS服务器中为同一个主机名配置多个地址，在应答DNS查询时，DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的节点上去，使得不同的客户端访问不同的节点，从而达到负载均衡的目的。<br/>基于HTTP重定向服务器的负载均衡属于应用层负载均衡技术，其主要原理是服务器使用HTTP重定向指令，将一个客户端重新路由到另一个位置。服务器返回一个重定向响应，而不是返回请求的对象。客户端确认新地址然后贡发请求，从而达到负载均衡的目的。<br/>【问题3】<br/>第一种情况的描述说明系统需要提供应用会话数据支持。通常采用会话服务器机制在服务器端存放应用会话数据。但需要注意的是，应用会话数据大多数情况下是不可恢复的，因此采用支持应用会话数据容错的解决方案非常重要。<br/>第二种情况的描述要求保证特定用户的服务质量。当数据量不断增长时，由于在会话服务器或缓存服务器，业务服务器和会话（或缓存）服务器之间可能会反复移动较大量的数据，从而无法保证服务质量。因此，通常的做法是基于应用层负载均衡器实现客户端联系，将某个客户端的所有请求转发到相同的服务器，使得一个用户会话的所有请求被同一服务器实例处理，从而保证服务质量。</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 516,
                    "belong_page": 1,
                    "question_id": 63698,
                    "question_title": "<p>阅读以下关于软件系统设计的叙述，在答题纸上回答问题1至问题3。</p><p>[说明]某文化产业集团委托软件公司开发一套文化用品商城系统，业务涉及文化用品销售、定制、竞拍和点评等板块，以提升商城的信息化建设水平。该软件公司组织项目组完成了需求调研，现已进入到系统架构设计阶段。考虑到系统需求对架构设计决策的影响，项目组先列出了可能影响系统架构设计的部分需求如下:</p><p>(a) 用户界面支持用户的个性化定制;</p><p>(b) 系统需要支持当前主流的标准和服务，特别是通信协议和平台接口;</p><p>(c) 用户操作的响应时间应不大于3秒，竞拍板块不大于1秒;</p><p>(d) 系统具有故障诊断和快速恢复能力;</p><p>(e) 用户密码需要加密传输;</p><p>(f) 系统需要支持不低于2G的数据缓存;</p><p>(g) 用户操作停滞时间超过定时限需要重新登录验证;</p><p>(h) 系统支持用户选择汉语、英语或法语三种语言之一进行操作。</p><p>项目组提出了两种系统架构设计方案:瘦客户端C/S架构和胖客户端C/S架构，经过对，上述需求逐条分析和讨论，最终决定采用瘦客户端C/S架构进行设计。</p><p><br/></p><p>[问题1](8分)&nbsp;</p><p>在系统架构设计中，决定系统架构设计的非功能性需求主要有四类:操作性需求、性能需求、安全性需求和文化需求。请简要说明四类需求的含义。</p><p>[问题2] (8分)</p><p>根据表1-1的分类，将题干所给出的系统需求(a) ~ (h) 分别填入(1) ~ (4)&nbsp;</p><p>表1-1需求分类</p><p><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181127/1543312292494065.jpg\" title=\"1543312292494065.jpg\" alt=\"1.jpg\"/></p><p>问题3 (9分)<br/></p><p>请说明瘦客户端C/S架构能够满足题干中给出的哪些系统需求(只需要回答出三个系统需求)。</p>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 63698,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "<p>[问题1]</p><p>系统性能需求( Performance Requirements) : 指响应时间、吞吐量、准确性、有效性、资源利用率等与系统完成任务效率相关的指标。可靠性、可用性等指标可归为此类。</p><p>安全性需求( Security Requirements ) :系统向合法用户提供服务并阻止非授权用户使用服务方面的系统需求。</p><p>操作性需求( Operational Requirements) :与用户操作使用系统相关的一些需求 。</p><p>文化需求( Cultural Requirements) : 带有文化背景因素的系统需求。</p><p>[问题2]</p><p>(1) (a) (b)</p><p>(2) (c)(d)(f)</p><p>(3) (e) (g)</p><p>(4) (h)</p><p>[问题3]</p><p>b,c,h（此题不严谨）</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 517,
                    "belong_page": 1,
                    "question_id": 63704,
                    "question_title": "<p><br/></p><p>阅读以下关于嵌入式实时系统相关技术的叙述，在答题纸.上回答问题1和问题2。</p><p>[说明]某公司长期从事宇航领域嵌入式实时系统的软件研制任务。公司为了适应未来嵌入式系统网络化、智能化和综合化的技术发展需要，决定重新考虑新产品的架构问题，经理将论证工作交给王工负责。王工经调研和分析，完成了新产品架构设计方案，提交公司高层讨论。</p><p>[问题1] (14分)</p><p>王工提交的设计方案中指出:由于公司目前研制的嵌入式实时产品属于简单型系统，其嵌入式子系统相互独立，功能单一，时序简单。而未来满足网络化、智能化和综合化的嵌入式实时系统将是种复杂系统，其核心特征体现为实时任务的机理、状态和行为的复杂性。简单任务和复杂任务的特征区分主要表现在十个方面。请参考表3- 1给出的实时任务特征分类，用题干中给出的(a) ~ (t)20个实时任务特征描述，补充完善表31给出的空(1) ~ (14) 。</p><p>(a) 任务属性不会随时间变化而改变;</p><p>(b) 任务的属性与时间相关;</p><p>(c) 任务仅可以从非连续集中获取特征变量;</p><p>(d) 任务变量域是连续的;</p><p>(e) 功能原理不依赖于上下文;</p><p>(f) 功能原理依赖于上下文;</p><p>(g) 任务行为可以用step-by- step顺序分析方法来理解;</p><p>(h) 许多任务在产生访问活动时相互间是并发处理的，很难用step by-step方法分析;</p><p>(i) 因果关系相互影响;</p><p>(j) 行为特征依赖于大量的反馈机制;</p><p>(k) 系统内构成、策略和描述是相似的;</p><p>(l) 系统内存 在许多不同的构成、策略和描述;</p><p>(m) 功能关系是非线性的;</p><p>(n) 功能关 系是线性的;</p><p>(o) 不同的子任务是相互独立的，任务内部仅存在少量的交互操作;</p><p>(p) 不同的子任务 有很高的交互操作，要把一个单任务的行为隔离开是困难的;</p><p>(q) 域特征有非常整齐的原则和规则;</p><p>(r) 许多不同的上下文依赖于规则;</p><p>(s) 原理和规则在表面属性， 上很容易被识别;</p><br/><img style=\"max-width:100%;height:auto\"  src=\"http://s2.51cto.com/images/20181127/1543312410412043.jpg\" title=\"1543312410412043.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": null,
                    "new_parent_id": 63704,
                    "score_rule": "",
                    "material_text": null,
                    "sort_son": "0",
                    "analyze": "<p>略</p>",
                    "like": 0,
                    "answer": [
                        "<p>[问题1]</p><p>(1) (d)</p><p>(2) (c)</p><p>(3) (e)</p><p>(4) (f)</p><p>(5) (g)</p><p>(6) (h)</p><p>(7) (i)</p><p>(8) (j)</p><p>(9) (k)</p><p>(10) (l)&nbsp;</p><p>(11) (n)</p><p>(12) (m)</p><p>(13) (o)</p><p>(14) (p)</p><p>[问题2]&nbsp;</p><p>BMTS的消息通信网络主要特征为:能适配不同的传输介质, 以及适配不同的协议, 屏蔽不同协议之间的差异,简化通信过程降低系统复杂度。</p><p>事件触发消息;以事件作为触发方式，事件发生便触发相应消息。</p><p>速率约束消息;传输速率固定的消息，</p><p>时间触发消息;以时间作为触发方式，到达时间点便触发相应消息。</p><p>具有时间触发消息能力的网络总线;&nbsp;</p><p>航空电子全双工交换式以太网( Avion nics Full Duplex Switched Ethermet , AFDX )时间触发以太网( Time Triggered Ethernet, TTE )</p>"
                    ],
                    "option": "[]"
                },
                {
                    "index": 518,
                    "belong_page": 1,
                    "question_id": 303724,
                    "question_title": "<p>【问题1】（13分）</p><p>针对用户级别与折扣规则管理功能的架构设计问题，李工建议采用面向对象的架构风格，而王工则建议采用基于规则的架构风格。请指出该系统更适合采用哪种架构风格，并从用户级别、折扣规则定义的灵活性、可扩展性和性能三个方面对这两种架构风格进行比较与分析，填写表1-1中的（1）~（3）空白处。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626522436681931.jpg\" title=\"1626522436681931.jpg\" alt=\"1.jpg\"/>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303723,
                    "score_rule": "",
                    "material_text": "<p style=\"text-indent:0\">试题一（共25分）</p><p>阅读以下关于软件架构的叙述，在答题纸上回答问题1和问题2。</p><p>&nbsp;</p><p>【说明】</p><p>某电子商务公司为了更好地管理用户，提升企业销售业绩，拟开发一套用户管理系统。该系统的基本功能是根据用户的消费级别、消费历史、信用情况等指标将用户划分为不同的等级，并针对不同等级的用户提供相应的折扣方案。在需求分析与架构设计阶段，电子商务公司提出的需求、质量属性描述和架构特性如下：</p><p>(a)用户目前分为普通用户、银卡用户、金卡用户和白金用户四个等级，后续需要能够根据消费情况进行动态调整；</p><p>(b)系统应该具备完善的安全防护措施，能够对黑客的攻击行为进行检测与防御；</p><p>(c)在正常负载情况下，系统应在0.5秒内对用户的商品查询请求进行响应；</p><p>(d)在各种节假日或公司活动中，针对所有级别用户，系统均能够根据用户实时的消费情况动态调整折扣力度；</p><p>(e)系统主站点断电后，应在5秒内将请求重定向到备用站点；</p><p>(f)系统支持中文昵称，但用户名要求必须以字母开头，长度不少于8个字符；</p><p>(g)当系统发生网络失效后，需要在15秒内发现错误并启用备用网络；</p><p>(h)系统在展示商品的实时视频时，需要保证视频画面具有1024x768像素的分辨率，40帧/秒的速率；</p><p>(i)系统要扩容时，应保证在10人•月内完成所有的部署与测试工作；</p><p>(j)系统应对用户信息数据库的所有操作都进行完整记录；</p><p>(k)更改系统的Web界面接口必须在4人•周内完成；</p><p>(l)系统必须提供远程调试接口，并支持远程调试。</p><p>在对系统需求、质量属性描述和架构特性进行分析的基础上，该系统架构师给出了两种候选的架构设计方案，公司目前正在组织相关专家对系统架构进行评估。</p>",
                    "sort_son": "1",
                    "analyze": "无",
                    "like": 0,
                    "answer": [
                        "<p>试题一</p><p>本题主要考查考生对于软件架构风格和软件质量属性的理解、掌握和运用，在解答该题目时，应认证阅读题干中给出的场景于需求描述，分析业务场景适合采用何种架构风格，然后分析需求描述了何种质量属性，根据质量属性描述对其归类。</p><p><br/></p><p>【问题1】</p><p>答案：</p><p>该系统更适合采用基于规则的虚拟机架构风格。</p><p>（1）根据用户级别建立用户级别-折扣规则矩阵，在系统启动时加载并支持运行过程中动态更新，灵活性好</p><p>（2）加入新的用户级别和折扣规则时需要增加相应的类来扩展，可通过系统重启、动态反射或动态加载扩展，扩展性较差</p><p>（3）可根据类型判断或策略模式直接获得用户级别对应的折扣规则对象实时计算，性能很好</p><p>解析：</p><p>面向对象设计模式中的策略模式和虚拟机中的基于规则的架构风格是动态规则场景中两种组常用的解决方案。从灵活性、可扩展性和性能方面综合比较来看，基于规则的虚拟机风格在灵活性和可扩展性两个方面均具备较大优势，而从性能方面会比面向对象处理速度差一些。</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 519,
                    "belong_page": 1,
                    "question_id": 303725,
                    "question_title": "<p>【问题2】（13分）</p><p>在架构评估过程中，质量属性效用树(utility tree)是对系统质量属性进行识别和优先级排序的重要工具。请将合适的质量属性名称填入图1-1中（1）、（2）空白处，并选择题干描述的（a）~（l）填入（3）~（6）空白处，完成该系统的效用树。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626522558785478.jpg\" title=\"1626522558785478.jpg\" alt=\"1.jpg\"/></p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303723,
                    "score_rule": "",
                    "material_text": "<p style=\"text-indent:0\">试题一（共25分）</p><p>阅读以下关于软件架构的叙述，在答题纸上回答问题1和问题2。</p><p>&nbsp;</p><p>【说明】</p><p>某电子商务公司为了更好地管理用户，提升企业销售业绩，拟开发一套用户管理系统。该系统的基本功能是根据用户的消费级别、消费历史、信用情况等指标将用户划分为不同的等级，并针对不同等级的用户提供相应的折扣方案。在需求分析与架构设计阶段，电子商务公司提出的需求、质量属性描述和架构特性如下：</p><p>(a)用户目前分为普通用户、银卡用户、金卡用户和白金用户四个等级，后续需要能够根据消费情况进行动态调整；</p><p>(b)系统应该具备完善的安全防护措施，能够对黑客的攻击行为进行检测与防御；</p><p>(c)在正常负载情况下，系统应在0.5秒内对用户的商品查询请求进行响应；</p><p>(d)在各种节假日或公司活动中，针对所有级别用户，系统均能够根据用户实时的消费情况动态调整折扣力度；</p><p>(e)系统主站点断电后，应在5秒内将请求重定向到备用站点；</p><p>(f)系统支持中文昵称，但用户名要求必须以字母开头，长度不少于8个字符；</p><p>(g)当系统发生网络失效后，需要在15秒内发现错误并启用备用网络；</p><p>(h)系统在展示商品的实时视频时，需要保证视频画面具有1024x768像素的分辨率，40帧/秒的速率；</p><p>(i)系统要扩容时，应保证在10人•月内完成所有的部署与测试工作；</p><p>(j)系统应对用户信息数据库的所有操作都进行完整记录；</p><p>(k)更改系统的Web界面接口必须在4人•周内完成；</p><p>(l)系统必须提供远程调试接口，并支持远程调试。</p><p>在对系统需求、质量属性描述和架构特性进行分析的基础上，该系统架构师给出了两种候选的架构设计方案，公司目前正在组织相关专家对系统架构进行评估。</p>",
                    "sort_son": "2",
                    "analyze": "无",
                    "like": 0,
                    "answer": [
                        "<p>【问题2】</p><p>（1）安全性，（2）可修改性，（3）h，（4）j，（5）e，（6）k</p><p>解析：</p><p>质量属性效用树时对质量属性进行分类、权衡、分析的架构分析工具，主要关注系统的性能、可用性、可修改性和安全性四个方面。根据对相关质量属性的定义和含义，题干中：(c)在正常负载情况下，系统应在0.5秒内对用户的商品查询请求进行响应和(h)系统在展示商品的实时视频时，需要保证视频画面具有1024x768像素的分辨率，40帧/秒的速率，描述的是系统的性能属性；(e)系统主站点断电后，应在5秒内将请求重定向到备用站点和(g)当系统发生网络失效后，需要在15秒内发现错误并启用备用网络，描述的是系统的可用性属性；(i)系统要扩容时，应保证在10人?月内完成所有的部署与测试工作和(k)更改系统的Web界面接口必须在4人?周内完成，描述的是系统的可修改性属性；(b)系统应该具备完善的安全防护措施，能够对黑客的攻击行为进行检测与防御和(j)系统应对用户信息数据库的所有操作都进行完整记录，描述的是系统的安全性属性。</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 520,
                    "belong_page": 1,
                    "question_id": 303733,
                    "question_title": "<p>【问题1】（8分）</p><p>根据订餐管理系统功能说明，请在图2-1所示数据流图中给出外部实体E1~E4和加工P1~P4的具体名称。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303732,
                    "score_rule": "",
                    "material_text": "<p>试题二（共25分）</p><p>阅读以下关于系统设计的叙述，在答题纸上回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>某软件企业为快餐店开发一套在线订餐管理系统，主要功能包括：</p><p>(1)在线订餐：己注册客户通过网络在线选择快餐店所提供的餐品种类和数量后提交订单，系统显示订单费用供客户确认，客户确认后支付订单所列各项费用。</p><p>(2)厨房备餐：厨房接收到客户已付款订单后按照订单餐品列表选择各类食材进行餐品加工。</p><p>(3)食材采购：当快餐店某类食材低于特定数量时自动向供应商发起采购信息，包括食材类型和数量，供应商接收到采购信息后按照要求将食材送至快餐店并提交己采购的食材信息，系统自动更新食材库存。</p><p>(4)生成报表：每个周末和月末，快餐店经理会自动收到系统生成的统计报表，报表中详细列出了本周或本月订单的统计信息以及库存食材的统计信息。</p><p>现采用数据流图对上述订餐管理系统进行分析与设计，系统未完成的0层数据流图如图2-1所示。<br/><img src=\"https://s2.51cto.com/images/20210717/1626522888771169.jpg\" title=\"1626522888771169.jpg\" alt=\"1.jpg\"/><br/><br/></p>",
                    "sort_son": "1",
                    "analyze": "<p>外部实体，是指系统之外的人员、事物或组织。外部实体指出系统的边界，即系统输入数据的发源地或系统所产生的数据的目标去处，如题目中的客户、厨房、供应商和快餐店经理均属于外部实体。</p><p>加工，又称处理或过程，描述输入数据流到输出数据之间的变换，也就是输入数据流经过什么处理过程后变成了输出数据。作用是把输入数据加工成所要的输出数据。每个加工都有一个名字和编号，加工的名字一般采用动宾结构短语，偶尔使用动词，如题目中提交订单、支付订单费用、加工餐品、采购食材、生成报表等均属于加工。</p>",
                    "like": 0,
                    "answer": [
                        "<p>本题考查系统过程建模的相关知识。</p><p>数据流图(Data Flow Diagram, DFD)从数据传递和加工角度，以图形方式来表达系统的逻辑功能、数据在系统内部的逻辑流向和逻辑变换过程，是结构化系统分析方法的主要表达工具及用于表示软件模型的一种图示方法。为了表达数据处理过程的数据加工情况，用一个数据流图往往是不够的。层次结构的数据流图按照系统的层次结构进行逐步分解，并以分层的数据流图反映这种结构关系，能清楚地表达和容易理解整个系统。</p><p>\t层次结构数据流图一般分为：顶层数据流图，中层数据流图和底层数据流图。中层数据流图中最高层次一般从0开始，最高层级的中层数据流图即是0层数据流图，0层数据流图主要目的是将顶层流图的系统分解为若干子系统，并决定每个子系统间的数据接口和活动关系。</p><p><br/></p><p>【问题1】</p><p>E1 客户，E2 厨房，E3 快餐店经理，E4 供应商</p><p>\tP1 订餐，P2 备餐，P3 生成报表，P4 采购食材</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 521,
                    "belong_page": 1,
                    "question_id": 303734,
                    "question_title": "<p>根据数据流图规范和订餐管理系统功能说明，请说明在图2-1中需要补充哪些数据流可以构造出完整的0层数据流图。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303732,
                    "score_rule": "",
                    "material_text": "<p>试题二（共25分）</p><p>阅读以下关于系统设计的叙述，在答题纸上回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>某软件企业为快餐店开发一套在线订餐管理系统，主要功能包括：</p><p>(1)在线订餐：己注册客户通过网络在线选择快餐店所提供的餐品种类和数量后提交订单，系统显示订单费用供客户确认，客户确认后支付订单所列各项费用。</p><p>(2)厨房备餐：厨房接收到客户已付款订单后按照订单餐品列表选择各类食材进行餐品加工。</p><p>(3)食材采购：当快餐店某类食材低于特定数量时自动向供应商发起采购信息，包括食材类型和数量，供应商接收到采购信息后按照要求将食材送至快餐店并提交己采购的食材信息，系统自动更新食材库存。</p><p>(4)生成报表：每个周末和月末，快餐店经理会自动收到系统生成的统计报表，报表中详细列出了本周或本月订单的统计信息以及库存食材的统计信息。</p><p>现采用数据流图对上述订餐管理系统进行分析与设计，系统未完成的0层数据流图如图2-1所示。<br/><img src=\"https://s2.51cto.com/images/20210717/1626522888771169.jpg\" title=\"1626522888771169.jpg\" alt=\"1.jpg\"/><br/><br/></p>",
                    "sort_son": "2",
                    "analyze": "<p>外部实体、加工、数据存储和数据流四要素在数据流程图中常见的错误：</p><p>外部实体作为数据来源和数据去处，常见错误主要集中在孤立的外部实体和实体命名方面。孤立外部实体既没有输入任何数据给系统，系统也没有为其提供任何数据，而实体命名一般采用代表人群、事物或组织名称的名词。</p><p>加工常见的错误集中在加工的输入和输出，常见的错误包括有输入而没有输出的加工，有输出而没有输入的加工，输入和输出不守恒的加工。</p><p>同样的数据存储常见的错误也集中在输入和输出，包括有输入无输出的存储，有输出无输入的存储和输入输出不守恒的存储。</p><p>而数据流的常见错误主要集中在命名方面，数据流名称应该是数据流中传递的数据内容，不要使用处理、传递、变换相关的内容来命名数据流。</p>",
                    "like": 0,
                    "answer": [
                        "<p>1）E1 - -&gt; P1 餐品订单</p><p>2）P1 - -&gt; P2 餐品订单</p><p>3）D1 - -&gt; P3 订单汇总</p><p>4）P3 - -&gt; E3 统计报表</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 522,
                    "belong_page": 1,
                    "question_id": 303735,
                    "question_title": "根据数据流图的含义，请说明数据流图和系统流程图之间有哪些方面的区别。",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303732,
                    "score_rule": "",
                    "material_text": "<p>试题二（共25分）</p><p>阅读以下关于系统设计的叙述，在答题纸上回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>某软件企业为快餐店开发一套在线订餐管理系统，主要功能包括：</p><p>(1)在线订餐：己注册客户通过网络在线选择快餐店所提供的餐品种类和数量后提交订单，系统显示订单费用供客户确认，客户确认后支付订单所列各项费用。</p><p>(2)厨房备餐：厨房接收到客户已付款订单后按照订单餐品列表选择各类食材进行餐品加工。</p><p>(3)食材采购：当快餐店某类食材低于特定数量时自动向供应商发起采购信息，包括食材类型和数量，供应商接收到采购信息后按照要求将食材送至快餐店并提交己采购的食材信息，系统自动更新食材库存。</p><p>(4)生成报表：每个周末和月末，快餐店经理会自动收到系统生成的统计报表，报表中详细列出了本周或本月订单的统计信息以及库存食材的统计信息。</p><p>现采用数据流图对上述订餐管理系统进行分析与设计，系统未完成的0层数据流图如图2-1所示。<br/><img src=\"https://s2.51cto.com/images/20210717/1626522888771169.jpg\" title=\"1626522888771169.jpg\" alt=\"1.jpg\"/><br/><br/></p>",
                    "sort_son": "3",
                    "analyze": "<p>外部实体、加工、数据存储和数据流四要素在数据流程图中常见的错误：</p><p>\t外部实体作为数据来源和数据去处，常见错误主要集中在孤立的外部实体和实体命名方面。孤立外部实体既没有输入任何数据给系统，系统也没有为其提供任何数据，而实体命名一般采用代表人群、事物或组织名称的名词。</p><p>\t加工常见的错误集中在加工的输入和输出，常见的错误包括有输入而没有输出的加工，有输出而没有输入的加工，输入和输出不守恒的加工。</p><p>\t同样的数据存储常见的错误也集中在输入和输出，包括有输入无输出的存储，有输出无输入的存储和输入输出不守恒的存储。</p><p>\t而数据流的常见错误主要集中在命名方面，数据流名称应该是数据流中传递的数据内容，不要使用处理、传递、变换相关的内容来命名数据流。</p>",
                    "like": 0,
                    "answer": [
                        "<p>（1）数据流图中的处理过程可并行;系统流程图在某个时间点只能处于一个处理过程。</p><p>（2）数据流图展现系统的数据流; 系统流程图展现系统的控制流。</p><p>（3）数据流图展现全局的处理过程，过程之间遵循不同的计时标准;系统流程图中处理过程遵循一致的计时标准。</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 523,
                    "belong_page": 1,
                    "question_id": 303742,
                    "question_title": "<p>【问题1】（7分）</p><p>通常CPS结构分为感知层、网络层和控制层，请用300字以内文字说明CPS的定义，并简要说明各层的含义。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303741,
                    "score_rule": "",
                    "material_text": "<p>试题三（共25分）</p><p>请详细阅读有关信息物理系统架构方面的描述，回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>信息物理系统(Cyber Physical Systems, CPS)技术己成为未来宇航装备发展的重点关键技术之一。某公司长期从事嵌入式系统的研制工作，随着公司业务范围不断扩展，公司决定进入宇航装备的研制领域。为了做好前期准备，公司决定让王工程师负责编制公司进军宇航装备领域的战略规划。王工经调研和分析，认为未来宇航装备将向着网络化、智能化和综合化的目标发展，CPS将会是宇航装备的核心技术，公司应构建基于CPS技术的新产品架构，实现超前的技术战略储备。</p>",
                    "sort_son": "1",
                    "analyze": "无",
                    "like": 0,
                    "answer": [
                        "<p>本题主要考查CPS系统的定义、架构层次结构和安全性质量属性。</p><p>信息物理系统（CPS, Cyber-Physical Systems）是一个综合计算、网络和物理环境的多维复杂系统，通过3C（Computation、Communication、Control）技术的有机融合与深度协作，实现大型工程系统的实时感知、动态控制和信息服务。CPS实现计算、通信与物理系统的一体化设计，可使系统更加可靠、高效、实时协同，具有重要而广泛的应用前景。</p><p><br/></p><p>【问题1】</p><p>答案：</p><p>信息物理系统作为计算进程和物理进程的统一体，是集成计算、通信与控制于一体的下一代智能系统，通过人机交互接口实现和物理进程的交互，使用网络化空间以远程的、可靠的、实时的、安全的、协作的方式操控一个物理实体。</p><p>感知层主要是由传感器、控制器和采集器等设备组成，主要是通过传感器获取环境的信息数据，定时发送给服务器，并接收服务器处理结果数据后进行相应的控制器变化；网络层是连接信息世界和物理世界的桥梁，主要实现数据传输，为系统提供实时的网络服务，保证网络分组的实时可靠；控制层根据感知层的认知结果，根据物理设备传回来的数据进行相应的分析，将分析结果通过客户端以可视化的界面呈现给客户。</p><p>解析：</p><p>信息物理系统(Cyber Physical Systems，CPS)作为计算进程和物理进程的统一体，是集成计算、通信与控制于一体的下一代智能系统。信息物理系统通过人机交互接口实现和物理进程的交互，使用网络化空间以远程的、可靠的、实时的、安全的、协作的方式操控一个物理实体。</p><p>\t信息物理系统包含了将来无处不在的环境感知、嵌入式计算、网络通信和网络控制等系统工程，使物理系统具有计算、通信、精确控制、远程协作和自治功能。它注重计算资源与物理资源的紧密结合与协调，主要用于一些智能系统上如设备互联，物联传感，智能家居，机器人，智能导航等。</p><p>\t信息物理系统主要分为3个部分，分别是感知层、网络层和控制层，感知层主要是由传感器、控制器和采集器等设备组成。感知层中的传感器作为信息物理系统中的末端设备，主要采集的是环境中的具体信息感知层主要是通过传感器获取环境的信息数据，并定时地发送给服务器，服务器接收到数据之后进行相应的处理，再返回给物理末端设备相应的信息，物理末端设备接收到数据之后要进行相应的变化；网络层主要是连接信息世界和物理世界的桥梁，主要实现的是数据传输，为系统提供实时的网络服务，保证网络分组的实时可靠；控制层主要是根据认知层的认知结果，根据物理设备传回来的数据进行相应的分析，将相应的结果返回给客户端以可视化的界面呈现给客户。</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 524,
                    "belong_page": 1,
                    "question_id": 303743,
                    "question_title": "<p>【问题2】（10分）</p><p>王工在提交的战略规划中指出：飞行器中的电子设备是一个大型分布式系统，其传感器、控制器和采集器分布在飞机各个部位，相互间采用高速总线互连，实现子系统间的数据交换，而飞行员或地面指挥系统根据飞行数据的汇总决策飞行任务的执行。</p><p>请参考图3-1给出的功能图，依据你所掌握的CPS知识，说明以下所列的功能分别属于CPS结构中的哪层，哪项功能不属于CPS任何一层。</p><p>1.飞行传感器管理</p><p>2.步进电机控制</p><p>3.显控</p><p>4.发电机控制</p><p>5.环控</p><p>6.配电管理</p><p>7.转速传感器</p><p>8.传感器总线</p><p>9.飞行员</p><p>10.火警信号探测<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626523651961622.jpg\" title=\"1626523651961622.jpg\" alt=\"1.jpg\"/></p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303741,
                    "score_rule": "",
                    "material_text": "<p>试题三（共25分）</p><p>请详细阅读有关信息物理系统架构方面的描述，回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>信息物理系统(Cyber Physical Systems, CPS)技术己成为未来宇航装备发展的重点关键技术之一。某公司长期从事嵌入式系统的研制工作，随着公司业务范围不断扩展，公司决定进入宇航装备的研制领域。为了做好前期准备，公司决定让王工程师负责编制公司进军宇航装备领域的战略规划。王工经调研和分析，认为未来宇航装备将向着网络化、智能化和综合化的目标发展，CPS将会是宇航装备的核心技术，公司应构建基于CPS技术的新产品架构，实现超前的技术战略储备。</p>",
                    "sort_son": "2",
                    "analyze": "根据CPS感知层、网络层、控制层定义，2步进电机控制和4发电机控制属于控制器，7转速传感器和10火警信号探测属于传感器，因此2，4，7，10归类为感知层设备；8传感器总线属于数据传输通讯链路设备，归类为网络层设备； 3显控属于飞行器任务级功能，1飞行传感器管理属于飞行器平台级功能，5环控和6配电管理属于飞行器平台级下的功能组件，因此1，3，5，6归类为控制层；而9飞行员属于系统使用者，不属于CPS系统。",
                    "like": 0,
                    "answer": [
                        "<p>【问题2】</p><p>答案：</p><p>感知层：2,4,7,10</p><p>网络层：8</p><p>控制层：1,3,5,6</p><p>非CPS：9</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 525,
                    "belong_page": 1,
                    "question_id": 303744,
                    "question_title": "<p>【问题3】（8分）</p><p>王工在提交的战略规划中指出：未来宇航领域装备将呈现网络化、智能化和综合化等特征，形成集群式的协同能力，安全性尤为重要。在宇航领域的CPS系统中，不同层面上都会存在一定的安全威胁。请用100字以内文字说明CPS系统会存在哪三类安全威胁，并对每类安全威胁至少举出两个例子说明。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303741,
                    "score_rule": "",
                    "material_text": "<p>试题三（共25分）</p><p>请详细阅读有关信息物理系统架构方面的描述，回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>信息物理系统(Cyber Physical Systems, CPS)技术己成为未来宇航装备发展的重点关键技术之一。某公司长期从事嵌入式系统的研制工作，随着公司业务范围不断扩展，公司决定进入宇航装备的研制领域。为了做好前期准备，公司决定让王工程师负责编制公司进军宇航装备领域的战略规划。王工经调研和分析，认为未来宇航装备将向着网络化、智能化和综合化的目标发展，CPS将会是宇航装备的核心技术，公司应构建基于CPS技术的新产品架构，实现超前的技术战略储备。</p>",
                    "sort_son": "3",
                    "analyze": "<p>感知执行层安全威胁</p><p>感知执行层主要由各种物理传感器等组成，是整个物理信息系统中信息的来源。为了适应多变的环境，网络节点多布置在无人监管的环境中，因此易被攻击者攻击。常见的针对感知执行层的攻击方式有：</p><p>1) 感知数据破坏：攻击者未经授权，对感知层获取的信息进行篡改、增删或破坏等；</p><p>2) 信息窃听：攻击者通过搭线或利用传输过程中的电磁泄露获取信息，造成数据隐私泄露等问题；</p><p>3) 节点捕获：攻击者对部分网络节点进行控制，可能导致密钥泄露，危及整个系统的通信安全。</p><p>数据传输层安全威胁</p><p>数据传输层一般要接入网络，而接入网络本身就会给整个物理信息系统带来威胁。一方面，作为链接感知层和控制层的数据传输的通道，其中传输的信息易成为攻击者的目标；另一方面，由于接入网络，数据传输层易受到攻击。数据传输层的主要安全威胁如下：</p><p>1) 拒绝服务攻击：攻击者通过先向服务器发送大量请求，使得服务器缓冲区爆满而被迫停止接受新的请求，使系统崩溃从而影响合法用户的使用；</p><p>2) 选择性转发：恶意节点在接收到数据后，不全部转发所有信息，而是将部分或全部关键信息在转发过程中丢掉，破坏了数据的完整性；</p><p>3) 方向误导攻击：恶意节点在接收到数据包后，对其源地址和目的地址进行修改，使得数据包沿错误路径发送出去，造成数据丢失或网络混乱。</p><p>应用控制层安全威胁</p><p>应用控制层中数据库中存放着大量用户的隐私数据，因此在这一层中一旦发生攻击就会出现大量隐私泄漏的问题。针对应用层的主要威胁有：</p><p>1) 用户隐私泄漏：用户的所有的数据都存储在应用控制层中的数据库中，其中包含用户的个人资料等隐私的数据都存放在数据库中，一旦数据库被攻陷，就会导致用户的隐私产生泄漏，造成很严重的影响；</p><p>2) 恶意代码：恶意代码是指在运行过程中会对系统造成不良影响的代码库，攻击者一般会将这些代码嵌入到注释中，脚本一旦在系统中运行，就会对系统造成严重的后果；</p><p>3) 非授权访问：对于一个系统来说，会有各种权限的管理者，比如超级管理员，对该系统有着最高的操作权限，一般管理员对该系统有部分的操作权限。非授权访问指的就是攻击者在未经授权的情况下不合理的访问本系统，攻击者欺骗系统，进入到本系统中对本系统执行一些恶意的操作就会对本系统产生严重的影响。</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题3】</p><p>答案：</p><p>1.感知层威胁</p><p>信息窃听：通过搭线或电磁泄漏造成数据隐私泄露</p><p>感知破坏：未经授权对感知层信息篡改、增删或破坏</p><p>2.网络层威胁</p><p>拒绝服务：发送大量请求迫使服务器停止接受新请求</p><p>选择性转发：恶意节点接收数据后有选择性的转发，破坏数据完整性</p><p>3.控制层威胁</p><p>非授权访问：未经授权情况下不合理进入系统执行恶意操作</p><p>恶意代码：注入对系统造成不良影响的恶意代码，对系统造成破坏</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 526,
                    "belong_page": 1,
                    "question_id": 303755,
                    "question_title": "<p>【问题1】（4分）</p><p>请将上述非功能性需求（1）~（8）归类到性能、安全性、可用性、易用性这四类非功能性需求。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303754,
                    "score_rule": "",
                    "material_text": "试题五（共25分）<p>请详细阅读有关Web架构设计方面的叙述，在答题纸上回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>某公司拟开发一个物流车辆管理系统，该系统可支持各车辆实时位置监控、车辆历史轨迹管理、违规违章记录管理、车辆固定资产管理、随车备品及配件更换记录管理、车辆寿命管理等功能需求。其非功能性需求如下：</p><p>(1)系统应支持大于50个终端设备的并发请求；</p><p>(2)系统应能够实时识别车牌，识别时间应小于1s；</p><p>(3)系统应7X24小时工作；</p><p>(4)具有友好的用户界面；</p><p>(5)可抵御常见SQL注入攻击；</p><p>(6)独立事务操作响应时间应小于3s；</p><p>(7)系统在故障情况下，应在1小时内恢复；</p><p>(8)新用户学习使用系统的时间少于1小时。</p><p>面对系统需求，公司召开项目组讨论会议，制订系统设计方案，最终决定基于分布式架构设计实现该物流车辆管理系统，应用Kafka、Redis数据缓存等技术实现对物流车辆自身数据、业务数据进行快速、高效的处理。</p>",
                    "sort_son": "1",
                    "analyze": "质量属性归类，是需求分析和架构设计阶段的主要工作之一。根据对相关质量属性的定义和含义，题干中：(1)系统应支持大于50个终端设备的并发请求，(2)系统应能够实时识别车牌，识别时间应小于1s，(6)独立事务操作响应时间应小于3s，描述的是系统的性能属性；(5)可抵御常见SQL注入攻击，描述的是系统的安全性属性；(3)系统应7X24小时工作，(7)系统在故障情况下，应在1小时内恢复，描述的是系统的可用性属性；(4)具有友好的用户界面，(8)新用户学习使用系统的时间少于1小时，描述的是系统的易用性属性。",
                    "like": 0,
                    "answer": [
                        "<p>本题考查高性能、高并发、高可用的分布式系统架构设计实践相关知识。</p><p>在当前的技术环境下，高性能、高并发、高可用的三高架构设计是众多技术企业需要在日常工作中经常面对的常见架构需求。这些需求的常见架构策略有：分层、冗余、分隔、异步通信、分布式、安全、自动化、集群、缓存、微服务等。</p><p><br/></p><p>【问题1】</p><p>答案：</p><p>性能∶\t（1）、（2）、（6）</p><p>安全性∶\t（5）</p><p>可用性∶\t（3）、（7）</p><p>易用性∶\t（4）、（8）</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 527,
                    "belong_page": 1,
                    "question_id": 303756,
                    "question_title": "<p>【问题2】（14分）</p><p>经项目组讨论，完成了该系统的分布式架构设计，如图5-1所示。请从下面给出的（a)~（j)中进行选择，补充完善图5-1中（1）~（7)处空白的内容。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626524008483015.jpg\" title=\"1626524008483015.jpg\" alt=\"1.jpg\"/></p><p>(a)数据存储层</p><p>(b)Struct2</p><p>(c)负载均衡层</p><p>(d)表现层</p><p>(e)HTTP协议</p><p>(f)Redis数据缓存</p><p>(g)Kafka分发消息</p><p>(h)分布式通信处理层</p><p>(i)逻辑处理层</p><p>(j)CDN内容分发</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303754,
                    "score_rule": "",
                    "material_text": "试题五（共25分）<p>请详细阅读有关Web架构设计方面的叙述，在答题纸上回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>某公司拟开发一个物流车辆管理系统，该系统可支持各车辆实时位置监控、车辆历史轨迹管理、违规违章记录管理、车辆固定资产管理、随车备品及配件更换记录管理、车辆寿命管理等功能需求。其非功能性需求如下：</p><p>(1)系统应支持大于50个终端设备的并发请求；</p><p>(2)系统应能够实时识别车牌，识别时间应小于1s；</p><p>(3)系统应7X24小时工作；</p><p>(4)具有友好的用户界面；</p><p>(5)可抵御常见SQL注入攻击；</p><p>(6)独立事务操作响应时间应小于3s；</p><p>(7)系统在故障情况下，应在1小时内恢复；</p><p>(8)新用户学习使用系统的时间少于1小时。</p><p>面对系统需求，公司召开项目组讨论会议，制订系统设计方案，最终决定基于分布式架构设计实现该物流车辆管理系统，应用Kafka、Redis数据缓存等技术实现对物流车辆自身数据、业务数据进行快速、高效的处理。</p>",
                    "sort_son": "2",
                    "analyze": "<p>三层架构就是为了符合”高内聚，低耦合“思想，把各个功能模块划分为表示层（UI）、业务逻辑层（BLL）和数据访问层（DAL）三层架构。</p><p>\t由于在高并发环境下，由于无法及时完成同步处理，请求往往会发生堵塞而直接导致无数的行锁表锁，甚至最后请求会堆积过多触发连接数超过上限的错误。通过使用消息队列可以异步处理请求，从而缓解系统的压力。该案例中采用Kafka分布式消息队列。</p><p>\t缓存是分布式系统中的重要组件，主要解决高并发，大数据场景下，热点数据访问的性能问题。提供高性能的数据快速访问。本案例中采用Redis键值数据库缓存。</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题2】</p><p>答案：</p><p>（1）d （2）e （3）i （4）h （5）g （6）f （7）a</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 528,
                    "belong_page": 1,
                    "question_id": 303757,
                    "question_title": "<p>【问题3】（7分）</p><p>该物流车辆管理系统需抵御常见的SQL注入攻击,请用200字以内的文字说明什么是SQL注入攻击，并列举出两种抵御SQL注入攻击的方式。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 303754,
                    "score_rule": "",
                    "material_text": "试题五（共25分）<p>请详细阅读有关Web架构设计方面的叙述，在答题纸上回答问题1至问题3。</p><p><br/></p><p>【说明】</p><p>某公司拟开发一个物流车辆管理系统，该系统可支持各车辆实时位置监控、车辆历史轨迹管理、违规违章记录管理、车辆固定资产管理、随车备品及配件更换记录管理、车辆寿命管理等功能需求。其非功能性需求如下：</p><p>(1)系统应支持大于50个终端设备的并发请求；</p><p>(2)系统应能够实时识别车牌，识别时间应小于1s；</p><p>(3)系统应7X24小时工作；</p><p>(4)具有友好的用户界面；</p><p>(5)可抵御常见SQL注入攻击；</p><p>(6)独立事务操作响应时间应小于3s；</p><p>(7)系统在故障情况下，应在1小时内恢复；</p><p>(8)新用户学习使用系统的时间少于1小时。</p><p>面对系统需求，公司召开项目组讨论会议，制订系统设计方案，最终决定基于分布式架构设计实现该物流车辆管理系统，应用Kafka、Redis数据缓存等技术实现对物流车辆自身数据、业务数据进行快速、高效的处理。</p>",
                    "sort_son": "3",
                    "analyze": "<p>SQL注入即是指应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p><p>SQL注入的主要防范措施包括：</p><p>分级管理：对用户进行分级管理，严格控制用户的权限</p><p>参数校验：编写SQL时禁止直接传值入SQL，必须通过设置参数传递变量值</p><p>参数过滤：对参数值预过滤敏感内容，如and，or，select，分号，双引号等</p><p>安全参数：使用编程语言中提供的数据库操作安全参数的强制执行检查特性</p><p>漏洞扫描：利用SQL漏洞扫描工具及时扫描系统存在的相应漏洞</p><p>多层验证：数据输入必须经过严格的验证才能进入系统，拒绝未通过验证的输入直接被访问数据库</p><p>数据库加密：对数据库敏感信息进行加密，传统加密方法包括对称加密、非对称加密和不可逆加密</p>",
                    "like": 0,
                    "answer": [
                        "<p>【问题3】</p><p>答案：</p><p>SOL 注入攻击，就是通过把 SOL 命令插入到 Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p><p>可以通过以下方式抵御 SQL 注入攻击∶</p><p>1、使用PreparedStatement</p><p>2、使用存储过程</p><p>3、验证输入/过滤输入</p><p>4、专业的安全产品</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 529,
                    "belong_page": 1,
                    "question_id": 315995,
                    "question_title": "<p>【问题 1】(9分)</p><p>在架构评估过程中，质量属性效用树(utility tree)是对系统质量属性进行识别和优先级排序的重要工具。请将合适的质量属性名称域入图1-1中(1)、(2)空白处，并从题干中的(a)~(I)中选择合适的质量属性描述，填入(3)~(6)空白处，完成该平台的效用树。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211118/1637238205541149.png\" title=\"1637238205541149.png\" alt=\"image.png\"/><br/></p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 315994,
                    "score_rule": "",
                    "material_text": "<p>试题一（共25分）</p><p>阅读以下关于软件架构设计与评估的叙述，在答题纸上回答问题 1和问题 2。</p><p>【说明】</p><p>某公司拟开发一套机器学习应用开发平台，支持用户使用浏览器在线进行基于机器学习的智能应用开发活动。该平台的核心应用场景是用户通过拖拽算法组件灵活定义机器学习流程，采用自助方式进行智能应用设计、实现与部署，并可以开发新算法组件加入平台中。在需求分析与架构设计阶段，公司提出的需求和质量属性描述如下:</p><p>(a) 平台用户分为算法工程师、软件工程师和管理员等三种角色，不同角色的功能界面有所不同:</p><p>(b)平台应该具备数据库保护措施，能够预防核心数据库被非授权用户访问:</p><p>(c)平台支持分布式部署，当主站点断电后，应在 20 秒内将请求重定向到备用站点；</p><p>(d)平台支持初学者和高级用户两种界面操作模式，用户可以根据自己的情况灵活选择合适的模式:</p><p>(e)平台主站点宕机后，需要在 15 秒内发现错误并启用备用系统;</p><p>(f)在正常负载情况下，机器学习流程从提交到开始执行，时间间隔不大于5秒;</p><p>(g)平台支持硬件扩容与升级，能够在3人天内完成所有部署与测试工作;</p><p>(h)平台需要对用户的所有操作过程进行详细记录，便于审计工作;</p><p>(i)平台部署后，针对界面风格的修改需要在 3 人天内完成:</p><p>(j)在正常负载情况下，平台应在 0.5 秒内对用户的界面操作请求进行响应;</p><p>(k)平台应该与目前国内外主流的机器学习应用开发平台的界面风格保持一致;</p><p>(l)平台提供机器学习算法的远程调试功能，支持算法工程师进行远程调试。</p><p>在对平台需求、质量属性描述和架构特性进行分析的基础上，公司的架构师给出了三种候选的架构设计方案，公司目前正在组织相关专家对平台架构进行评估。</p>",
                    "sort_son": "1",
                    "analyze": "<p>无<br/></p><p><br/></p>",
                    "like": 0,
                    "answer": [
                        "（1）性能<br/>（2）可修改性<br/>（3）e<br/>（4）j<br/>（5）h<br/>（6）i"
                    ],
                    "option": ""
                },
                {
                    "index": 530,
                    "belong_page": 1,
                    "question_id": 315996,
                    "question_title": "<p>【问题2】(16分)</p><p>针对该系统的功能，赵工建议采用解释器(interpreter)架构风格，李工建议采用管道-过滤器(ppe-and-hlter)的架构风格，王工则建议采用隐式调用(implicit invocation)架构风格。请针对平台的核心应用场景，从机器学习流程定义的灵活性和学习算法的可扩展性两个方面对三种架构风格进行对比与分析，并指出该平台更适合采用哪种架构风格。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 315994,
                    "score_rule": "",
                    "material_text": "<p>试题一（共25分）</p><p>阅读以下关于软件架构设计与评估的叙述，在答题纸上回答问题 1和问题 2。</p><p>【说明】</p><p>某公司拟开发一套机器学习应用开发平台，支持用户使用浏览器在线进行基于机器学习的智能应用开发活动。该平台的核心应用场景是用户通过拖拽算法组件灵活定义机器学习流程，采用自助方式进行智能应用设计、实现与部署，并可以开发新算法组件加入平台中。在需求分析与架构设计阶段，公司提出的需求和质量属性描述如下:</p><p>(a) 平台用户分为算法工程师、软件工程师和管理员等三种角色，不同角色的功能界面有所不同:</p><p>(b)平台应该具备数据库保护措施，能够预防核心数据库被非授权用户访问:</p><p>(c)平台支持分布式部署，当主站点断电后，应在 20 秒内将请求重定向到备用站点；</p><p>(d)平台支持初学者和高级用户两种界面操作模式，用户可以根据自己的情况灵活选择合适的模式:</p><p>(e)平台主站点宕机后，需要在 15 秒内发现错误并启用备用系统;</p><p>(f)在正常负载情况下，机器学习流程从提交到开始执行，时间间隔不大于5秒;</p><p>(g)平台支持硬件扩容与升级，能够在3人天内完成所有部署与测试工作;</p><p>(h)平台需要对用户的所有操作过程进行详细记录，便于审计工作;</p><p>(i)平台部署后，针对界面风格的修改需要在 3 人天内完成:</p><p>(j)在正常负载情况下，平台应在 0.5 秒内对用户的界面操作请求进行响应;</p><p>(k)平台应该与目前国内外主流的机器学习应用开发平台的界面风格保持一致;</p><p>(l)平台提供机器学习算法的远程调试功能，支持算法工程师进行远程调试。</p><p>在对平台需求、质量属性描述和架构特性进行分析的基础上，公司的架构师给出了三种候选的架构设计方案，公司目前正在组织相关专家对平台架构进行评估。</p>",
                    "sort_son": "2",
                    "analyze": "<p>无</p>",
                    "like": 0,
                    "answer": [
                        "<p>输入和输出，构件读取输入的数据流，经过内部处理（计算或增值），产生输出数据流。前一个构件的输出作为后一个构件的输入，前后数据流关联。</p><p>过滤器就是构件，连接件就是管道。</p><p>隐式调用风格是构件不直接调用一个过程，而是触发或广播一个或多个事件。构件中的过程在一个或多个事件中注册，当某个事件被触发时，系统自动调用在这个事件中注册的所有过程。一个事件的触发就导致了另一个模块中的过程调用。</p><p>平台支持初学者和高级用户两种界面操作模式，用户可以根据自己的情况灵活选择合适的模式:</p><p>从灵活性上解释器可以通过灵活的自定义规则实现规则的重组。</p><p>从可扩展性上解释器可以包括一个完成解释工作的解释引擎、一个包含将被解释的代码的存储区、一个记录解释引擎当前工作状态的数据结构，以及一个记录源代码被解释执行的进度的数据结构。可以通过新建规则实现可扩展性。</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 531,
                    "belong_page": 1,
                    "question_id": 316006,
                    "question_title": "<p>【问题1】（8分）</p><p>请用400字以内的文字简要描述基于家庭网关的传统智能家居管理系统和基于云平台的智能家居管理系统在网关管理、数据处理和系统性能等方面的特点，以说明项目组选择李工设计思路的原因。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 316005,
                    "score_rule": "",
                    "material_text": "<p>试题五（共25分）</p><p>阅读以下关于Web系统架构设计的教述，在答题纸上回答问题1至问题3。<br/></p><p>【说明】</p><p>某公司拟开发一个智能家居管理系统，该系统的主要功能需求如下：1）用户可使用该系统客户端实现对家居设备的控制，且家居设备可向客户端反馈实时状态；2）支持家居设备数据的实时存储和查询；3）基于用户数据，挖掘用户生活习惯，向用户提供家居设备智能化使用建议。</p><p>基于上述需求，该公司组建了项目组，在项目会议上，张工给出了基于家庭网关的传统智能家居管理系统的设计思路，李工给出了基于云平台的智能家居系统的设计思路。经过深入讨论，公司决定采用李工的设计思路。</p><p><br/></p>",
                    "sort_son": "1",
                    "analyze": "无",
                    "like": 0,
                    "answer": [
                        "<p>在网关管理方面，基于云平台的智能家居管理系统可以将分散的智能家居网关数据集中起来,实现对智能家居网关的远程高效管理。</p><p>在数据处理方面，云端服务器对智能家居网数据进行备份存储,当家庭网关由于故障等原因导致数据丢失时,可以通过云端管理系统对网关数据进行恢复,从而提高数据的容灾性。</p><p>在系统性能方面，基于云服务平台的智能家居管理系统将数据信息存储在云端，减少了数据请求时间，提高了通信效率。</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 532,
                    "belong_page": 1,
                    "question_id": 316007,
                    "question_title": "<p>【问题2】（12分）</p><p>请从下面给出的（a）~（j）中进行选择，补充完善图5-1中空（1）~（6）处的内容，协助李工完成该系统的架构设计方案。</p><p>&nbsp;<img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20211118/1637240070341158.png\" title=\"1637240070341158.png\" alt=\"image.png\"/></p><p>（a）Wi-FI</p><p>（b）蓝牙</p><p>（c）驱动程序</p><p>（d）数据库</p><p>（e）家庭网关</p><p>（f）云平台</p><p>（g）微服务</p><p>（h）用户终端</p><p>（i）鸿蒙</p><p>（j）TCP/IP</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 316005,
                    "score_rule": "",
                    "material_text": "<p>试题五（共25分）</p><p>阅读以下关于Web系统架构设计的教述，在答题纸上回答问题1至问题3。<br/></p><p>【说明】</p><p>某公司拟开发一个智能家居管理系统，该系统的主要功能需求如下：1）用户可使用该系统客户端实现对家居设备的控制，且家居设备可向客户端反馈实时状态；2）支持家居设备数据的实时存储和查询；3）基于用户数据，挖掘用户生活习惯，向用户提供家居设备智能化使用建议。</p><p>基于上述需求，该公司组建了项目组，在项目会议上，张工给出了基于家庭网关的传统智能家居管理系统的设计思路，李工给出了基于云平台的智能家居系统的设计思路。经过深入讨论，公司决定采用李工的设计思路。</p><p><br/></p>",
                    "sort_son": "2",
                    "analyze": "无",
                    "like": 0,
                    "answer": [
                        "<p>(1) h 用户终端 (2) i 鸿蒙 (3) f 云平台 (4) d 数据库 (5) e 家庭网关(6) c 驱动程序</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 533,
                    "belong_page": 1,
                    "question_id": 316008,
                    "question_title": "<p>【问题3】（5分）</p><p>该系统需实现用户终端与服务端的双向可靠通信，请用300字以内的文字从数据传输可靠性的角度对比分析TCP和UDP通信协议的不同，并说明该系统应采用哪种通信协议。</p>",
                    "question_type": 14,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 316005,
                    "score_rule": "",
                    "material_text": "<p>试题五（共25分）</p><p>阅读以下关于Web系统架构设计的教述，在答题纸上回答问题1至问题3。<br/></p><p>【说明】</p><p>某公司拟开发一个智能家居管理系统，该系统的主要功能需求如下：1）用户可使用该系统客户端实现对家居设备的控制，且家居设备可向客户端反馈实时状态；2）支持家居设备数据的实时存储和查询；3）基于用户数据，挖掘用户生活习惯，向用户提供家居设备智能化使用建议。</p><p>基于上述需求，该公司组建了项目组，在项目会议上，张工给出了基于家庭网关的传统智能家居管理系统的设计思路，李工给出了基于云平台的智能家居系统的设计思路。经过深入讨论，公司决定采用李工的设计思路。</p><p><br/></p>",
                    "sort_son": "3",
                    "analyze": "无",
                    "like": 0,
                    "answer": [
                        "<p>TCP在IP协议提供的不可靠数据服务的基础上，采用了重发技术，为应用程序提供了一个可靠的、面向连接的、全双工的数据传输服务。TCP协议一般用于传输数据量比较少，且对可靠性要求高的场合。</p><p>UDP是一种不可靠的、无连接的协议，可以保证应用程序进程间的通信，与TCP相比，UDP是一种无连接的协议，它的错误检测功能要弱得多。</p><p>该系统应采用TCP协议</p>"
                    ],
                    "option": ""
                },
                {
                    "index": 534,
                    "belong_page": 1,
                    "question_id": 348854,
                    "question_title": "1、某公司欲开发一个大型多人即时战略游戏，游戏设计的目标之一是能够支持玩家自行创建战役地图，定义游戏对象的行为和对象之间的关系。针对该需求，在层次风格、解释器风格、黑板和事件驱动风中公司应该采用什么架构风格最为合适？<br/><br/>2、在基于体系结构的软件设计方法中，采用什么来描述软件架构？<br/><br/>3、哪种视图能解决并发性、分布性等问题？<br/><br/>4、某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3&nbsp;个核心质量<br/>属性场景。其中“网站在并发用户数量10&nbsp;万的负载情况下，用户请求的平均响应时间应小<br/>于3&nbsp;秒”这一场景主要与什么质量属性相关？<br/><br/>5、ABSDM模型把整个基于体系结构的软件过程划分为体系结构需求、设计、文档化、复审、实现和什么等6个子过程？<br/><br/>",
                    "question_type": 5,
                    "answer_type": 5,
                    "show_type_name": "问答题",
                    "new_parent_id": 348854,
                    "score_rule": "",
                    "material_text": "",
                    "sort_son": "0",
                    "analyze": "详见答案",
                    "like": 0,
                    "answer": [
                        "1、某公司欲开发一个大型多人即时战略游戏，游戏设计的目标之一是能够支持玩家自行创建战役地图，定义游戏对象的行为和对象之间的关系。针对该需求，在层次风格、解释器风格、黑板和事件驱动风中公司应该采用什么架构风格最为合适？<br/>答：解释器风格<br/>2、在基于体系结构的软件设计方法中，采用什么来描述软件架构？<br/>答：采用视角与视图来描述软件架构<br/>3、哪种视图能解决并发性、分布性等问题？<br/>答：&nbsp;进程视图<br/>4、某公司欲开发一个在线教育平台。在架构设计阶段，公司的架构师识别出3&nbsp;个核心质量<br/>属性场景。其中“网站在并发用户数量10&nbsp;万的负载情况下，用户请求的平均响应时间应小<br/>于3&nbsp;秒”这一场景主要与什么质量属性相关？<br/>答：性能<br/>5、ABSDM模型把整个基于体系结构的软件过程划分为体系结构需求、设计、文档化、复审、实现和什么等6个子过程？<br/>答：体系结构演化"
                    ],
                    "option": ""
                }
            ],
            "total_question": 534,
            "summary": {
                "radio": {
                    "total_question": 492,
                    "total_score": 0
                },
                "multiple": {
                    "total_question": 0,
                    "total_score": 0
                },
                "fill": {
                    "total_question": 0,
                    "total_score": 0
                },
                "program": {
                    "total_question": 0,
                    "total_score": 0
                },
                "qanda": {
                    "total_question": 40,
                    "total_score": 0
                },
                "cloze": {
                    "total_question": 2,
                    "total_score": 0
                },
                "budingxiang": {
                    "total_question": 0,
                    "total_score": 0
                },
                "material": {
                    "total_question": 0,
                    "total_score": 0
                }
            },
            "title": " 系统设计与架构"
        },
        "pagination": {
            "curPage": 1,
            "pageSize": 1000,
            "total": 534,
            "hasNextPage": false
        },
        "totalOrder": [
            {
                "index": 1,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43229",
                "answer_type": 1
            },
            {
                "index": 2,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43230",
                "answer_type": 1
            },
            {
                "index": 3,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43307",
                "answer_type": 1
            },
            {
                "index": 4,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43537",
                "answer_type": 1
            },
            {
                "index": 5,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43751",
                "answer_type": 1
            },
            {
                "index": 6,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43775",
                "answer_type": 1
            },
            {
                "index": 7,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43776",
                "answer_type": 1
            },
            {
                "index": 8,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43777",
                "answer_type": 1
            },
            {
                "index": 9,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43779",
                "answer_type": 1
            },
            {
                "index": 10,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43781",
                "answer_type": 1
            },
            {
                "index": 11,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43782",
                "answer_type": 1
            },
            {
                "index": 12,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43783",
                "answer_type": 1
            },
            {
                "index": 13,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43784",
                "answer_type": 1
            },
            {
                "index": 14,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43785",
                "answer_type": 1
            },
            {
                "index": 15,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43787",
                "answer_type": 1
            },
            {
                "index": 16,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43788",
                "answer_type": 1
            },
            {
                "index": 17,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43789",
                "answer_type": 1
            },
            {
                "index": 18,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43790",
                "answer_type": 1
            },
            {
                "index": 19,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43792",
                "answer_type": 1
            },
            {
                "index": 20,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43794",
                "answer_type": 1
            },
            {
                "index": 21,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43795",
                "answer_type": 1
            },
            {
                "index": 22,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43796",
                "answer_type": 1
            },
            {
                "index": 23,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43797",
                "answer_type": 1
            },
            {
                "index": 24,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43798",
                "answer_type": 1
            },
            {
                "index": 25,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43837",
                "answer_type": 1
            },
            {
                "index": 26,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43838",
                "answer_type": 1
            },
            {
                "index": 27,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43839",
                "answer_type": 1
            },
            {
                "index": 28,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43840",
                "answer_type": 1
            },
            {
                "index": 29,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43841",
                "answer_type": 1
            },
            {
                "index": 30,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43842",
                "answer_type": 1
            },
            {
                "index": 31,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43843",
                "answer_type": 1
            },
            {
                "index": 32,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43844",
                "answer_type": 1
            },
            {
                "index": 33,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43845",
                "answer_type": 1
            },
            {
                "index": 34,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43846",
                "answer_type": 1
            },
            {
                "index": 35,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43847",
                "answer_type": 1
            },
            {
                "index": 36,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43848",
                "answer_type": 1
            },
            {
                "index": 37,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43849",
                "answer_type": 1
            },
            {
                "index": 38,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43850",
                "answer_type": 1
            },
            {
                "index": 39,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43865",
                "answer_type": 1
            },
            {
                "index": 40,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43866",
                "answer_type": 1
            },
            {
                "index": 41,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43867",
                "answer_type": 1
            },
            {
                "index": 42,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43875",
                "answer_type": 1
            },
            {
                "index": 43,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43876",
                "answer_type": 1
            },
            {
                "index": 44,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43877",
                "answer_type": 1
            },
            {
                "index": 45,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43878",
                "answer_type": 1
            },
            {
                "index": 46,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43879",
                "answer_type": 1
            },
            {
                "index": 47,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43881",
                "answer_type": 1
            },
            {
                "index": 48,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43882",
                "answer_type": 1
            },
            {
                "index": 49,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43885",
                "answer_type": 1
            },
            {
                "index": 50,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "43886",
                "answer_type": 1
            },
            {
                "index": 51,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46854",
                "answer_type": 1
            },
            {
                "index": 52,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46861",
                "answer_type": 1
            },
            {
                "index": 53,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46940",
                "answer_type": 1
            },
            {
                "index": 54,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46950",
                "answer_type": 1
            },
            {
                "index": 55,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46952",
                "answer_type": 1
            },
            {
                "index": 56,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46955",
                "answer_type": 1
            },
            {
                "index": 57,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46958",
                "answer_type": 1
            },
            {
                "index": 58,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46959",
                "answer_type": 1
            },
            {
                "index": 59,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46960",
                "answer_type": 1
            },
            {
                "index": 60,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46961",
                "answer_type": 1
            },
            {
                "index": 61,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46962",
                "answer_type": 1
            },
            {
                "index": 62,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46963",
                "answer_type": 1
            },
            {
                "index": 63,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46964",
                "answer_type": 1
            },
            {
                "index": 64,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46969",
                "answer_type": 1
            },
            {
                "index": 65,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46970",
                "answer_type": 1
            },
            {
                "index": 66,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "46972",
                "answer_type": 1
            },
            {
                "index": 67,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49867",
                "answer_type": 1
            },
            {
                "index": 68,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49868",
                "answer_type": 1
            },
            {
                "index": 69,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49869",
                "answer_type": 1
            },
            {
                "index": 70,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49870",
                "answer_type": 1
            },
            {
                "index": 71,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49871",
                "answer_type": 1
            },
            {
                "index": 72,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49872",
                "answer_type": 1
            },
            {
                "index": 73,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49873",
                "answer_type": 1
            },
            {
                "index": 74,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49874",
                "answer_type": 1
            },
            {
                "index": 75,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49875",
                "answer_type": 1
            },
            {
                "index": 76,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49876",
                "answer_type": 1
            },
            {
                "index": 77,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49880",
                "answer_type": 1
            },
            {
                "index": 78,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49883",
                "answer_type": 1
            },
            {
                "index": 79,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49884",
                "answer_type": 1
            },
            {
                "index": 80,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49894",
                "answer_type": 1
            },
            {
                "index": 81,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49895",
                "answer_type": 1
            },
            {
                "index": 82,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49896",
                "answer_type": 1
            },
            {
                "index": 83,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49934",
                "answer_type": 1
            },
            {
                "index": 84,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49935",
                "answer_type": 1
            },
            {
                "index": 85,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49936",
                "answer_type": 1
            },
            {
                "index": 86,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49937",
                "answer_type": 1
            },
            {
                "index": 87,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49938",
                "answer_type": 1
            },
            {
                "index": 88,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49942",
                "answer_type": 1
            },
            {
                "index": 89,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49944",
                "answer_type": 1
            },
            {
                "index": 90,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49947",
                "answer_type": 1
            },
            {
                "index": 91,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49948",
                "answer_type": 1
            },
            {
                "index": 92,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49949",
                "answer_type": 1
            },
            {
                "index": 93,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49950",
                "answer_type": 1
            },
            {
                "index": 94,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49951",
                "answer_type": 1
            },
            {
                "index": 95,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49954",
                "answer_type": 1
            },
            {
                "index": 96,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49956",
                "answer_type": 1
            },
            {
                "index": 97,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49957",
                "answer_type": 1
            },
            {
                "index": 98,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49958",
                "answer_type": 1
            },
            {
                "index": 99,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49959",
                "answer_type": 1
            },
            {
                "index": 100,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49960",
                "answer_type": 1
            },
            {
                "index": 101,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49969",
                "answer_type": 1
            },
            {
                "index": 102,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49970",
                "answer_type": 1
            },
            {
                "index": 103,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49971",
                "answer_type": 1
            },
            {
                "index": 104,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49972",
                "answer_type": 1
            },
            {
                "index": 105,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "49973",
                "answer_type": 1
            },
            {
                "index": 106,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50908",
                "answer_type": 1
            },
            {
                "index": 107,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50918",
                "answer_type": 1
            },
            {
                "index": 108,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50922",
                "answer_type": 1
            },
            {
                "index": 109,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50923",
                "answer_type": 1
            },
            {
                "index": 110,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50924",
                "answer_type": 1
            },
            {
                "index": 111,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50925",
                "answer_type": 1
            },
            {
                "index": 112,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50928",
                "answer_type": 1
            },
            {
                "index": 113,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50929",
                "answer_type": 1
            },
            {
                "index": 114,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50931",
                "answer_type": 1
            },
            {
                "index": 115,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50939",
                "answer_type": 1
            },
            {
                "index": 116,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50940",
                "answer_type": 1
            },
            {
                "index": 117,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50941",
                "answer_type": 1
            },
            {
                "index": 118,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50942",
                "answer_type": 1
            },
            {
                "index": 119,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "50943",
                "answer_type": 1
            },
            {
                "index": 120,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54219",
                "answer_type": 1
            },
            {
                "index": 121,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54236",
                "answer_type": 1
            },
            {
                "index": 122,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54237",
                "answer_type": 1
            },
            {
                "index": 123,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54238",
                "answer_type": 1
            },
            {
                "index": 124,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54239",
                "answer_type": 1
            },
            {
                "index": 125,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54240",
                "answer_type": 1
            },
            {
                "index": 126,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54241",
                "answer_type": 1
            },
            {
                "index": 127,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54242",
                "answer_type": 1
            },
            {
                "index": 128,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54250",
                "answer_type": 1
            },
            {
                "index": 129,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54288",
                "answer_type": 1
            },
            {
                "index": 130,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54298",
                "answer_type": 1
            },
            {
                "index": 131,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54308",
                "answer_type": 1
            },
            {
                "index": 132,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54309",
                "answer_type": 1
            },
            {
                "index": 133,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54330",
                "answer_type": 1
            },
            {
                "index": 134,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54331",
                "answer_type": 1
            },
            {
                "index": 135,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54332",
                "answer_type": 1
            },
            {
                "index": 136,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54333",
                "answer_type": 1
            },
            {
                "index": 137,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54334",
                "answer_type": 1
            },
            {
                "index": 138,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54336",
                "answer_type": 1
            },
            {
                "index": 139,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54338",
                "answer_type": 1
            },
            {
                "index": 140,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "54339",
                "answer_type": 1
            },
            {
                "index": 141,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63608",
                "answer_type": 1
            },
            {
                "index": 142,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63610",
                "answer_type": 1
            },
            {
                "index": 143,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63638",
                "answer_type": 1
            },
            {
                "index": 144,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63639",
                "answer_type": 1
            },
            {
                "index": 145,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63642",
                "answer_type": 1
            },
            {
                "index": 146,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63643",
                "answer_type": 1
            },
            {
                "index": 147,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63644",
                "answer_type": 1
            },
            {
                "index": 148,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63646",
                "answer_type": 1
            },
            {
                "index": 149,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63647",
                "answer_type": 1
            },
            {
                "index": 150,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63649",
                "answer_type": 1
            },
            {
                "index": 151,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63654",
                "answer_type": 1
            },
            {
                "index": 152,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63655",
                "answer_type": 1
            },
            {
                "index": 153,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63657",
                "answer_type": 1
            },
            {
                "index": 154,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63659",
                "answer_type": 1
            },
            {
                "index": 155,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63660",
                "answer_type": 1
            },
            {
                "index": 156,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63662",
                "answer_type": 1
            },
            {
                "index": 157,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63664",
                "answer_type": 1
            },
            {
                "index": 158,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63666",
                "answer_type": 1
            },
            {
                "index": 159,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63668",
                "answer_type": 1
            },
            {
                "index": 160,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63676",
                "answer_type": 1
            },
            {
                "index": 161,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63678",
                "answer_type": 1
            },
            {
                "index": 162,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63680",
                "answer_type": 1
            },
            {
                "index": 163,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63682",
                "answer_type": 1
            },
            {
                "index": 164,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "63683",
                "answer_type": 1
            },
            {
                "index": 165,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151207",
                "answer_type": 1
            },
            {
                "index": 166,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151208",
                "answer_type": 1
            },
            {
                "index": 167,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151209",
                "answer_type": 1
            },
            {
                "index": 168,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151210",
                "answer_type": 1
            },
            {
                "index": 169,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151211",
                "answer_type": 1
            },
            {
                "index": 170,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151212",
                "answer_type": 1
            },
            {
                "index": 171,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151222",
                "answer_type": 1
            },
            {
                "index": 172,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151223",
                "answer_type": 1
            },
            {
                "index": 173,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151224",
                "answer_type": 1
            },
            {
                "index": 174,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151225",
                "answer_type": 1
            },
            {
                "index": 175,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151226",
                "answer_type": 1
            },
            {
                "index": 176,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151227",
                "answer_type": 1
            },
            {
                "index": 177,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151229",
                "answer_type": 1
            },
            {
                "index": 178,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151230",
                "answer_type": 1
            },
            {
                "index": 179,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151231",
                "answer_type": 1
            },
            {
                "index": 180,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151232",
                "answer_type": 1
            },
            {
                "index": 181,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151234",
                "answer_type": 1
            },
            {
                "index": 182,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151240",
                "answer_type": 1
            },
            {
                "index": 183,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151241",
                "answer_type": 1
            },
            {
                "index": 184,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "151242",
                "answer_type": 1
            },
            {
                "index": 185,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159201",
                "answer_type": 1
            },
            {
                "index": 186,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159202",
                "answer_type": 1
            },
            {
                "index": 187,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159205",
                "answer_type": 1
            },
            {
                "index": 188,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159215",
                "answer_type": 1
            },
            {
                "index": 189,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159216",
                "answer_type": 1
            },
            {
                "index": 190,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159217",
                "answer_type": 1
            },
            {
                "index": 191,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159218",
                "answer_type": 1
            },
            {
                "index": 192,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159219",
                "answer_type": 1
            },
            {
                "index": 193,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159220",
                "answer_type": 1
            },
            {
                "index": 194,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159221",
                "answer_type": 1
            },
            {
                "index": 195,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159222",
                "answer_type": 1
            },
            {
                "index": 196,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159223",
                "answer_type": 1
            },
            {
                "index": 197,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159233",
                "answer_type": 1
            },
            {
                "index": 198,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159234",
                "answer_type": 1
            },
            {
                "index": 199,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159235",
                "answer_type": 1
            },
            {
                "index": 200,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159236",
                "answer_type": 1
            },
            {
                "index": 201,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159237",
                "answer_type": 1
            },
            {
                "index": 202,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159240",
                "answer_type": 1
            },
            {
                "index": 203,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159241",
                "answer_type": 1
            },
            {
                "index": 204,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "159242",
                "answer_type": 1
            },
            {
                "index": 205,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208409",
                "answer_type": 1
            },
            {
                "index": 206,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208431",
                "answer_type": 1
            },
            {
                "index": 207,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208432",
                "answer_type": 1
            },
            {
                "index": 208,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208433",
                "answer_type": 1
            },
            {
                "index": 209,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208434",
                "answer_type": 1
            },
            {
                "index": 210,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208435",
                "answer_type": 1
            },
            {
                "index": 211,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208436",
                "answer_type": 1
            },
            {
                "index": 212,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208442",
                "answer_type": 1
            },
            {
                "index": 213,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208443",
                "answer_type": 1
            },
            {
                "index": 214,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208444",
                "answer_type": 1
            },
            {
                "index": 215,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208445",
                "answer_type": 1
            },
            {
                "index": 216,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208446",
                "answer_type": 1
            },
            {
                "index": 217,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208447",
                "answer_type": 1
            },
            {
                "index": 218,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208448",
                "answer_type": 1
            },
            {
                "index": 219,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208449",
                "answer_type": 1
            },
            {
                "index": 220,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208450",
                "answer_type": 1
            },
            {
                "index": 221,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208451",
                "answer_type": 1
            },
            {
                "index": 222,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208452",
                "answer_type": 1
            },
            {
                "index": 223,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208453",
                "answer_type": 1
            },
            {
                "index": 224,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208454",
                "answer_type": 1
            },
            {
                "index": 225,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208455",
                "answer_type": 1
            },
            {
                "index": 226,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208456",
                "answer_type": 1
            },
            {
                "index": 227,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208484",
                "answer_type": 1
            },
            {
                "index": 228,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208485",
                "answer_type": 1
            },
            {
                "index": 229,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208499",
                "answer_type": 1
            },
            {
                "index": 230,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208500",
                "answer_type": 1
            },
            {
                "index": 231,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208503",
                "answer_type": 1
            },
            {
                "index": 232,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208504",
                "answer_type": 1
            },
            {
                "index": 233,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208508",
                "answer_type": 1
            },
            {
                "index": 234,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208509",
                "answer_type": 1
            },
            {
                "index": 235,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208510",
                "answer_type": 1
            },
            {
                "index": 236,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208511",
                "answer_type": 1
            },
            {
                "index": 237,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208512",
                "answer_type": 1
            },
            {
                "index": 238,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208513",
                "answer_type": 1
            },
            {
                "index": 239,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208514",
                "answer_type": 1
            },
            {
                "index": 240,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208515",
                "answer_type": 1
            },
            {
                "index": 241,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208516",
                "answer_type": 1
            },
            {
                "index": 242,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208517",
                "answer_type": 1
            },
            {
                "index": 243,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208518",
                "answer_type": 1
            },
            {
                "index": 244,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208519",
                "answer_type": 1
            },
            {
                "index": 245,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208520",
                "answer_type": 1
            },
            {
                "index": 246,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208521",
                "answer_type": 1
            },
            {
                "index": 247,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208522",
                "answer_type": 1
            },
            {
                "index": 248,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208523",
                "answer_type": 1
            },
            {
                "index": 249,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208524",
                "answer_type": 1
            },
            {
                "index": 250,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208525",
                "answer_type": 1
            },
            {
                "index": 251,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208526",
                "answer_type": 1
            },
            {
                "index": 252,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208527",
                "answer_type": 1
            },
            {
                "index": 253,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208528",
                "answer_type": 1
            },
            {
                "index": 254,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208529",
                "answer_type": 1
            },
            {
                "index": 255,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208530",
                "answer_type": 1
            },
            {
                "index": 256,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "208531",
                "answer_type": 1
            },
            {
                "index": 257,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "281331",
                "answer_type": 1
            },
            {
                "index": 258,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "281333",
                "answer_type": 1
            },
            {
                "index": 259,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281335",
                "answer_type": 1
            },
            {
                "index": 260,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "281336",
                "answer_type": 1
            },
            {
                "index": 261,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "281337",
                "answer_type": 1
            },
            {
                "index": 262,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284643",
                "answer_type": 1
            },
            {
                "index": 263,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284644",
                "answer_type": 1
            },
            {
                "index": 264,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284646",
                "answer_type": 1
            },
            {
                "index": 265,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284647",
                "answer_type": 1
            },
            {
                "index": 266,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284687",
                "answer_type": 1
            },
            {
                "index": 267,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284688",
                "answer_type": 1
            },
            {
                "index": 268,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284690",
                "answer_type": 1
            },
            {
                "index": 269,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "284691",
                "answer_type": 1
            },
            {
                "index": 270,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "284692",
                "answer_type": 1
            },
            {
                "index": 271,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303681",
                "answer_type": 1
            },
            {
                "index": 272,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "303682",
                "answer_type": 1
            },
            {
                "index": 273,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310842",
                "answer_type": 1
            },
            {
                "index": 274,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310843",
                "answer_type": 1
            },
            {
                "index": 275,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310857",
                "answer_type": 1
            },
            {
                "index": 276,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310858",
                "answer_type": 1
            },
            {
                "index": 277,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "310861",
                "answer_type": 1
            },
            {
                "index": 278,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310866",
                "answer_type": 1
            },
            {
                "index": 279,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310867",
                "answer_type": 1
            },
            {
                "index": 280,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310868",
                "answer_type": 1
            },
            {
                "index": 281,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310869",
                "answer_type": 1
            },
            {
                "index": 282,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310880",
                "answer_type": 1
            },
            {
                "index": 283,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310881",
                "answer_type": 1
            },
            {
                "index": 284,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "310882",
                "answer_type": 1
            },
            {
                "index": 285,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "310883",
                "answer_type": 1
            },
            {
                "index": 286,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310885",
                "answer_type": 1
            },
            {
                "index": 287,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310886",
                "answer_type": 1
            },
            {
                "index": 288,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "310887",
                "answer_type": 1
            },
            {
                "index": 289,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "310892",
                "answer_type": 1
            },
            {
                "index": 290,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310898",
                "answer_type": 1
            },
            {
                "index": 291,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310899",
                "answer_type": 1
            },
            {
                "index": 292,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310900",
                "answer_type": 1
            },
            {
                "index": 293,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310902",
                "answer_type": 1
            },
            {
                "index": 294,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310903",
                "answer_type": 1
            },
            {
                "index": 295,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310904",
                "answer_type": 1
            },
            {
                "index": 296,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310905",
                "answer_type": 1
            },
            {
                "index": 297,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310906",
                "answer_type": 1
            },
            {
                "index": 298,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "310907",
                "answer_type": 1
            },
            {
                "index": 299,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "310908",
                "answer_type": 1
            },
            {
                "index": 300,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "310909",
                "answer_type": 1
            },
            {
                "index": 301,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312911",
                "answer_type": 1
            },
            {
                "index": 302,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312912",
                "answer_type": 1
            },
            {
                "index": 303,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312913",
                "answer_type": 1
            },
            {
                "index": 304,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312919",
                "answer_type": 1
            },
            {
                "index": 305,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312920",
                "answer_type": 1
            },
            {
                "index": 306,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312924",
                "answer_type": 1
            },
            {
                "index": 307,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312926",
                "answer_type": 1
            },
            {
                "index": 308,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312927",
                "answer_type": 1
            },
            {
                "index": 309,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312935",
                "answer_type": 1
            },
            {
                "index": 310,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312936",
                "answer_type": 1
            },
            {
                "index": 311,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312937",
                "answer_type": 1
            },
            {
                "index": 312,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312940",
                "answer_type": 1
            },
            {
                "index": 313,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312941",
                "answer_type": 1
            },
            {
                "index": 314,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312943",
                "answer_type": 1
            },
            {
                "index": 315,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312944",
                "answer_type": 1
            },
            {
                "index": 316,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312945",
                "answer_type": 1
            },
            {
                "index": 317,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312946",
                "answer_type": 1
            },
            {
                "index": 318,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312947",
                "answer_type": 1
            },
            {
                "index": 319,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312948",
                "answer_type": 1
            },
            {
                "index": 320,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312950",
                "answer_type": 1
            },
            {
                "index": 321,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312951",
                "answer_type": 1
            },
            {
                "index": 322,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312955",
                "answer_type": 1
            },
            {
                "index": 323,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312957",
                "answer_type": 1
            },
            {
                "index": 324,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312963",
                "answer_type": 1
            },
            {
                "index": 325,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312964",
                "answer_type": 1
            },
            {
                "index": 326,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "312965",
                "answer_type": 1
            },
            {
                "index": 327,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312967",
                "answer_type": 1
            },
            {
                "index": 328,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312969",
                "answer_type": 1
            },
            {
                "index": 329,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312971",
                "answer_type": 1
            },
            {
                "index": 330,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312972",
                "answer_type": 1
            },
            {
                "index": 331,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312979",
                "answer_type": 1
            },
            {
                "index": 332,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "312980",
                "answer_type": 1
            },
            {
                "index": 333,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315951",
                "answer_type": 1
            },
            {
                "index": 334,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315952",
                "answer_type": 1
            },
            {
                "index": 335,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315954",
                "answer_type": 1
            },
            {
                "index": 336,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315955",
                "answer_type": 1
            },
            {
                "index": 337,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "315956",
                "answer_type": 1
            },
            {
                "index": 338,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315958",
                "answer_type": 1
            },
            {
                "index": 339,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315959",
                "answer_type": 1
            },
            {
                "index": 340,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315961",
                "answer_type": 1
            },
            {
                "index": 341,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315962",
                "answer_type": 1
            },
            {
                "index": 342,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315964",
                "answer_type": 1
            },
            {
                "index": 343,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315965",
                "answer_type": 1
            },
            {
                "index": 344,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "315966",
                "answer_type": 1
            },
            {
                "index": 345,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315971",
                "answer_type": 1
            },
            {
                "index": 346,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315972",
                "answer_type": 1
            },
            {
                "index": 347,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315974",
                "answer_type": 1
            },
            {
                "index": 348,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315975",
                "answer_type": 1
            },
            {
                "index": 349,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315977",
                "answer_type": 1
            },
            {
                "index": 350,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "315978",
                "answer_type": 1
            },
            {
                "index": 351,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "348858",
                "answer_type": 1
            },
            {
                "index": 352,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348870",
                "answer_type": 1
            },
            {
                "index": 353,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348871",
                "answer_type": 1
            },
            {
                "index": 354,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348873",
                "answer_type": 1
            },
            {
                "index": 355,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348874",
                "answer_type": 1
            },
            {
                "index": 356,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348876",
                "answer_type": 1
            },
            {
                "index": 357,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348877",
                "answer_type": 1
            },
            {
                "index": 358,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348880",
                "answer_type": 1
            },
            {
                "index": 359,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348881",
                "answer_type": 1
            },
            {
                "index": 360,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348886",
                "answer_type": 1
            },
            {
                "index": 361,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348887",
                "answer_type": 1
            },
            {
                "index": 362,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348888",
                "answer_type": 1
            },
            {
                "index": 363,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348889",
                "answer_type": 1
            },
            {
                "index": 364,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348890",
                "answer_type": 1
            },
            {
                "index": 365,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348891",
                "answer_type": 1
            },
            {
                "index": 366,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348893",
                "answer_type": 1
            },
            {
                "index": 367,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348894",
                "answer_type": 1
            },
            {
                "index": 368,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348896",
                "answer_type": 1
            },
            {
                "index": 369,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348897",
                "answer_type": 1
            },
            {
                "index": 370,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348898",
                "answer_type": 1
            },
            {
                "index": 371,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348900",
                "answer_type": 1
            },
            {
                "index": 372,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348901",
                "answer_type": 1
            },
            {
                "index": 373,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348903",
                "answer_type": 1
            },
            {
                "index": 374,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348904",
                "answer_type": 1
            },
            {
                "index": 375,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348905",
                "answer_type": 1
            },
            {
                "index": 376,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348907",
                "answer_type": 1
            },
            {
                "index": 377,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348908",
                "answer_type": 1
            },
            {
                "index": 378,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348909",
                "answer_type": 1
            },
            {
                "index": 379,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348910",
                "answer_type": 1
            },
            {
                "index": 380,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348912",
                "answer_type": 1
            },
            {
                "index": 381,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348913",
                "answer_type": 1
            },
            {
                "index": 382,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348915",
                "answer_type": 1
            },
            {
                "index": 383,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348916",
                "answer_type": 1
            },
            {
                "index": 384,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348918",
                "answer_type": 1
            },
            {
                "index": 385,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348919",
                "answer_type": 1
            },
            {
                "index": 386,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348921",
                "answer_type": 1
            },
            {
                "index": 387,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "348922",
                "answer_type": 1
            },
            {
                "index": 388,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350337",
                "answer_type": 1
            },
            {
                "index": 389,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350338",
                "answer_type": 1
            },
            {
                "index": 390,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "350339",
                "answer_type": 1
            },
            {
                "index": 391,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "350340",
                "answer_type": 1
            },
            {
                "index": 392,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350342",
                "answer_type": 1
            },
            {
                "index": 393,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350343",
                "answer_type": 1
            },
            {
                "index": 394,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350345",
                "answer_type": 1
            },
            {
                "index": 395,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350346",
                "answer_type": 1
            },
            {
                "index": 396,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "350347",
                "answer_type": 1
            },
            {
                "index": 397,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350349",
                "answer_type": 1
            },
            {
                "index": 398,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350350",
                "answer_type": 1
            },
            {
                "index": 399,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350352",
                "answer_type": 1
            },
            {
                "index": 400,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350353",
                "answer_type": 1
            },
            {
                "index": 401,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350354",
                "answer_type": 1
            },
            {
                "index": 402,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350355",
                "answer_type": 1
            },
            {
                "index": 403,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350356",
                "answer_type": 1
            },
            {
                "index": 404,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350357",
                "answer_type": 1
            },
            {
                "index": 405,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350359",
                "answer_type": 1
            },
            {
                "index": 406,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "350360",
                "answer_type": 1
            },
            {
                "index": 407,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352298",
                "answer_type": 1
            },
            {
                "index": 408,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352299",
                "answer_type": 1
            },
            {
                "index": 409,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352300",
                "answer_type": 1
            },
            {
                "index": 410,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352301",
                "answer_type": 1
            },
            {
                "index": 411,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352302",
                "answer_type": 1
            },
            {
                "index": 412,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352304",
                "answer_type": 1
            },
            {
                "index": 413,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352305",
                "answer_type": 1
            },
            {
                "index": 414,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352306",
                "answer_type": 1
            },
            {
                "index": 415,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352307",
                "answer_type": 1
            },
            {
                "index": 416,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352309",
                "answer_type": 1
            },
            {
                "index": 417,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352310",
                "answer_type": 1
            },
            {
                "index": 418,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352311",
                "answer_type": 1
            },
            {
                "index": 419,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352312",
                "answer_type": 1
            },
            {
                "index": 420,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352314",
                "answer_type": 1
            },
            {
                "index": 421,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352315",
                "answer_type": 1
            },
            {
                "index": 422,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352316",
                "answer_type": 1
            },
            {
                "index": 423,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352317",
                "answer_type": 1
            },
            {
                "index": 424,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352318",
                "answer_type": 1
            },
            {
                "index": 425,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352319",
                "answer_type": 1
            },
            {
                "index": 426,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352384",
                "answer_type": 1
            },
            {
                "index": 427,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352385",
                "answer_type": 1
            },
            {
                "index": 428,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352386",
                "answer_type": 1
            },
            {
                "index": 429,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352387",
                "answer_type": 1
            },
            {
                "index": 430,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352388",
                "answer_type": 1
            },
            {
                "index": 431,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352389",
                "answer_type": 1
            },
            {
                "index": 432,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352402",
                "answer_type": 1
            },
            {
                "index": 433,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352403",
                "answer_type": 1
            },
            {
                "index": 434,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352404",
                "answer_type": 1
            },
            {
                "index": 435,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352406",
                "answer_type": 1
            },
            {
                "index": 436,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352407",
                "answer_type": 1
            },
            {
                "index": 437,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352408",
                "answer_type": 1
            },
            {
                "index": 438,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352409",
                "answer_type": 1
            },
            {
                "index": 439,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352411",
                "answer_type": 1
            },
            {
                "index": 440,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352412",
                "answer_type": 1
            },
            {
                "index": 441,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352413",
                "answer_type": 1
            },
            {
                "index": 442,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352414",
                "answer_type": 1
            },
            {
                "index": 443,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352416",
                "answer_type": 1
            },
            {
                "index": 444,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352417",
                "answer_type": 1
            },
            {
                "index": 445,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352418",
                "answer_type": 1
            },
            {
                "index": 446,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352419",
                "answer_type": 1
            },
            {
                "index": 447,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352421",
                "answer_type": 1
            },
            {
                "index": 448,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352422",
                "answer_type": 1
            },
            {
                "index": 449,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352423",
                "answer_type": 1
            },
            {
                "index": 450,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352425",
                "answer_type": 1
            },
            {
                "index": 451,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352426",
                "answer_type": 1
            },
            {
                "index": 452,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "352427",
                "answer_type": 1
            },
            {
                "index": 453,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "352428",
                "answer_type": 1
            },
            {
                "index": 454,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356111",
                "answer_type": 1
            },
            {
                "index": 455,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356112",
                "answer_type": 1
            },
            {
                "index": 456,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356116",
                "answer_type": 1
            },
            {
                "index": 457,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356117",
                "answer_type": 1
            },
            {
                "index": 458,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356118",
                "answer_type": 1
            },
            {
                "index": 459,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356119",
                "answer_type": 1
            },
            {
                "index": 460,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356120",
                "answer_type": 1
            },
            {
                "index": 461,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356121",
                "answer_type": 1
            },
            {
                "index": 462,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356122",
                "answer_type": 1
            },
            {
                "index": 463,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356123",
                "answer_type": 1
            },
            {
                "index": 464,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356124",
                "answer_type": 1
            },
            {
                "index": 465,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356125",
                "answer_type": 1
            },
            {
                "index": 466,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356126",
                "answer_type": 1
            },
            {
                "index": 467,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356196",
                "answer_type": 1
            },
            {
                "index": 468,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356219",
                "answer_type": 1
            },
            {
                "index": 469,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356223",
                "answer_type": 1
            },
            {
                "index": 470,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356224",
                "answer_type": 1
            },
            {
                "index": 471,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356225",
                "answer_type": 1
            },
            {
                "index": 472,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356226",
                "answer_type": 1
            },
            {
                "index": 473,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356227",
                "answer_type": 1
            },
            {
                "index": 474,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356233",
                "answer_type": 1
            },
            {
                "index": 475,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356234",
                "answer_type": 1
            },
            {
                "index": 476,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356236",
                "answer_type": 1
            },
            {
                "index": 477,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356237",
                "answer_type": 1
            },
            {
                "index": 478,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356239",
                "answer_type": 1
            },
            {
                "index": 479,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356240",
                "answer_type": 1
            },
            {
                "index": 480,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356242",
                "answer_type": 1
            },
            {
                "index": 481,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356243",
                "answer_type": 1
            },
            {
                "index": 482,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356244",
                "answer_type": 1
            },
            {
                "index": 483,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356245",
                "answer_type": 1
            },
            {
                "index": 484,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356247",
                "answer_type": 1
            },
            {
                "index": 485,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356248",
                "answer_type": 1
            },
            {
                "index": 486,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356250",
                "answer_type": 1
            },
            {
                "index": 487,
                "question_type": "9",
                "belong_page": 1,
                "question_id": "356251",
                "answer_type": 1
            },
            {
                "index": 488,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356252",
                "answer_type": 1
            },
            {
                "index": 489,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356253",
                "answer_type": 1
            },
            {
                "index": 490,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356254",
                "answer_type": 1
            },
            {
                "index": 491,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356258",
                "answer_type": 1
            },
            {
                "index": 492,
                "question_type": "1",
                "belong_page": 1,
                "question_id": "356466",
                "answer_type": 1
            },
            {
                "index": 493,
                "question_type": "8",
                "belong_page": 1,
                "question_id": "356114",
                "answer_type": 1
            },
            {
                "index": 494,
                "question_type": "8",
                "belong_page": 1,
                "question_id": "356115",
                "answer_type": 1
            },
            {
                "index": 495,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43727",
                "answer_type": 5
            },
            {
                "index": 496,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43730",
                "answer_type": 5
            },
            {
                "index": 497,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43731",
                "answer_type": 5
            },
            {
                "index": 498,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43733",
                "answer_type": 5
            },
            {
                "index": 499,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43815",
                "answer_type": 5
            },
            {
                "index": 500,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43816",
                "answer_type": 5
            },
            {
                "index": 501,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43817",
                "answer_type": 5
            },
            {
                "index": 502,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "43818",
                "answer_type": 5
            },
            {
                "index": 503,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "45917",
                "answer_type": 5
            },
            {
                "index": 504,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "45920",
                "answer_type": 5
            },
            {
                "index": 505,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "45921",
                "answer_type": 5
            },
            {
                "index": 506,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "45923",
                "answer_type": 5
            },
            {
                "index": 507,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "45950",
                "answer_type": 5
            },
            {
                "index": 508,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "45952",
                "answer_type": 5
            },
            {
                "index": 509,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "54272",
                "answer_type": 5
            },
            {
                "index": 510,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "54273",
                "answer_type": 5
            },
            {
                "index": 511,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "54354",
                "answer_type": 5
            },
            {
                "index": 512,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "54356",
                "answer_type": 5
            },
            {
                "index": 513,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "54357",
                "answer_type": 5
            },
            {
                "index": 514,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "54358",
                "answer_type": 5
            },
            {
                "index": 515,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "54359",
                "answer_type": 5
            },
            {
                "index": 516,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "63698",
                "answer_type": 5
            },
            {
                "index": 517,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "63704",
                "answer_type": 5
            },
            {
                "index": 518,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303724",
                "answer_type": 5
            },
            {
                "index": 519,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303725",
                "answer_type": 5
            },
            {
                "index": 520,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303733",
                "answer_type": 5
            },
            {
                "index": 521,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303734",
                "answer_type": 5
            },
            {
                "index": 522,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303735",
                "answer_type": 5
            },
            {
                "index": 523,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303742",
                "answer_type": 5
            },
            {
                "index": 524,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303743",
                "answer_type": 5
            },
            {
                "index": 525,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303744",
                "answer_type": 5
            },
            {
                "index": 526,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303755",
                "answer_type": 5
            },
            {
                "index": 527,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303756",
                "answer_type": 5
            },
            {
                "index": 528,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "303757",
                "answer_type": 5
            },
            {
                "index": 529,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "315995",
                "answer_type": 5
            },
            {
                "index": 530,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "315996",
                "answer_type": 5
            },
            {
                "index": 531,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "316006",
                "answer_type": 5
            },
            {
                "index": 532,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "316007",
                "answer_type": 5
            },
            {
                "index": 533,
                "question_type": "14",
                "belong_page": 1,
                "question_id": "316008",
                "answer_type": 5
            },
            {
                "index": 534,
                "question_type": "5",
                "belong_page": 1,
                "question_id": "348854",
                "answer_type": 5
            }
        ],
        "progress": []
    }
}
