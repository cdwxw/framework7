{
    "msg": "成功",
    "status": 0,
    "data": {
        "data": {
            "examine": {
                "examine_id": 12018,
                "answer_id": "3940059",
                "title": "2019年11月系统架构设计师上午题",
                "len_time": 0,
                "total_score": "75",
                "get_score": "0",
                "total_question": 75,
                "proposal": "",
                "proposalList": [
                    {
                        "proposal": "",
                        "comment_time": "0",
                        "log_id": "8588702"
                    }
                ],
                "platform_id": "2",
                "submit_limit_num": "0",
                "version_id": "0",
                "version_year": "0",
                "mark_question_ids": []
            },
            "question": [
                {
                    "every_score": "1",
                    "rank": "1",
                    "correlation_time": "1666605898",
                    "question_id": "302367",
                    "difficulty_id": "2",
                    "question_title": "<p>前驱图(Precedence Graph)是一个有向无环图，记为：→={(Pi,Pj) Pi must complete before Pj may start}。假设系统中进程P={P1,P2,P3,P4,P5,P6,P7,P8}，且进程的前驱图如下：</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210701/1625139346708116.jpg\" title=\"1625139346708116.jpg\" alt=\"1.jpg\"/></p><p>那么，该前驱图可记为 （1） 。</p>",
                    "option": [
                        " → = {(P1,P2),(P1,P3),(P1,P4),(P2,P5),(P3,P5),(P4,P7),(P5,P6),(P6,P7),(P6,P8), (P7,P8)} ",
                        " → = {(P1,P2),(P3,P1),(P4,P1),(P5,P2),(P5,P3),(P6,P4),(P7,P5),(P7,P6),(P6,P8), (P8,P7)} ",
                        " → = {(P1,P2),(P1,P3),(P1,P4),(P2,P5),(P3,P6),(P4,P7),(P5,P6),(P6,P7),(P6,P8), (P7,P8)} ",
                        " → = {(P1,P2),(P1,P3),(P2,P3),(P2,P5),(P3,P6),(P3,P4),(P4,P7),(P5,P6),(P6,P7), (P6,P8),(P7,P8)} "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>(Pi,Pj)表示前驱图的一个进程之间的逻辑关系，该图一共有11个逻辑关系。记为：→={(P1,P2), (P1,P3), (P2,P3), (P2,P5), (P3,P6), (P3,P4), (P4,P7), (P5,P6), (P6,P7), (P6,P8), (P7, P8)}</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302367",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625139418",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 1,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "2",
                    "correlation_time": "1666605898",
                    "question_id": "302369",
                    "difficulty_id": "4",
                    "question_title": "<p>进程P有8个页面，页号分别为0~7，页面大小为4K，假设系统给进程P分配了4个存储块，进程P的页面变换表如下所示。表中状态位等于1和0分别表示页面在内存和不在内存。若进程P要访问的逻辑地址为十六进制5148H，则该地址经过变换后，其物理地址应为十六进制 （2） ；如果进程P要访问的页面6不在内存，那么应该淘汰页号为 （3） 的页面。<br/></p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210701/1625139457694867.jpg\" title=\"1625139457694867.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "option": [
                        "3148H",
                        "5148H",
                        "7148H",
                        "9148H"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>4K=2^12B，也就是页面大小是2^12B，这需要有12位二进制数表示，这12位二进制的数也是页内地址。逻辑地址为十六进制5148H，其中的148可以分别用4位二进制的数表示，这里一共需要12位二进制的数。</p><p>与页内地址的12位正好对应。而逻辑地址是由页号+页内地址组成的，既然148是页内地址，剩下的5就表示页号了。页号与页帧号的对应关系查表可得。</p><p>淘汰页面首先考虑不在内存的页面（状态位），如果都在内存则在看访问位为0的页面，根据局部性原理选择不经常访问的页面。如果所有页面都会被访问到，最后再看修改位为0的页面，选择没有被修改过的页面淘汰，避免数据不一致的问题。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302368",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1625139504",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 2,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "3",
                    "correlation_time": "1666605898",
                    "question_id": "302370",
                    "difficulty_id": "4",
                    "question_title": "<p>进程P有8个页面，页号分别为0~7，页面大小为4K，假设系统给进程P分配了4个存储块，进程P的页面变换表如下所示。表中状态位等于1和0分别表示页面在内存和不在内存。若进程P要访问的逻辑地址为十六进制5148H，则该地址经过变换后，其物理地址应为十六进制 （2） ；如果进程P要访问的页面6不在内存，那么应该淘汰页号为 （3） 的页面。<br/></p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210701/1625139457694867.jpg\" title=\"1625139457694867.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "option": [
                        "1",
                        "2",
                        "5",
                        "9"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>4K=2^12B，也就是页面大小是2^12B，这需要有12位二进制数表示，这12位二进制的数也是页内地址。逻辑地址为十六进制5148H，其中的148可以分别用4位二进制的数表示，这里一共需要12位二进制的数。</p><p>与页内地址的12位正好对应。而逻辑地址是由页号+页内地址组成的，既然148是页内地址，剩下的5就表示页号了。页号与页帧号的对应关系查表可得。</p><p>淘汰页面首先考虑不在内存的页面（状态位），如果都在内存则在看访问位为0的页面，根据局部性原理选择不经常访问的页面。如果所有页面都会被访问到，最后再看修改位为0的页面，选择没有被修改过的页面淘汰，避免数据不一致的问题。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302368",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1625139504",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 3,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "4",
                    "correlation_time": "1666605898",
                    "question_id": "302371",
                    "difficulty_id": "2",
                    "question_title": "<p>在网络操作系统环境中，若用户UserA的文件或文件夹被共享后，则（4） 。</p>",
                    "option": [
                        " UserA的安全性与未共享时相比将会有所提高 ",
                        " UserA的安全性与未共享时相比将会有所下降 ",
                        " UserA的可靠性与未共享时相比将会有所提高 ",
                        " UserA的方便性与未共享时相比将会有所下降 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在网络操作系统环境中，若 UserA的文件或文件夹被共享后，则其安全性与未共享时相比将会有所下降，这是因为访问 UserA 的计算机或网络的人可能会读取、复制或更改共享文件夹中的文件。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302371",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625139540",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 4,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "5",
                    "correlation_time": "1666605898",
                    "question_id": "302372",
                    "difficulty_id": "3",
                    "question_title": "<p>数据库的安全机制中，通过提供 （5） 供第三方开发人员调用进行数据更新，从而保证数据库的关系模式不被第三方所获取。<span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        " 索引 ",
                        " 视图 ",
                        " 存储过程 ",
                        " 触发器 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>存储过程(Stored Procedure)是在大型数据库系统中，一组为了完成特定功能的SQL语句集，它存储在数据库中，一次编译后永久有效，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。</p><p>存储过程是数据库所提供的一种数据库对象，通过存储过程定 义一段代码，提供给应用程序调用来执行。 从安全性的角度考虑，更新数据时，通过提供存储过程让第三方调用，将需要更新的数据传入存储过程，而在存储过程内部用代码分别对需要的多个表进行更新，从而避免了向第三方提供系统的表结构，保证了系统的数据安全。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302372",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625139587",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 5,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "6",
                    "correlation_time": "1666605898",
                    "question_id": "302374",
                    "difficulty_id": "3",
                    "question_title": "给出关系R(U,F)，U={A,B,C,D,E}，F={A→BC,B→D,D→E}。以下关于F说法正确的是 （6） 。若将关系R分解为ρ={R1(U1,F1)，R2(U2,F2)}，其中：U1={A,B,C}、U2={B,D,E}，则分解ρ （7） 。",
                    "option": [
                        "F蕴涵A→B、A→C，但F不存在传递依赖",
                        "F蕴涵E→A、A→C，故F存在传递依赖",
                        "F蕴涵A→D、E→A、A→C，但F不存在传递依赖",
                        "F蕴涵A→D、A→E、B→E，故F存在传递依赖"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>根据Armstrong公理的传递律，可以判断出F蕴涵A→D、A→E、B→E，故F存在传递依赖。</p><p>U1∩U2=B，B可以唯一确定U2的D、E。因此分解ρ是无损连接。</p><p>U1蕴含A→BC，U2蕴含B→D,D→E。因此该分解也保持了函数依赖。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302373",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1625139667",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 6,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "7",
                    "correlation_time": "1666605898",
                    "question_id": "302375",
                    "difficulty_id": "3",
                    "question_title": "给出关系R(U,F)，U={A,B,C,D,E}，F={A→BC,B→D,D→E}。以下关于F说法正确的是 （6） 。若将关系R分解为ρ={R1(U1,F1)，R2(U2,F2)}，其中：U1={A,B,C}、U2={B,D,E}，则分解ρ （7） 。",
                    "option": [
                        "无损连接并保持函数依赖",
                        "无损连接但不保持函数依赖",
                        "有损连接并保持函数依赖",
                        "有损连接但不保持函数依赖"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>根据Armstrong公理的传递律，可以判断出F蕴涵A→D、A→E、B→E，故F存在传递依赖。</p><p>U1∩U2=B，B可以唯一确定U2的D、E。因此分解ρ是无损连接。</p><p>U1蕴含A→BC，U2蕴含B→D,D→E。因此该分解也保持了函数依赖。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302373",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1625139668",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 7,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "8",
                    "correlation_time": "1666605898",
                    "question_id": "302376",
                    "difficulty_id": "3",
                    "question_title": "分布式数据库系统除了包含集中式数据库系统的模式结构之外，还增加了几个模式级别，其中 （8）定义分布式数据库中数据的整体逻辑结构，使得数据使用方便，如同没有分布一样。",
                    "option": [
                        "分片模式",
                        "全局外模式",
                        "分布模式",
                        "全局概念模式"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在分布式数据库中，局部DBMS中的内模式与概念模式与集中数据库是完全一致的，不同之处在于新增的全局DBMS，而整个全局DBMS，可以看作是相对于局部概念模式的外模式。由于外模式部分有一系列的分布模式、分片模式、全局概念模式和全局外模式，以及多级映射使得用户在使用分布式数据库时，可以使用集中式数据库同样的方式。</p><p>（1）全局外模式。全局外模式是全局应用的用户视图，是全局概念模式的子集，该层直接与用户（或应用程序）交互。</p><p>（2）全局概念模式。全局概念模式定义分布式数据库中数据的整体逻辑结构，数据就如同根本没有分布一样，可用传统的集中式数据库中所采用的方法进行定义。</p><p>（3）分片模式。在某些情况下，需要将一个关系模式分解成为几个数据片，分片模式正是用于完成此项工作的。</p><p>（4）分布模式。分布式数据库的本质特性就是数据分布在不同的物理位置。分布模式的主要职责是定义数据片段（即分片模式的处理结果）的存放节点。</p><p>（5）局部概念模式。局部概念模式是局部数据库的概念模式。</p><p>（6）局部内模式。局部内模式是局部数据库的内模式。</p><br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210701/1625139696325144.jpg\" title=\"1625139696325144.jpg\" alt=\"1.jpg\"/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302376",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625139699",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 8,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "9",
                    "correlation_time": "1666605898",
                    "question_id": "302378",
                    "difficulty_id": "3",
                    "question_title": "安全攸关系统在软件需求分析阶段，应提出安全性需求。软件安全性需求是指通过约束软件的行为，使其不会出现 （9）。软件安全需求的获取是根据己知的 （10） ，如软件危害条件等以及其他一些类似的系统数据和通用惯例，完成通用软件安全性需求的裁剪和特定软件安全性需求的获取工作。",
                    "option": [
                        "不可接受的系统安全的行为",
                        "有可能影响系统可靠性的行为",
                        "不可接受的违反系统安全的行为",
                        "系统不安全的事故"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>生命攸关系统是指一个系统的失效或误动作会产生诸如：人员重伤或死亡，或者设备的严重毁损，或者环境的危害。</p><p>通常在开发安全做关软件时，需求分析阶段必须考虑安全性需求，使其不会出现不可接受的违反系统安全的行为需求。</p><p>软件安全需求的获取是根据已知的系统信息，如：软件危害条件等以及其他一些类似的系统数据和通用惯例，完成通用软件安全性需求的裁剪和特定软件安全性需求的获取工作。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302377",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1625139782",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 9,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "10",
                    "correlation_time": "1666605898",
                    "question_id": "302379",
                    "difficulty_id": "3",
                    "question_title": "安全攸关系统在软件需求分析阶段，应提出安全性需求。软件安全性需求是指通过约束软件的行为，使其不会出现 （9）。软件安全需求的获取是根据己知的 （10） ，如软件危害条件等以及其他一些类似的系统数据和通用惯例，完成通用软件安全性需求的裁剪和特定软件安全性需求的获取工作。",
                    "option": [
                        "系统信息",
                        "系统属性",
                        "软件属性",
                        "代码信息"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>生命攸关系统是指一个系统的失效或误动作会产生诸如：人员重伤或死亡，或者设备的严重毁损，或者环境的危害。</p><p>通常在开发安全做关软件时，需求分析阶段必须考虑安全性需求，使其不会出现不可接受的违反系统安全的行为需求。</p><p>软件安全需求的获取是根据已知的系统信息，如：软件危害条件等以及其他一些类似的系统数据和通用惯例，完成通用软件安全性需求的裁剪和特定软件安全性需求的获取工作。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302377",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1625139782",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 10,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "11",
                    "correlation_time": "1666605898",
                    "question_id": "302380",
                    "difficulty_id": "3",
                    "question_title": "某嵌入式实时操作系统采用了某种调度算法，当某任务执行接近自己的截止期(deadline)时，调度算法将把该任务的优先级调整到系统最高优先级，让该任务获取CPU资源运行。请问此类调度算法是 （11） 。",
                    "option": [
                        "优先级调度算法",
                        "抢占式优先级调度算法",
                        "最晚截止期调度算法",
                        "最早截止期调度算法"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在嵌入式系统的应用开发中，采用嵌入式实时操作系统（简称RTOS）能够支持多任务，使得程序开发更加容易，便于维护，同时能够提高系统的稳定性和可靠性。</p><p>嵌入式实时操作系统存在多种调度算法：</p><p>（1）优先级调度算法</p><p>系统为每个任务分配一个相对固定的优先顺序，调度程序根据任务优先级的高低程度，按时间顺序进行高优先级任务优先被调度。</p><p>（2）抢占式优先级调度算法</p><p>在优先级调度算法的基础上，允许高优先级任务抢占低优先级任务而运行。</p><p>（3）最晚截止期调度算法</p><p>是指系统按每个任务的最接近其截止期末端的时间进行调度，系统根据当前任务截止期的情况，选取最接近截止期的任务运行。</p><p>（4）最早截止期调度算法</p><p>是指系统按每个任务的截止期时间，选取最早到截止期的头端时间的任务进行调度。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302380",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625139836",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 11,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "12",
                    "correlation_time": "1666605898",
                    "question_id": "302381",
                    "difficulty_id": "4",
                    "question_title": "混成系统是嵌入式实时系统的一种重要的子类。以下关于混成系统的说法中，正确的是 （12） 。",
                    "option": [
                        "混成系统一般由离散分离组件并行组成，组件之间的行为由计算模型进行控制",
                        "混成系统一般由离散分离组件和连续组件并行或串行组成，组件之间的行为由计算模型进行控制",
                        "混成系统一般由连续组件串行组成，组件之间的行为由计算模型进行控制",
                        "混成系统一般由离散分离组件和连续组件并行或串行组成，组件之间的行为由同步/异步事件进行管理"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>混成系统在工业控制和国防等领域大量存在。同时，现代计算机技术的高速发展和普及应用，为系统的模型化、优化控制和决策问题提供了强有力的技术支持。</p><p>混成系统一般由离散分离组件和连续组件并行或串行组成，组件之间的行为由计算模型进行控制。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302381",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625139871",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 12,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "13",
                    "correlation_time": "1666605898",
                    "question_id": "302382",
                    "difficulty_id": "4",
                    "question_title": "TCP端口号的作用是 （13） 。",
                    "option": [
                        "流量控制",
                        "ACL过滤",
                        "建立连接",
                        "对应用层进程的寻址"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "网络中的计算机是通过IP地址来代表其身份的，但是它只能表示某台特定的计算机，而这台计算机上可能同时提供诸如Web服务、数据库服务等多种服务，此时可以使用端口号来区分相同计算机上的不同服务。 起到对应用层进程的寻址的作用。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302382",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625139898",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 13,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "14",
                    "correlation_time": "1666605898",
                    "question_id": "302383",
                    "difficulty_id": "4",
                    "question_title": "Web页面访问过程中，在浏览器发出HTTP请求报文之前不可能执行的操作是 （14） 。",
                    "option": [
                        "查询本机DNS缓存，获取主机名对应的IP地址",
                        "发起DNS请求，获取主机名对应的IP地址",
                        "发送请求信息，获取将要访问的Web应用",
                        "发送ARP协议广播数据包，请求网关的MAC地址"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一个Web页面访问的过程如下：</p><p>（1）浏览器首先查询本机的系统，获取主机名对应的IP地址。</p><p>（2）若本机查询不到相应的IP地址，则会发起DNS请求，获取主机名对应的IP地址。</p><p>（3）使用查询到的IP地址，直接访问目标服务器。</p><p>（4）浏览器发送HTTP请求。</p><p>（5）服务器从请求信息中获得客户机想访问的主机名、Web应用、Web资源。</p><p>（6）服务器读取相应的主机下的Web应用，Web资源。并用读取到的Web资源数据，创建并回送一个HTTP响应。</p><p>（7）客户机浏览器解析回送的资源，并显示结果。</p><p>不难看出在浏览器发出HTTP请求报文之前是不可能发送请求信息，获取将要访问的Web应用。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302383",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625139947",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 14,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "15",
                    "correlation_time": "1666605898",
                    "question_id": "302384",
                    "difficulty_id": "4",
                    "question_title": "以下关于DHCP服务的说法中，正确的是 （15）。",
                    "option": [
                        "在一个园区网中可以存在多台DHCP服务器",
                        "默认情况下，客户端要使用DHCP服务需指定DHCP服务器地址",
                        "默认情况下，DHCP客户端选择本网段内的IP地址作为本地地址",
                        "在DHCP服务器上，DHCP服务功能默认开启"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）通常被应用在大型的局域网络环境中，主要作用是集中的管理、分配IP地址，使网络环境中的主机动态的获得IP地址、网关地址、DNS服务器地址等信息，并能够提升地址的使用率。</p><p>DHCP协议采用UDP作为传输协议，客户端发送广播消息到服务器的68号端口，服务器回应广播消息给客户端的67号端口。</p><p>DHCP客户端从DHCP服务器获取IP地址，主要通过：发现、提供、选择、确认，四个阶段进行。</p><p>如果网络中有多个DHCP服务器发送OFFER报文，客户端只根据第一个收到的OFFER报文，返回REQUEST报文。</p><p>在网络范围内可能存在多个DHCP服务器，各自负责不同的网段，也可能由同一个DHCP服务器，负责多个不同网段的地址分配。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "302384",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1625140009",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 15,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "16",
                    "correlation_time": "1666605898",
                    "question_id": "303642",
                    "difficulty_id": "3",
                    "question_title": "通常用户采用评价程序来评价系统的性能，评测准确度最高的评价程序是 （16） 。在计算机性能评估中，通常将评价程序中用得最多、最频繁的 （17）作为评价计算机性能的标准程序，称其为基准测试程序。",
                    "option": [
                        "真实程序",
                        "核心程序",
                        "小型基准程序",
                        "核心基准程序"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "通常用户采用评价程序来评价系统的性能。评价程序一般有专门的测量程序、仿真程序等，而评测准确度最高的评价程序是真实程序。在计算机性能评估中，通常将评价程序中用得最多、最频繁的那部分核心程序作为评价计算机性能的标准程序，称其为基准测试程序。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303641",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626502262",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 16,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "17",
                    "correlation_time": "1666605898",
                    "question_id": "303643",
                    "difficulty_id": "3",
                    "question_title": "通常用户采用评价程序来评价系统的性能，评测准确度最高的评价程序是 （16） 。在计算机性能评估中，通常将评价程序中用得最多、最频繁的 （17）作为评价计算机性能的标准程序，称其为基准测试程序。",
                    "option": [
                        "真实程序",
                        "核心程序",
                        "核心基准程序",
                        "小型基准程序"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "通常用户采用评价程序来评价系统的性能。评价程序一般有专门的测量程序、仿真程序等，而评测准确度最高的评价程序是真实程序。在计算机性能评估中，通常将评价程序中用得最多、最频繁的那部分核心程序作为评价计算机性能的标准程序，称其为基准测试程序。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303641",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626502262",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 17,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "18",
                    "correlation_time": "1666605898",
                    "question_id": "303645",
                    "difficulty_id": "3",
                    "question_title": "信息系统规划方法中，关键成功因素法通过对关键成功因素的识别，找出实现罔标所需要的关键信息集合，从而确定系统开发的 （18） 。关键成功因素来源于组织的目标，通过组织的目标分解和关键成功因素识别、(19）识别，一直到产生数据字典。",
                    "option": [
                        "系统边界",
                        "功能指标",
                        "优先次序",
                        "性能指标"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>关键成功因素法是由John Rockart提出的一种信息系统规划方法。该方法能够帮助企业找到影响系统成功的关键因素，通过分析来确定企业的信息需求，从而为管理部门控制信息技术及其处理过程提供实施指南。</p><p>关键成功因素法通过对关键成功因素的识别，找出实现目标所需要的关键信息集合，从而确定系统开发的优先次序。关键成功因素来源于组织的目标，通过组织的目标分解和关键成功因素识别、性能指标识别，一直到产生数据字典。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303644",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626515556",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 18,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "19",
                    "correlation_time": "1666605898",
                    "question_id": "303646",
                    "difficulty_id": "3",
                    "question_title": "信息系统规划方法中，关键成功因素法通过对关键成功因素的识别，找出实现罔标所需要的关键信息集合，从而确定系统开发的 （18） 。关键成功因素来源于组织的目标，通过组织的目标分解和关键成功因素识别、(19）识别，一直到产生数据字典。",
                    "option": [
                        "系统边界",
                        "优先次序",
                        "功能指标",
                        "性能指标"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>关键成功因素法是由John Rockart提出的一种信息系统规划方法。该方法能够帮助企业找到影响系统成功的关键因素，通过分析来确定企业的信息需求，从而为管理部门控制信息技术及其处理过程提供实施指南。</p><p>关键成功因素法通过对关键成功因素的识别，找出实现目标所需要的关键信息集合，从而确定系统开发的优先次序。关键成功因素来源于组织的目标，通过组织的目标分解和关键成功因素识别、性能指标识别，一直到产生数据字典。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303644",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626515556",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 19,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "20",
                    "correlation_time": "1666605898",
                    "question_id": "303648",
                    "difficulty_id": "3",
                    "question_title": "系统应用集成构建统一标准的基础平台，在各个应用系统的接口之间共享数据和功能，基本原则是保证应用程序的 （20） 。系统应用集成提供了4个不同层次的服务，最上层服务是 （21） 服务。",
                    "option": [
                        "独立性",
                        "相关性",
                        "互操作性",
                        "排他性"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>应用集成是指两个或多个应用系统根据业务逻辑的需要而进行的功能之间的相互调用和互操作。应用集成需要在数据集成的基础上完成。应用集成在底层的网络集成和数据集成的基础上实现异构应用系统之间语用层次上的互操作。它们共同构成了实现企业集成化运行最顶层会聚集成所需要的，技术层次上的基础支持。</p><p>系统应用集成构建统一标准的基础平台，在各个应用系统的接口之间共享数据和功能，基本原则是保证应用程序的独立性。系统应用集成提供了4个不同层次的服务，最上层服务是流程控制服务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303647",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626515610",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 20,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "21",
                    "correlation_time": "1666605898",
                    "question_id": "303649",
                    "difficulty_id": "3",
                    "question_title": "系统应用集成构建统一标准的基础平台，在各个应用系统的接口之间共享数据和功能，基本原则是保证应用程序的 （20） 。系统应用集成提供了4个不同层次的服务，最上层服务是 （21） 服务。",
                    "option": [
                        "通信",
                        "信息传递与转化",
                        "应用连接",
                        "流程控制"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>应用集成是指两个或多个应用系统根据业务逻辑的需要而进行的功能之间的相互调用和互操作。应用集成需要在数据集成的基础上完成。应用集成在底层的网络集成和数据集成的基础上实现异构应用系统之间语用层次上的互操作。它们共同构成了实现企业集成化运行最顶层会聚集成所需要的，技术层次上的基础支持。</p><p>系统应用集成构建统一标准的基础平台，在各个应用系统的接口之间共享数据和功能，基本原则是保证应用程序的独立性。系统应用集成提供了4个不同层次的服务，最上层服务是流程控制服务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303647",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626515610",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 21,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "22",
                    "correlation_time": "1666605898",
                    "question_id": "303651",
                    "difficulty_id": "3",
                    "question_title": "按照传统的软件生命周期方法学，可以把软件生命周期划分为软件定义、软件开发和 （22） 三个阶段。其中，可行性研究属于 （23） 阶段的主要任务。",
                    "option": [
                        "软件运行与维护",
                        "软件对象管理",
                        "软件详细设计",
                        "问题描述"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>结构化范型也称软件生命周期方法学，属于传统方法学。把软件生命周期划分成若干个阶段，每个阶段的任务相对独立，而且比较简单，便于不同人员分工协作，从而降低了整个软件开发过程的困难程度。在传统的软件工程方法中，软件的生存周期分为定义时期、开发时期、运行和维护时期这几个阶段。</p><p>可行性研究属于软件定义阶段的主要任务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303650",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626515661",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 22,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "23",
                    "correlation_time": "1666605898",
                    "question_id": "303652",
                    "difficulty_id": "3",
                    "question_title": "按照传统的软件生命周期方法学，可以把软件生命周期划分为软件定义、软件开发和 （22） 三个阶段。其中，可行性研究属于 （23） 阶段的主要任务。",
                    "option": [
                        "软件定义",
                        "软件开发",
                        "软件评估",
                        "软件运行与维护"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>结构化范型也称软件生命周期方法学，属于传统方法学。把软件生命周期划分成若干个阶段，每个阶段的任务相对独立，而且比较简单，便于不同人员分工协作，从而降低了整个软件开发过程的困难程度。在传统的软件工程方法中，软件的生存周期分为定义时期、开发时期、运行和维护时期这几个阶段。</p><p>可行性研究属于软件定义阶段的主要任务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303650",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626515661",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 23,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "24",
                    "correlation_time": "1666605898",
                    "question_id": "303654",
                    "difficulty_id": "3",
                    "question_title": "需求变更管理是需求管理的重要内容。需求变更管理的过程主要包括问题分析和变更描述、（24） 、变更实现。具体来说，在关于需求变更管理的描述中， （25） 是不正确的。",
                    "option": [
                        "变更调研",
                        "变更判定",
                        "变更定义",
                        "变更分析和成本计算"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "需求变更管理是需求管理的重要内容。需求变更管理的过程主要包括问题分析和变更描述、变更分析和成本计算、变更实现。 具体来说，需求变更是因为需求发生变化根据软件工程思想，需求说明书一般要经过论证，如果在需求说明书经过论证以后，需要在原有需求基础上追加和补充新的需求或对原有需求进行修改和削减，均属于需求变更。因此，需求变更必然会带来相应的问题，绝不是百利无一害的。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303653",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626515718",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 24,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "25",
                    "correlation_time": "1666605898",
                    "question_id": "303655",
                    "difficulty_id": "3",
                    "question_title": "需求变更管理是需求管理的重要内容。需求变更管理的过程主要包括问题分析和变更描述、（24） 、变更实现。具体来说，在关于需求变更管理的描述中， （25） 是不正确的。",
                    "option": [
                        "需求变更要进行控制，严格防止因失控而导致项目混乱，出现重大风险",
                        "需求变更对软件项目开发有利无弊",
                        "需求变更通常按特定的流程进行",
                        "在需求变更中，变更审批由CCB负责审批"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "需求变更管理是需求管理的重要内容。需求变更管理的过程主要包括问题分析和变更描述、变更分析和成本计算、变更实现。 具体来说，需求变更是因为需求发生变化根据软件工程思想，需求说明书一般要经过论证，如果在需求说明书经过论证以后，需要在原有需求基础上追加和补充新的需求或对原有需求进行修改和削减，均属于需求变更。因此，需求变更必然会带来相应的问题，绝不是百利无一害的。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303653",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626515718",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 25,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "26",
                    "correlation_time": "1666605898",
                    "question_id": "303657",
                    "difficulty_id": "3",
                    "question_title": "软件方法学是以软件开发方法为研究对象的学科。其中， （26） 是先对最高居次中的问题进行定义、设计、编程和测试，而将其中未解决的问题作为一个子任务放到下一层次中去解决。 （27） 是根据系统功能要求，从具体的器件、逻辑部件或者相似系统开始，通过对其进行相互连接、修改和扩大，构成所要求的系统。 （28） 是建立在严格数学基础上的软件开发方法。",
                    "option": [
                        "面向对象开发方法",
                        "形式化开发方法",
                        "非形式化开发方法",
                        "自顶向下开发方法"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件方法学是软件开发全过程的指导原则与方法体系。其另一种含义是以软件方法为研究对象的学科。从开发风范上看，软件方法有自顶向下的开发方法、自底向上的开发方法。在实际软件开发中，大都是自顶向下与自底向上两种方法的结合，只不过是以何者为主而已。自顶向下是指将一个大问题分化成多个可以解决的小问题，然后逐一进行解决。每个问题都会有一个模块去解决它，且每个问题包括抽象步骤和具体步骤。形式化方法是指采用严格的数学方法，使用形式化规约语言来精确定义软件系统。非形式化的开发方法是通过自然语言、图形或表格描述软件系统的行为和特性，然后基于这些描述进行设计和开发，而形式化开发则是基于数学的方式描述、开发和验证系统。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303656",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626515838",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 26,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "27",
                    "correlation_time": "1666605898",
                    "question_id": "303658",
                    "difficulty_id": "3",
                    "question_title": "软件方法学是以软件开发方法为研究对象的学科。其中， （26） 是先对最高居次中的问题进行定义、设计、编程和测试，而将其中未解决的问题作为一个子任务放到下一层次中去解决。 （27） 是根据系统功能要求，从具体的器件、逻辑部件或者相似系统开始，通过对其进行相互连接、修改和扩大，构成所要求的系统。 （28） 是建立在严格数学基础上的软件开发方法。",
                    "option": [
                        "自底向上开发方法",
                        "形式化开发方法",
                        "非形式化开发方法",
                        "原型开发方法"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件方法学是软件开发全过程的指导原则与方法体系。其另一种含义是以软件方法为研究对象的学科。从开发风范上看，软件方法有自顶向下的开发方法、自底向上的开发方法。在实际软件开发中，大都是自顶向下与自底向上两种方法的结合，只不过是以何者为主而已。自顶向下是指将一个大问题分化成多个可以解决的小问题，然后逐一进行解决。每个问题都会有一个模块去解决它，且每个问题包括抽象步骤和具体步骤。形式化方法是指采用严格的数学方法，使用形式化规约语言来精确定义软件系统。非形式化的开发方法是通过自然语言、图形或表格描述软件系统的行为和特性，然后基于这些描述进行设计和开发，而形式化开发则是基于数学的方式描述、开发和验证系统。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303656",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626515838",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 27,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "28",
                    "correlation_time": "1666605898",
                    "question_id": "303659",
                    "difficulty_id": "3",
                    "question_title": "软件方法学是以软件开发方法为研究对象的学科。其中， （26） 是先对最高居次中的问题进行定义、设计、编程和测试，而将其中未解决的问题作为一个子任务放到下一层次中去解决。 （27） 是根据系统功能要求，从具体的器件、逻辑部件或者相似系统开始，通过对其进行相互连接、修改和扩大，构成所要求的系统。 （28） 是建立在严格数学基础上的软件开发方法。",
                    "option": [
                        "自底向上开发方法",
                        "形式化开发方法",
                        "原型开发方法",
                        "非形式化开发方法"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件方法学是软件开发全过程的指导原则与方法体系。其另一种含义是以软件方法为研究对象的学科。从开发风范上看，软件方法有自顶向下的开发方法、自底向上的开发方法。在实际软件开发中，大都是自顶向下与自底向上两种方法的结合，只不过是以何者为主而已。自顶向下是指将一个大问题分化成多个可以解决的小问题，然后逐一进行解决。每个问题都会有一个模块去解决它，且每个问题包括抽象步骤和具体步骤。形式化方法是指采用严格的数学方法，使用形式化规约语言来精确定义软件系统。非形式化的开发方法是通过自然语言、图形或表格描述软件系统的行为和特性，然后基于这些描述进行设计和开发，而形式化开发则是基于数学的方式描述、开发和验证系统。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303656",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1626515838",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 28,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "29",
                    "correlation_time": "1666605898",
                    "question_id": "303661",
                    "difficulty_id": "3",
                    "question_title": "软件开发工具是指用于辅助软件开发过程活动的各种软件，其中， （29） 是辅助建立软件系统的抽象模型的，例如Rose、Together、WinA&amp;D、 （30） 等。",
                    "option": [
                        "编程工具",
                        "设计工具",
                        "测试工具",
                        "建模工具"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件开发工具是指用于辅助软件开发过程活动的各种软件。其中，软件建模工具是辅助建立软件系统的抽象模型的。常见的软件建模工具包括 Rational Rose、Together、 WinA&amp;D、QuickUML、EclipseUML 等。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303660",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626515894",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 29,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "30",
                    "correlation_time": "1666605898",
                    "question_id": "303662",
                    "difficulty_id": "3",
                    "question_title": "软件开发工具是指用于辅助软件开发过程活动的各种软件，其中， （29） 是辅助建立软件系统的抽象模型的，例如Rose、Together、WinA&amp;D、 （30） 等。",
                    "option": [
                        "LoadRunner",
                        "QuickUML",
                        "Delphi",
                        "WinRunner"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件开发工具是指用于辅助软件开发过程活动的各种软件。其中，软件建模工具是辅助建立软件系统的抽象模型的。常见的软件建模工具包括 Rational Rose、Together、 WinA&amp;D、QuickUML、EclipseUML 等。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303660",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626515894",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 30,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "31",
                    "correlation_time": "1666605898",
                    "question_id": "303664",
                    "difficulty_id": "3",
                    "question_title": "软件概要设计将软件需求转化为软件设计的 （31） 和软件的 （32） 。",
                    "option": [
                        "算法流程",
                        "数据结构",
                        "交互原型",
                        "操作接口"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "从工程管理角度来看，软件设计可分为概要设计和详细设计两个阶段。概要设计也称为高层设计或总体设计，即将软件需求转化为数据结构和软件的系统结构;详细设计也称为低层设计，即对结构图进行细化，得到详细的数据结构与算法。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303663",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626515946",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 31,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "32",
                    "correlation_time": "1666605898",
                    "question_id": "303665",
                    "difficulty_id": "3",
                    "question_title": "软件概要设计将软件需求转化为软件设计的 （31） 和软件的 （32） 。",
                    "option": [
                        "系统结构",
                        "算法流程",
                        "内部接口",
                        "程序流程"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "从工程管理角度来看，软件设计可分为概要设计和详细设计两个阶段。概要设计也称为高层设计或总体设计，即将软件需求转化为数据结构和软件的系统结构;详细设计也称为低层设计，即对结构图进行细化，得到详细的数据结构与算法。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303663",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626515946",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 32,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "33",
                    "correlation_time": "1666605898",
                    "question_id": "303666",
                    "difficulty_id": "3",
                    "question_title": "软件结构化设计包括 （33） 等任务。",
                    "option": [
                        "架构设计、数据设计、过程设计、原型设计",
                        "架构设计、过程设计、程序设计、原型设计",
                        "数据设计、过程设计、交互设计、程序设计",
                        "架构设计、接口设计、数据设计、过程设计"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件结构化设计包括架构设计、接口设计、数据设计和过程设计等任务。它是一种面向数据流的设计方法，是以结构化分析阶段所产生的成果为基础，进一步自顶而下、逐步求精和模块化的过程。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303666",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626515982",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 33,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "34",
                    "correlation_time": "1666605898",
                    "question_id": "303667",
                    "difficulty_id": "3",
                    "question_title": "关于模块化设计， （34） 是错误的。",
                    "option": [
                        "模块是指执行某一特定任务的数据结构和程序代码",
                        "模块的接口和功能定义属于其模块自身的内部特性",
                        "每个模块完成相对独立的特定子功能，与其他模块之间的关系最简单",
                        "模块设计的重要原则是高内聚、低耦合"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "模块化设计是将一个待开发的软件分解成为若干小的简单部分——模块。具体来说，模块是指执行某一特定任务的数据结构和程序代码。通常将模块的结构和功能定义为其外部特性，将模块的局部数据和实现该模块的程序代码称为内部特性。模块独立是指每个模块完成相对独立的特定子功能，与其他模块之间的关系最简单。通常用内聚和耦合两个标准来衡量模块的独立性，其设计原则是”高内聚、低耦合”。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303667",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626516087",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 34,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "35",
                    "correlation_time": "1666605898",
                    "question_id": "303669",
                    "difficulty_id": "3",
                    "question_title": "基于构件的软件开发中，构件分类方法可以归纳为三大类： （35） 根据领域分析的结果将应用领域的概念按照从抽象到具体的顺序逐次分解为树形或有向无回路图结构； （36） 利用Facet描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征； （37） 使得检索者在阅读文档过程中可以按照人类的联想思维方式任意跳转到包含相关概念或构件的文档。",
                    "option": [
                        "关键字分类法",
                        "刻面分类法",
                        "语义匹配法",
                        "超文本方法"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>基于构件的软件开发中，已有的构件分类方法可以归纳为三大类∶</p><p>（1）关键字分类法</p><p>根据领域分析的结果将应用领域的概念按照从抽象到具体的顺序逐次分解为树形或有向无回路图结构。</p><p>（2）刻面分类法</p><p>利用 Facet（刻面）描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征。</p><p>（3）超文本方法</p><p>基于全文检索技术，使得检索者在阅读文档过程中可以按照人类的联想思维方式任意跳转到包含相关概念或构件的文档。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303668",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626516242",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 35,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "36",
                    "correlation_time": "1666605898",
                    "question_id": "303670",
                    "difficulty_id": "3",
                    "question_title": "基于构件的软件开发中，构件分类方法可以归纳为三大类： （35） 根据领域分析的结果将应用领域的概念按照从抽象到具体的顺序逐次分解为树形或有向无回路图结构； （36） 利用Facet描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征； （37） 使得检索者在阅读文档过程中可以按照人类的联想思维方式任意跳转到包含相关概念或构件的文档。",
                    "option": [
                        "关键字分类法",
                        "刻面分类法",
                        "超文本方法",
                        "语义匹配法"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>基于构件的软件开发中，已有的构件分类方法可以归纳为三大类∶</p><p>（1）关键字分类法</p><p>根据领域分析的结果将应用领域的概念按照从抽象到具体的顺序逐次分解为树形或有向无回路图结构。</p><p>（2）刻面分类法</p><p>利用 Facet（刻面）描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征。</p><p>（3）超文本方法</p><p>基于全文检索技术，使得检索者在阅读文档过程中可以按照人类的联想思维方式任意跳转到包含相关概念或构件的文档。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303668",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626516242",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 36,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "37",
                    "correlation_time": "1666605898",
                    "question_id": "303671",
                    "difficulty_id": "3",
                    "question_title": "基于构件的软件开发中，构件分类方法可以归纳为三大类： （35） 根据领域分析的结果将应用领域的概念按照从抽象到具体的顺序逐次分解为树形或有向无回路图结构； （36） 利用Facet描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征； （37） 使得检索者在阅读文档过程中可以按照人类的联想思维方式任意跳转到包含相关概念或构件的文档。",
                    "option": [
                        "刻面分类法",
                        "关键字分类法",
                        "语义匹配法",
                        "超文本方法"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>基于构件的软件开发中，已有的构件分类方法可以归纳为三大类∶</p><p>（1）关键字分类法</p><p>根据领域分析的结果将应用领域的概念按照从抽象到具体的顺序逐次分解为树形或有向无回路图结构。</p><p>（2）刻面分类法</p><p>利用 Facet（刻面）描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征。</p><p>（3）超文本方法</p><p>基于全文检索技术，使得检索者在阅读文档过程中可以按照人类的联想思维方式任意跳转到包含相关概念或构件的文档。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303668",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1626516242",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 37,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "38",
                    "correlation_time": "1666605898",
                    "question_id": "303672",
                    "difficulty_id": "3",
                    "question_title": "构件组装是指将库中的构件经适当修改后相互连接构成新的目标软件。 （38） 不属于构件组装技术。",
                    "option": [
                        "基于功能的构件组装技术",
                        "基于数据的构件组装技术",
                        "基于实现的构件组装技术",
                        "面向对象的构件组装技术"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>构件组装是将库中的构件经适当修改后相互连接，或者将它们与当前开发项目中的软件元素相连接，最终构成新的目标软件。构件组装技术大致可分为基于功能的组装技术、基于数据的组装技术和面向对象的组装技术。</p><p>（1）基于功能的组装技术</p><p>基于功能的组装技术采用子程序调用和参数传递的方式将构件组装起来。它要求库中的构件以子程序/过程/函数的形式出现，并且接口说明必须清晰。当使用这种组装技术进行软件开发时，开发人员首先要对新系统进行功能分解，将系统分解为强内聚、松耦合的功能模块；然后根据各模块的功能需求提取构件，进行适应性修改后，再挂接到上述功能分解框架中。</p><p>（2）基于数据的组装技术</p><p>基于数据的组装技术首先根据当前软件问题的核心数据结构设计出一个框架，然后根据框架中各结点的需求提取构件并进行适应性修改，再将构件逐个分配至框架中的适当位置。此后，构件的组装方式仍然是传统的子程序调用与参数传递。这种组装技术也要求库中构件以子程序形式出现，但它所依赖的软件设计方法不再是功能分解，而是面向数据的设计方法，例如，Jackson系统开发方法。</p><p>（3）面向对象的组装技术</p><p>由于封装和继承特征，面向对象方法比其他软件开发方法更适合支持软件复用。在面向对象的软件开发方法中，如果从类库中检索出来的基类能够完全满足新系统的需求，则可以直接应用。否则，必须以基类为父类，生成相应的子类，以满足新系统的需求。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303672",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626516285",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 38,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "39",
                    "correlation_time": "1666605898",
                    "question_id": "303674",
                    "difficulty_id": "3",
                    "question_title": "软件逆向工程就是分析己有的程序，寻求比源代码更高级的抽象表现形式。在逆向工程导出信息的四个抽象层次中， （39） 包括反映程序各部分之间相互依赖关系的信息； （40） 包括反映程序段功能及程序段之间关系的信息。",
                    "option": [
                        "实现级",
                        "结构级",
                        "功能级",
                        "领域级"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "逆向工程过程能够导出过程的设计模型（实现级）、程序和数据结构信息（结构级）、对象模型、数据和控制流模型（功能级）以及 UML 状态图和部署图（领域级）。其中，结构级包括反映程序各部分之间相关依赖关系的信息; 功能级包括反映程序段功能及程序段之间关系的信息。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303673",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626516400",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 39,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "40",
                    "correlation_time": "1666605898",
                    "question_id": "303675",
                    "difficulty_id": "3",
                    "question_title": "软件逆向工程就是分析己有的程序，寻求比源代码更高级的抽象表现形式。在逆向工程导出信息的四个抽象层次中， （39） 包括反映程序各部分之间相互依赖关系的信息； （40） 包括反映程序段功能及程序段之间关系的信息。",
                    "option": [
                        "结构级",
                        "实现级",
                        "功能级",
                        "领域级"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "逆向工程过程能够导出过程的设计模型（实现级）、程序和数据结构信息（结构级）、对象模型、数据和控制流模型（功能级）以及 UML 状态图和部署图（领域级）。其中，结构级包括反映程序各部分之间相关依赖关系的信息; 功能级包括反映程序段功能及程序段之间关系的信息。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303673",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626516400",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 40,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "41",
                    "correlation_time": "1666605898",
                    "question_id": "303676",
                    "difficulty_id": "3",
                    "question_title": "（41） 是在逆向工程所获取信息的基础上修改或重构已有的系统，产生系统的一个新版本。",
                    "option": [
                        "逆向分析(Reverse Analysis)",
                        "重组 （Restructuring)",
                        "设计恢复（Design Recovery)",
                        "重构工程（Re-engineering)"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "重组是指在同一抽象级别上转换系统描述形式;设计恢复是指借助工具从已有程序中抽象出有关数据设计、总体结构设计和过程设计等方面的信息;重构工程是指在逆向工程所获得信息的基础上，修改或重构已有的系统，产生系统的一个新版本。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303676",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626516453",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 41,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "42",
                    "correlation_time": "1666605898",
                    "question_id": "303678",
                    "difficulty_id": "3",
                    "question_title": "软件性能测试有多种不同类型的测试方法，其中， （42） 用于测试在限定的系统下考査软件系统极限运行的情况， （43） 可用于测试系统同时处理的在线最大用户数量。",
                    "option": [
                        "强度测试",
                        "负载测试",
                        "压力测试",
                        "容量测试"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件性能测试类型包括负载测试、强度测试和容量测试等。其中：</p><p>（1）负载测试用于测试超负荷环境中程序是否能够承担；</p><p>（2）强度测试是在系统资源特别低的情况下考查软件系统极限运行情况；</p><p>（3）容量测试可用于测试系统同时处理的在线最大用户数量。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303677",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626518436",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 42,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "43",
                    "correlation_time": "1666605898",
                    "question_id": "303679",
                    "difficulty_id": "3",
                    "question_title": "软件性能测试有多种不同类型的测试方法，其中， （42） 用于测试在限定的系统下考査软件系统极限运行的情况， （43） 可用于测试系统同时处理的在线最大用户数量。",
                    "option": [
                        "强度测试",
                        "压力测试",
                        "负载测试",
                        "容量测试"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件性能测试类型包括负载测试、强度测试和容量测试等。其中：</p><p>（1）负载测试用于测试超负荷环境中程序是否能够承担；</p><p>（2）强度测试是在系统资源特别低的情况下考查软件系统极限运行情况；</p><p>（3）容量测试可用于测试系统同时处理的在线最大用户数量。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303677",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626518436",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 43,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "44",
                    "correlation_time": "1666605898",
                    "question_id": "303681",
                    "difficulty_id": "3",
                    "question_title": "<p>一个完整的软件系统需从不同视角进行描述，下图属于软件架构设计中的 （44） ，用于 （45）视图来描述软件系统。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518457876398.jpg\" title=\"1626518457876398.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "option": [
                        "对象图",
                        "时序图",
                        "构件图",
                        "类图"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件系统需从不同的角度进行描述。其著名的 4+1 视角架构模型(The &quot;4+1&quot; View Model of Software Architecture)提出了一种用来描述软件系统体系架构的模型，这种模型是基于使用者的多个不同视角出发。这种多视角能够解决多个“利益相关者”关心的问题。利益相关者包括最终用户、开发人员、系统工程师、项目经理等，他们能够分别处理功能性和非功能性需求。4+1视角架构模型的五个主要的视角为逻辑视图、开发视图、处理视图、物理视图和场景。其中逻辑视图通常包括类图，对象图，状态图和协作图。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303680",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626518509",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 44,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "45",
                    "correlation_time": "1666605898",
                    "question_id": "303682",
                    "difficulty_id": "3",
                    "question_title": "<p>一个完整的软件系统需从不同视角进行描述，下图属于软件架构设计中的 （44） ，用于 （45）视图来描述软件系统。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518457876398.jpg\" title=\"1626518457876398.jpg\" alt=\"1.jpg\"/></p><br/>",
                    "option": [
                        "进程",
                        "逻辑",
                        "物理",
                        "用户"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件系统需从不同的角度进行描述。其著名的 4+1 视角架构模型(The &quot;4+1&quot; View Model of Software Architecture)提出了一种用来描述软件系统体系架构的模型，这种模型是基于使用者的多个不同视角出发。这种多视角能够解决多个“利益相关者”关心的问题。利益相关者包括最终用户、开发人员、系统工程师、项目经理等，他们能够分别处理功能性和非功能性需求。4+1视角架构模型的五个主要的视角为逻辑视图、开发视图、处理视图、物理视图和场景。其中逻辑视图通常包括类图，对象图，状态图和协作图。",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303680",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626518509",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 45,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "46",
                    "correlation_time": "1666605898",
                    "question_id": "303684",
                    "difficulty_id": "3",
                    "question_title": "<p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>对软件体系结构风格的研究和实践促进了对设计的复用。Garlan和Shaw对经典体系结构风格进行了分类。其中， （46） 属于数据流体系结构风格； （47） 属于虚拟机体系结构风格；而下图描述的属于 （48） 体系结构风格。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518531762655.jpg\" title=\"1626518531762655.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        "面向对象",
                        "事件系统",
                        "规则系统",
                        "批处理"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据流体系结构包括批处理体系结构风格和管道-过滤器体系结构风格。虚拟机体系结构风格包括解释器体系结构风格和规则系统体系结构风格。图中描述的为层次型体系结构风格。所以第1空选项答案为D",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303683",
                    "sort_son": "1",
                    "creater_name": "mb607d517946707",
                    "create_time": "1626518607",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 46,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "47",
                    "correlation_time": "1666605898",
                    "question_id": "303685",
                    "difficulty_id": "3",
                    "question_title": "<p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>对软件体系结构风格的研究和实践促进了对设计的复用。Garlan和Shaw对经典体系结构风格进行了分类。其中， （46） 属于数据流体系结构风格； （47） 属于虚拟机体系结构风格；而下图描述的属于 （48） 体系结构风格。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518531762655.jpg\" title=\"1626518531762655.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        "面向对象",
                        "事件系统",
                        " 规则系统 ",
                        "批处理"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据流体系结构包括批处理体系结构风格和管道-过滤器体系结构风格。虚拟机体系结构风格包括解释器体系结构风格和规则系统体系结构风格。图中描述的为层次型体系结构风格。第2空答案为C",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303683",
                    "sort_son": "2",
                    "creater_name": "mb607d517946707",
                    "create_time": "1626518607",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 47,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "48",
                    "correlation_time": "1666605898",
                    "question_id": "303686",
                    "difficulty_id": "3",
                    "question_title": "<p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>对软件体系结构风格的研究和实践促进了对设计的复用。Garlan和Shaw对经典体系结构风格进行了分类。其中， （46） 属于数据流体系结构风格； （47） 属于虚拟机体系结构风格；而下图描述的属于 （48） 体系结构风格。</p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626518531762655.jpg\" title=\"1626518531762655.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        " 层次型 ",
                        "规则系统",
                        "事件系统",
                        "批处理"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据流体系结构包括批处理体系结构风格和管道-过滤器体系结构风格。虚拟机体系结构风格包括解释器体系结构风格和规则系统体系结构风格。图中描述的为层次型体系结构风格。第3空答案为A",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303683",
                    "sort_son": "3",
                    "creater_name": "mb607d517946707",
                    "create_time": "1626518607",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术",
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 48,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "49",
                    "correlation_time": "1666605898",
                    "question_id": "303688",
                    "difficulty_id": "3",
                    "question_title": "（49） 是由中间件技术实现并支持SOA的一组基础架构，它提供了一种基础设施，其优势在于（50） 。",
                    "option": [
                        "ESB",
                        "微服务",
                        "云计算",
                        "Multi-Agent System"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>面向服务的体系结构(Service-oriented Architecture, SOA)是一种软件系统设计方法，通过已经发布的和可发现的接口为终端用户应用程序或其他服务提供服务。</p><p>企业服务总线(Enterprise Service Bus, ESB)是构建基于SOA解决方案时所使用基础架构的关键部分，是由中间件技术实现并支持SOA的一组基础架构功能。ESB支持异构环境中的服务、消息，以及基干事件的交互，并且具有适当的服务级别和可管理性。简而言之，ESB提供了连接企业内部及跨企业间新的和现有软件应用程序的功能，以一组丰富的功能启用管理和监控应用程序之间的交互。在SOA分层模型中，ESB用于组件层以及服务层之间，它能够通过多种通信协议连接并集成不同平台上的组件将其映射成服务层的服务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303687",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626518675",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 49,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "50",
                    "correlation_time": "1666605898",
                    "question_id": "303689",
                    "difficulty_id": "3",
                    "question_title": "（49） 是由中间件技术实现并支持SOA的一组基础架构，它提供了一种基础设施，其优势在于（50） 。",
                    "option": [
                        "支持了服务请求者与服务提供者之间的直接链接",
                        "支持了服务请求者与服务提供者之间的紧密耦合",
                        "消除了服务请求者与服务提供者之间的直接链接",
                        "消除了服务请求者与服务提供者之间的关系"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>面向服务的体系结构(Service-oriented Architecture, SOA)是一种软件系统设计方法，通过已经发布的和可发现的接口为终端用户应用程序或其他服务提供服务。</p><p>企业服务总线(Enterprise Service Bus, ESB)是构建基于SOA解决方案时所使用基础架构的关键部分，是由中间件技术实现并支持SOA的一组基础架构功能。ESB支持异构环境中的服务、消息，以及基干事件的交互，并且具有适当的服务级别和可管理性。简而言之，ESB提供了连接企业内部及跨企业间新的和现有软件应用程序的功能，以一组丰富的功能启用管理和监控应用程序之间的交互。在SOA分层模型中，ESB用于组件层以及服务层之间，它能够通过多种通信协议连接并集成不同平台上的组件将其映射成服务层的服务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303687",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626518675",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 50,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "51",
                    "correlation_time": "1666605898",
                    "question_id": "303691",
                    "difficulty_id": "3",
                    "question_title": "ABSDM(Architecture-Based Software Design Model)把整个基于体系结构的软件过程划分为体系结构需求、体系结构设计、体系结构文档化、 （51） 、 （52） 和体系结构演化等6个子过程。其中， （53） 过程的主要输出结果是体系结构规格说明和测试体系结构需求的质量设计说明书。",
                    "option": [
                        "体系结构复审",
                        "体系结构测试",
                        "体系结构变更",
                        "体系结构管理"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>基于架构的软件开发模型(Architecture-Based Software Design Model, ABSDM)把整个基于架构的软件过程划分为架构需求、设计、文档化、复审、实现、演化等 6 个子过程。</p><p>绝大多数的架构都是抽象的，由一些概念上的构件组成。例如，层的概念在任何程序设计语言中都不存在。因此，要让系统分析师和程序员去实现架构，还必须得把架构进行文档化。文档是在系统演化的每一个阶段，系统设计与开发人员的通信媒介，是为验证架构设计和提炼或修改这些设计（必要时）所执行预先分析的基础。架构文档化过程的主要输出结果是架构需求规格说明和测试架构需求的质量设计说明书这两个文档。生成需求模型构件的精确的形式化的描述，作为用户和开发者之间的一个协约。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303690",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626518851",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 51,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "52",
                    "correlation_time": "1666605898",
                    "question_id": "303692",
                    "difficulty_id": "3",
                    "question_title": "ABSDM(Architecture-Based Software Design Model)把整个基于体系结构的软件过程划分为体系结构需求、体系结构设计、体系结构文档化、 （51） 、 （52） 和体系结构演化等6个子过程。其中， （53） 过程的主要输出结果是体系结构规格说明和测试体系结构需求的质量设计说明书。",
                    "option": [
                        "体系结构实现",
                        "体系结构测试",
                        "体系结构建模",
                        "体系结构管理"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>基于架构的软件开发模型(Architecture-Based Software Design Model, ABSDM)把整个基于架构的软件过程划分为架构需求、设计、文档化、复审、实现、演化等 6 个子过程。</p><p>绝大多数的架构都是抽象的，由一些概念上的构件组成。例如，层的概念在任何程序设计语言中都不存在。因此，要让系统分析师和程序员去实现架构，还必须得把架构进行文档化。文档是在系统演化的每一个阶段，系统设计与开发人员的通信媒介，是为验证架构设计和提炼或修改这些设计（必要时）所执行预先分析的基础。架构文档化过程的主要输出结果是架构需求规格说明和测试架构需求的质量设计说明书这两个文档。生成需求模型构件的精确的形式化的描述，作为用户和开发者之间的一个协约。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303690",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626518851",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 52,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "53",
                    "correlation_time": "1666605898",
                    "question_id": "303693",
                    "difficulty_id": "3",
                    "question_title": "ABSDM(Architecture-Based Software Design Model)把整个基于体系结构的软件过程划分为体系结构需求、体系结构设计、体系结构文档化、 （51） 、 （52） 和体系结构演化等6个子过程。其中， （53） 过程的主要输出结果是体系结构规格说明和测试体系结构需求的质量设计说明书。",
                    "option": [
                        "体系结构设计",
                        "体系结构需求",
                        "体系结构文档化",
                        "体系结构测试"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>基于架构的软件开发模型(Architecture-Based Software Design Model, ABSDM)把整个基于架构的软件过程划分为架构需求、设计、文档化、复审、实现、演化等 6 个子过程。</p><p>绝大多数的架构都是抽象的，由一些概念上的构件组成。例如，层的概念在任何程序设计语言中都不存在。因此，要让系统分析师和程序员去实现架构，还必须得把架构进行文档化。文档是在系统演化的每一个阶段，系统设计与开发人员的通信媒介，是为验证架构设计和提炼或修改这些设计（必要时）所执行预先分析的基础。架构文档化过程的主要输出结果是架构需求规格说明和测试架构需求的质量设计说明书这两个文档。生成需求模型构件的精确的形式化的描述，作为用户和开发者之间的一个协约。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303690",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1626518851",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 53,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "54",
                    "correlation_time": "1666605898",
                    "question_id": "303695",
                    "difficulty_id": "3",
                    "question_title": "设计模式按照目的可以划分为三类，其中， （54） 模式是对对象实例化过程的抽象。例如 （55）模式确保一个类只有一个实例，并提供了全局访问入口； （56） 模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建定义对象； （57） 模式将复杂对象的构建与其表示分离。",
                    "option": [
                        "创建型",
                        "结构型",
                        "行为型",
                        "功能型"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>创建型模式是对对象实例化过程的抽象。例如Singleton模式确保一个类只有一个实例，并提供了全局访问入口；Prototype模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象；Builder模式将复杂对象的构建与其表示分离。</p><p>结构型模式主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</p><p>行为型模式主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303694",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626519037",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 54,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "55",
                    "correlation_time": "1666605898",
                    "question_id": "303696",
                    "difficulty_id": "3",
                    "question_title": "设计模式按照目的可以划分为三类，其中， （54） 模式是对对象实例化过程的抽象。例如 （55）模式确保一个类只有一个实例，并提供了全局访问入口； （56） 模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建定义对象； （57） 模式将复杂对象的构建与其表示分离。",
                    "option": [
                        "Facade",
                        "Builder",
                        "Prototype",
                        "Singleton"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>创建型模式是对对象实例化过程的抽象。例如Singleton模式确保一个类只有一个实例，并提供了全局访问入口；Prototype模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象；Builder模式将复杂对象的构建与其表示分离。</p><p>结构型模式主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</p><p>行为型模式主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303694",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626519037",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 55,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "56",
                    "correlation_time": "1666605898",
                    "question_id": "303697",
                    "difficulty_id": "3",
                    "question_title": "设计模式按照目的可以划分为三类，其中， （54） 模式是对对象实例化过程的抽象。例如 （55）模式确保一个类只有一个实例，并提供了全局访问入口； （56） 模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建定义对象； （57） 模式将复杂对象的构建与其表示分离。",
                    "option": [
                        "Builder",
                        "Facade",
                        "Prototype",
                        "Singleton"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>创建型模式是对对象实例化过程的抽象。例如Singleton模式确保一个类只有一个实例，并提供了全局访问入口；Prototype模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象；Builder模式将复杂对象的构建与其表示分离。</p><p>结构型模式主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</p><p>行为型模式主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303694",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1626519037",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 56,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "57",
                    "correlation_time": "1666605898",
                    "question_id": "303698",
                    "difficulty_id": "3",
                    "question_title": "设计模式按照目的可以划分为三类，其中， （54） 模式是对对象实例化过程的抽象。例如 （55）模式确保一个类只有一个实例，并提供了全局访问入口； （56） 模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建定义对象； （57） 模式将复杂对象的构建与其表示分离。",
                    "option": [
                        "Facade",
                        "Builder",
                        "Singleton",
                        "Prototype"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>创建型模式是对对象实例化过程的抽象。例如Singleton模式确保一个类只有一个实例，并提供了全局访问入口；Prototype模式允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象；Builder模式将复杂对象的构建与其表示分离。</p><p>结构型模式主要用于如何组合已有的类和对象以获得更大的结构，一般借鉴封装、代理、继承等概念将一个或多个类或对象进行组合、封装，以提供统一的外部视图或新的功能。</p><p>行为型模式主要用于对象之间的职责及其提供的服务的分配，它不仅描述对象或类的模式，还描述它们之间的通信模式，特别是描述一组对等的对象怎样相互协作以完成其中任一对象都无法单独完成的任务。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303694",
                    "sort_son": "4",
                    "creater_name": "试题账号",
                    "create_time": "1626519037",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 57,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "58",
                    "correlation_time": "1666605898",
                    "question_id": "303700",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "option": [
                        "可用性",
                        "性能",
                        "安全性",
                        "可修改性"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303699",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626519202",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 58,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "59",
                    "correlation_time": "1666605898",
                    "question_id": "303701",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "option": [
                        "限制资源",
                        "引入并发",
                        "资源仲裁",
                        "限制访问"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303699",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626519202",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 59,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "60",
                    "correlation_time": "1666605898",
                    "question_id": "303702",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "option": [
                        "可用性",
                        "性能",
                        "安全性",
                        "可修改性"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303699",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1626519202",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 60,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "61",
                    "correlation_time": "1666605898",
                    "question_id": "303703",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "option": [
                        "记录/回放",
                        "操作串行化",
                        "心跳",
                        "资源调度"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303699",
                    "sort_son": "4",
                    "creater_name": "试题账号",
                    "create_time": "1626519202",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 61,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "62",
                    "correlation_time": "1666605898",
                    "question_id": "303704",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "option": [
                        "可用性",
                        "性能",
                        "安全性",
                        "可修改性"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303699",
                    "sort_son": "5",
                    "creater_name": "试题账号",
                    "create_time": "1626519202",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 62,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "63",
                    "correlation_time": "1666605898",
                    "question_id": "303705",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个电子交易清算系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与 （58） 质量属性相关，通常可采用 （59） 架构策略实现该属性；“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与 （60） 质量属性相关，通常可采用 （61） 架构策略实现该属性；“系统应能够防止99%的黑客攻击”主要与 （62） 质暈属性相关，通常可采用 （63） 架构策略实现该属性。",
                    "option": [
                        "检测攻击",
                        "Ping/Echo",
                        "选举",
                        "权限控制"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，结构设计则是为满足架构需求（质量属性）寻找适当的战术。</p><p>根据题干描述，其中“数据传递时延不大于1s，并提供相应的优先级管理”主要与性能质量属性相关，性能的战术有资源需求、资源管理和资源仲裁，此需求通常可采用资源仲裁架构策略实现该属性；</p><p>“系统采用双机热备，主备机必须实时监测对方状态，以便完成系统的实时切换”主要与可用性质量属性相关，可用性的战术有错误检测、错误恢复和错误预防，此需求通常可采用错误检测中的心跳架构策略实现该属性；</p><p>“系统应能够防止 99%的黑客攻击”主要与安全性质量属性相关，安全性相关的战术有抵抗攻击、检测攻击和从攻击中恢复，此需求通常可采用检测攻击架构策略实现该属性。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303699",
                    "sort_son": "6",
                    "creater_name": "试题账号",
                    "create_time": "1626519202",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 63,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "64",
                    "correlation_time": "1666605898",
                    "question_id": "303706",
                    "difficulty_id": "3",
                    "question_title": "下列协议中与电子邮箱安全无关的是 （64） 。",
                    "option": [
                        "SSL",
                        "HTTPS",
                        "MIME",
                        "PGP"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>SSL(Secure Sockets Layer, 安全套接层)及其继任者TLS(Transport Layer Security, 传输层安全)是为网络通信提供安全及数据完整性的一种安全协议，在传输层对网络连接进行加密。在设置电子邮箱时使用SSL协议，会保障邮箱更安全。</p><p>HTTPS协议是由HTTP加上TLS/SSL协议构建的可进行加密传输、身份认证的网络协议，主要通过数字证书、加密算法、非对称密钥等技术完成互联网数据传输加密，实现互联网传输安全保护。</p><p>MIME是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。它是一个互联网标准，扩展了电子邮件标准，使其能够支持∶非ASCII字符文本：非文本格式附件（二进制、声音、图像等）；由多部分(Multiple Parts)组成的消息体；包含非 ASCII字符的头信息(Header Information)。</p><p>PGP是一套用于消息加密、验证的应用程序，采用IDEA的散列算法作为加密与验证之用。PGP加密由一系列散列、数据压缩、对称密钥加密，以及公钥加密的算法组合而成。每个公钥均绑定唯一的用户名和/或者E-Mail地址。</p><p>因此，上述选项中MIME是扩展了电子邮件标准，不能用于保障电子邮件安全。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303706",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626519252",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 64,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "65",
                    "correlation_time": "1666605898",
                    "question_id": "303707",
                    "difficulty_id": "3",
                    "question_title": "以下关于网络冗余设计的叙述中，错误的是 （65） 。",
                    "option": [
                        "网络冗余设计避免网络组件单点失效造成应用失效",
                        "备用路径与主路径同时投入使用，分担主路径流量",
                        "负载分担是通过并行链路提供流量分担来提高性能的",
                        "网络中存在备用链路时，可以考虑加入负载分担设计"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "网络冗余设计的目的就是避免网络组件单点失效造成应用失效;备用路径是在主路径失效时启用，其和主路径承担不同的网络负载;负载分担是网络冗余设计中的一种设计方式，其通过并行链路提供流量分担来提高性能;网络中存在备用链路时，可以考虑加入负载分担设计来减轻主路径负担。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303707",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626519276",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 65,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "66",
                    "correlation_time": "1666605898",
                    "question_id": "303708",
                    "difficulty_id": "3",
                    "question_title": "<p>著作权中，(16)的保护期不受期限限制。</p><p><br/></p>",
                    "option": [
                        " 发表权 ",
                        " 发行权  <br/> ",
                        " 展览权 ",
                        " 署名权  <br/> "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>暂无</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303708",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626519307",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "263",
                    "three_id": "244",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "2023年5月真题",
                        "2023年5月真题"
                    ],
                    "single_score": 0,
                    "index": 66,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "67",
                    "correlation_time": "1666605898",
                    "question_id": "303709",
                    "difficulty_id": "3",
                    "question_title": "以下关于计算机软件著作权的叙述中，正确的是 （67） 。",
                    "option": [
                        "软件著作权自软件开发完成之日生效",
                        "非法进行拷贝、发布或更改软件的人被称为软件盗版者",
                        "开发者在单位或组织中任职期间所开发软件的著作权应归个人所有",
                        "用户购买了具有版权的软件，则具有对该软件的使用权和复制权"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>著作权是知识产权中的例外，因为著作权的取得无须经过个别确认，这就是人们常说的“自动保护”原则。软件经过登记后，软件著作权人享有发表权、开发者身份权、使用权、使用许可权和获得报酬权。</p><p>软件著作权自软件开发完成之日起产生。自然人的软件著作权，保护期为自然人终生及其死亡后50年，截止于自然人死亡后第50年的12月31日；软件是合作开发的，截止于最后死亡的自然人死亡后第50年的12月31日。法人或者其他组织的软件著作权，保护期为50年，截止于软件首次发表后第50年的12月31日，但软件自开发完成之日起50年内未发表的不予保护。</p><p>未经软件著作权人许可，修改、翻译、复制、发行著作人的软件的，属于侵权行为，应承担相应的民事、行政和刑事责任。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303709",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626519348",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "知识产权"
                    ],
                    "single_score": 0,
                    "index": 67,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "68",
                    "correlation_time": "1666605898",
                    "question_id": "303710",
                    "difficulty_id": "3",
                    "question_title": "如果A公司购买了一个软件的源程序，A公司将该软件源程序中的所有标识符做了全面修改后，作为该公司的产品销售，这种行为 （68） 。",
                    "option": [
                        "尚不构成侵权",
                        "侵犯了著作权",
                        "侵犯了专利权",
                        "属于不正当竞争"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "仅对源程序的标识符进行修改，如将数组名“arr”修改为“Arr”，程序其他部分不变属于侵犯软件著作权的行为。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303710",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626519374",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "知识产权"
                    ],
                    "single_score": 0,
                    "index": 68,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "69",
                    "correlation_time": "1666605898",
                    "question_id": "303711",
                    "difficulty_id": "3",
                    "question_title": "数学模型常带有多个参数，而参数会随环境因素而变化。根据数学模型求出最优解或满意解后，还需要进行 （69） ，对计算结果进行检验，分析计算结果对参数变化的反应程度。",
                    "option": [
                        "一致性分析",
                        "准确性分析",
                        "灵敏性分析",
                        "似然性分析"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "实际问题的数学模型往往都是近似的，常带有多个参数，而参数会随环境因素而变化。根据数学模型求出最优解或满意解后，还需要进行灵敏性分析，对计算结果进行检验，分析计算结果对参数变化的反应程度。如果对于参数的微小变化引发计算结果的很大变化，那么这种计算结果并不可靠，并不可信。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303711",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626519433",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "应用数学\t"
                    ],
                    "single_score": 0,
                    "index": 69,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "70",
                    "correlation_time": "1666605898",
                    "question_id": "303712",
                    "difficulty_id": "3",
                    "question_title": "某工程项目包括六个作业A～F，各个作业的衔接关系以及所需时间见下表，作业D最多能拖延 （70）天，而不会影响该项目的总工期。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626519443431477.jpg\" title=\"1626519443431477.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        "0",
                        " 1 ",
                        "2",
                        "3"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>关键路径（所需天数最多的路径）∶ ABE，总工期=5 天+7天+2 天=14天。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210717/1626519472505414.jpg\" title=\"1626519472505414.jpg\" alt=\"1.jpg\"/></p><p>作业 D、F 与作业 B、E可并行实施，为不影响总工期，作业 D、F可以在7天+ 2 天=9 天内完成，所以作业 D最多可以延迟 2 天。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303712",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1626519478",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 70,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "71",
                    "correlation_time": "1666605898",
                    "question_id": "303714",
                    "difficulty_id": "3",
                    "question_title": "<p>During the systems analysis phase, you must decide how data will be organized, stored, and managed. A &nbsp;（71） &nbsp;is a framework for organizing, storing, and managing data. Each file or table contains data about people, places, things, or events. One of the potential problems existing in a file processing environment is &nbsp;（72） , which means that data common to two or more information systems is stored in several places.</p><p>In a DBMS, the linked tables form a unified data structure that greatly improves data quality and access. A(n) &nbsp;（73） &nbsp;is a model that shows the logical relationships and interaction among system entities. It provides an overall view of the system and a blueprint for creating the physical data structures. &nbsp;（74） &nbsp;is the process of creating table designs by assigning specific fields or attributes to each table in the database. A table design specifies the fields and identifies the primary key in a particular table or file. The three normal forms constitute a progression in which &nbsp;（75） &nbsp;represents the best design. Most business-related databases must be designed in that form.</p>",
                    "option": [
                        "data entity",
                        "data structure",
                        "file collection",
                        "data definition"
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在系统分析阶段，必须决定如何组织、存储和管理数据。数据结构是组织、存储和管理数据的一个框架。每个文件或表都包含有关人物、地点、事物或事件的数据。文件处理环境中存在的潜在问题之一是数据冗余，这意味着两个或多个信息系统共用的数据存储在多个不同位置。</p><p>在数据库管理系统(DBMS)中，相互连接的表形成了一个统一的数据结构，极大地提高了数据质量和访问能力。实体关系图是显示系统实体之间的逻辑关系和交互的模型。它提供了系统的总体视图和用于创建物理数据结构的蓝图。规范化是通过为数据库中的每个表分配特定字段或属性来创建表设计的过程。表设计指定字段并标识特定表或文件中的主键。三种范式构成了一个渐进过程，其中第三范式代表了好的设计。大部分与业务相关的数据库都必须以这种形式设计。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303713",
                    "sort_son": "1",
                    "creater_name": "试题账号",
                    "create_time": "1626519604",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 71,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "72",
                    "correlation_time": "1666605898",
                    "question_id": "303715",
                    "difficulty_id": "3",
                    "question_title": "<p>During the systems analysis phase, you must decide how data will be organized, stored, and managed. A &nbsp;（71） &nbsp;is a framework for organizing, storing, and managing data. Each file or table contains data about people, places, things, or events. One of the potential problems existing in a file processing environment is &nbsp;（72） , which means that data common to two or more information systems is stored in several places.</p><p>In a DBMS, the linked tables form a unified data structure that greatly improves data quality and access. A(n) &nbsp;（73） &nbsp;is a model that shows the logical relationships and interaction among system entities. It provides an overall view of the system and a blueprint for creating the physical data structures. &nbsp;（74） &nbsp;is the process of creating table designs by assigning specific fields or attributes to each table in the database. A table design specifies the fields and identifies the primary key in a particular table or file. The three normal forms constitute a progression in which &nbsp;（75） &nbsp;represents the best design. Most business-related databases must be designed in that form.</p>",
                    "option": [
                        "data integrity",
                        "the rigid data structure",
                        "data redundancy",
                        "the many-to-many relationship"
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在系统分析阶段，必须决定如何组织、存储和管理数据。数据结构是组织、存储和管理数据的一个框架。每个文件或表都包含有关人物、地点、事物或事件的数据。文件处理环境中存在的潜在问题之一是数据冗余，这意味着两个或多个信息系统共用的数据存储在多个不同位置。</p><p>在数据库管理系统(DBMS)中，相互连接的表形成了一个统一的数据结构，极大地提高了数据质量和访问能力。实体关系图是显示系统实体之间的逻辑关系和交互的模型。它提供了系统的总体视图和用于创建物理数据结构的蓝图。规范化是通过为数据库中的每个表分配特定字段或属性来创建表设计的过程。表设计指定字段并标识特定表或文件中的主键。三种范式构成了一个渐进过程，其中第三范式代表了好的设计。大部分与业务相关的数据库都必须以这种形式设计。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303713",
                    "sort_son": "2",
                    "creater_name": "试题账号",
                    "create_time": "1626519604",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 72,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "73",
                    "correlation_time": "1666605898",
                    "question_id": "303716",
                    "difficulty_id": "3",
                    "question_title": "<p>During the systems analysis phase, you must decide how data will be organized, stored, and managed. A &nbsp;（71） &nbsp;is a framework for organizing, storing, and managing data. Each file or table contains data about people, places, things, or events. One of the potential problems existing in a file processing environment is &nbsp;（72） , which means that data common to two or more information systems is stored in several places.</p><p>In a DBMS, the linked tables form a unified data structure that greatly improves data quality and access. A(n) &nbsp;（73） &nbsp;is a model that shows the logical relationships and interaction among system entities. It provides an overall view of the system and a blueprint for creating the physical data structures. &nbsp;（74） &nbsp;is the process of creating table designs by assigning specific fields or attributes to each table in the database. A table design specifies the fields and identifies the primary key in a particular table or file. The three normal forms constitute a progression in which &nbsp;（75） &nbsp;represents the best design. Most business-related databases must be designed in that form.</p>",
                    "option": [
                        "entity-relationship diagram",
                        "data dictionary",
                        "database schema",
                        "physical database model"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在系统分析阶段，必须决定如何组织、存储和管理数据。数据结构是组织、存储和管理数据的一个框架。每个文件或表都包含有关人物、地点、事物或事件的数据。文件处理环境中存在的潜在问题之一是数据冗余，这意味着两个或多个信息系统共用的数据存储在多个不同位置。</p><p>在数据库管理系统(DBMS)中，相互连接的表形成了一个统一的数据结构，极大地提高了数据质量和访问能力。实体关系图是显示系统实体之间的逻辑关系和交互的模型。它提供了系统的总体视图和用于创建物理数据结构的蓝图。规范化是通过为数据库中的每个表分配特定字段或属性来创建表设计的过程。表设计指定字段并标识特定表或文件中的主键。三种范式构成了一个渐进过程，其中第三范式代表了好的设计。大部分与业务相关的数据库都必须以这种形式设计。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303713",
                    "sort_son": "3",
                    "creater_name": "试题账号",
                    "create_time": "1626519604",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 73,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "74",
                    "correlation_time": "1666605898",
                    "question_id": "303717",
                    "difficulty_id": "3",
                    "question_title": "<p>During the systems analysis phase, you must decide how data will be organized, stored, and managed. A &nbsp;（71） &nbsp;is a framework for organizing, storing, and managing data. Each file or table contains data about people, places, things, or events. One of the potential problems existing in a file processing environment is &nbsp;（72） , which means that data common to two or more information systems is stored in several places.</p><p>In a DBMS, the linked tables form a unified data structure that greatly improves data quality and access. A(n) &nbsp;（73） &nbsp;is a model that shows the logical relationships and interaction among system entities. It provides an overall view of the system and a blueprint for creating the physical data structures. &nbsp;（74） &nbsp;is the process of creating table designs by assigning specific fields or attributes to each table in the database. A table design specifies the fields and identifies the primary key in a particular table or file. The three normal forms constitute a progression in which &nbsp;（75） &nbsp;represents the best design. Most business-related databases must be designed in that form.</p>",
                    "option": [
                        "Normalization",
                        "Replication",
                        "Partitioning",
                        "Optimization"
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在系统分析阶段，必须决定如何组织、存储和管理数据。数据结构是组织、存储和管理数据的一个框架。每个文件或表都包含有关人物、地点、事物或事件的数据。文件处理环境中存在的潜在问题之一是数据冗余，这意味着两个或多个信息系统共用的数据存储在多个不同位置。</p><p>在数据库管理系统(DBMS)中，相互连接的表形成了一个统一的数据结构，极大地提高了数据质量和访问能力。实体关系图是显示系统实体之间的逻辑关系和交互的模型。它提供了系统的总体视图和用于创建物理数据结构的蓝图。规范化是通过为数据库中的每个表分配特定字段或属性来创建表设计的过程。表设计指定字段并标识特定表或文件中的主键。三种范式构成了一个渐进过程，其中第三范式代表了好的设计。大部分与业务相关的数据库都必须以这种形式设计。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303713",
                    "sort_son": "4",
                    "creater_name": "试题账号",
                    "create_time": "1626519604",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 74,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                },
                {
                    "every_score": "1",
                    "rank": "75",
                    "correlation_time": "1666605898",
                    "question_id": "303718",
                    "difficulty_id": "3",
                    "question_title": "<p>During the systems analysis phase, you must decide how data will be organized, stored, and managed. A &nbsp;（71） &nbsp;is a framework for organizing, storing, and managing data. Each file or table contains data about people, places, things, or events. One of the potential problems existing in a file processing environment is &nbsp;（72） , which means that data common to two or more information systems is stored in several places.</p><p>In a DBMS, the linked tables form a unified data structure that greatly improves data quality and access. A(n) &nbsp;（73） &nbsp;is a model that shows the logical relationships and interaction among system entities. It provides an overall view of the system and a blueprint for creating the physical data structures. &nbsp;（74） &nbsp;is the process of creating table designs by assigning specific fields or attributes to each table in the database. A table design specifies the fields and identifies the primary key in a particular table or file. The three normal forms constitute a progression in which &nbsp;（75） &nbsp;represents the best design. Most business-related databases must be designed in that form.</p>",
                    "option": [
                        "standard notation form",
                        "first normal form",
                        "second normal form",
                        "third normal form"
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在系统分析阶段，必须决定如何组织、存储和管理数据。数据结构是组织、存储和管理数据的一个框架。每个文件或表都包含有关人物、地点、事物或事件的数据。文件处理环境中存在的潜在问题之一是数据冗余，这意味着两个或多个信息系统共用的数据存储在多个不同位置。</p><p>在数据库管理系统(DBMS)中，相互连接的表形成了一个统一的数据结构，极大地提高了数据质量和访问能力。实体关系图是显示系统实体之间的逻辑关系和交互的模型。它提供了系统的总体视图和用于创建物理数据结构的蓝图。规范化是通过为数据库中的每个表分配特定字段或属性来创建表设计的过程。表设计指定字段并标识特定表或文件中的主键。三种范式构成了一个渐进过程，其中第三范式代表了好的设计。大部分与业务相关的数据库都必须以这种形式设计。</p>",
                    "question_type": "9",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "303713",
                    "sort_son": "5",
                    "creater_name": "试题账号",
                    "create_time": "1626519605",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "完形类单选题",
                    "examine_id": "12018",
                    "type": "3",
                    "title": "2019年11月系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "22",
                    "max_score": "75",
                    "exam_num": "1880",
                    "person_num": "484",
                    "avg_time": "41.1",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 75,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 1
                }
            ],
            "summary": {
                "radio": {
                    "total_question": 75,
                    "total_score": 75,
                    "question_types": [
                        1,
                        9,
                        11
                    ]
                },
                "multiple": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        2,
                        12
                    ]
                },
                "budingxiang": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        7
                    ]
                },
                "judge": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        3,
                        13
                    ]
                },
                "cloze": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        8
                    ]
                },
                "fill": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        4
                    ]
                },
                "qanda": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        5,
                        14
                    ]
                },
                "program": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        6
                    ]
                },
                "material": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        10
                    ]
                }
            }
        },
        "pagination": {
            "curPage": 1,
            "pageSize": 250,
            "total": 75,
            "hasNextPage": false
        },
        "totalOrder": [
            {
                "index": 1,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 2,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 3,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 4,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 5,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 6,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 7,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 8,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 9,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 10,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 11,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 12,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 13,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 14,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 15,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 16,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 17,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 18,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 19,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 20,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 21,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 22,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 23,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 24,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 25,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 26,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 27,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 28,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 29,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 30,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 31,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 32,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 33,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 34,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 35,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 36,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 37,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 38,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 39,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 40,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 41,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 42,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 43,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 44,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 45,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 46,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 47,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 48,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 49,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 50,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 51,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 52,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 53,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 54,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 55,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 56,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 57,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 58,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 59,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 60,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 61,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 62,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 63,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 64,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 65,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 66,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 67,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 68,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 69,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 70,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 71,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 72,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 73,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 74,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 75,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            }
        ]
    }
}
