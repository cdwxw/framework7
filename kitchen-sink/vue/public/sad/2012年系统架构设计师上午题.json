{
    "msg": "成功",
    "status": 0,
    "data": {
        "data": {
            "examine": {
                "examine_id": 8334,
                "answer_id": "3940072",
                "title": "2012年系统架构设计师上午题",
                "len_time": 0,
                "total_score": "75",
                "get_score": "0",
                "total_question": 75,
                "proposal": "",
                "proposalList": [
                    {
                        "proposal": "",
                        "comment_time": "0",
                        "log_id": "8588724"
                    }
                ],
                "platform_id": "2",
                "submit_limit_num": "0",
                "version_id": "0",
                "version_year": "0",
                "mark_question_ids": []
            },
            "question": [
                {
                    "every_score": "1",
                    "rank": "1",
                    "correlation_time": "0",
                    "question_id": "208394",
                    "difficulty_id": "3",
                    "question_title": "假设系统中有n个进程共享3台打印机，任一进程在任一时刻最多只能使用1台打印机。若用PV操作控制n个进程使用打印机，则相应信号量s的取值范围为（请作答此空）；若信号量S的值为-3，则系统中有（ ）个进程等待使用打印机。",
                    "option": [
                        " 0，-1，…，-(n-1) ",
                        " 3，2，1，0，-1，…，-(n-3) ",
                        " 1，0，-1，…，-(n-1) ",
                        " 2，1，0，-1，…，-(n-2) "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "试题(1)的正确答案为选项B。根据题意，假设系统中有n个进程共享3台打印机，意味着每次只允许3个进程进入互斥段，那么信号量的初值应为3。可见，根据排除法只有选项B中含有3。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208394",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446086",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 1,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "2",
                    "correlation_time": "0",
                    "question_id": "208395",
                    "difficulty_id": "3",
                    "question_title": "假设系统中有n个进程共享3台打印机，任一进程在任一时刻最多只能使用1台打印机。若用PV操作控制n个进程使用打印机，则相应信号量s的取值范围为（ ）；若信号量S的值为-3，则系统中有（请作答此空）个进程等待使用打印机。",
                    "option": [
                        " 0 ",
                        " 1 ",
                        " 2 ",
                        " 3 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "试题(2)的正确答案为选项D。信号量S的物理意义为：当S≥0时，表示资源的可用数；当S＜0时，其绝对值表示等待资源的进程数。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208395",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446118",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 2,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "3",
                    "correlation_time": "0",
                    "question_id": "208396",
                    "difficulty_id": "3",
                    "question_title": "假设文件系统采用索引节点管理，且索引节点有8个地址项iaddr[0]～iaddr[7]，每个地址项大小为4B，iaddr[0]～iaddr[4]采用直接地址索引，iaddr[5]和iaddr[6]采用一级间接地址索引，iaddr[7]采用二级间接地址索引。假设磁盘索引块和磁盘数据块大小均为1KB字节，文件File1的索引节点如下图所示。若用户访问文件File1中逻辑块号为5和261的信息，则对应的物理块号分别为（请作答此空）；101号物理块存放的是（ ）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191227/1577446260952413.jpg\" title=\"1577446260952413.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        " 89和90 ",
                        " 89和136 ",
                        " 58和187 ",
                        " 90和136 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>根据题意，磁盘索引块为1KB，每个地址项大小为4B，故每个磁盘索引块可存放1024/4=256个物理块地址。又因为文件索引节点中有8个地址项，其中5个地址项为直接地址索引，这意味着逻辑块号为0～4的为直接地址索引；2个地址项是一级间接地址索引，其中第一个地址项指出的物理块中是一张一级间接地址索引表，存放逻辑块号为5～260对应的物理块号，第二个地址项指出的物理块中是另一张一级间接地址索引表，存放逻辑块号为261～516对应的物理块号。经上分析，从题图不难看出，逻辑块号为5的信息应该存放在58号物理块中，逻辑块号为261的信息应该存放在187号物理块中。</p><p>由题中可知，iaddr[7]采用二级间接地址索引，且iaddr[7]中存放的物理块号为101。1个地址项是二级间接地址索引，这意味着该地址项指出的物理块中存放的是256个一级间接地址索引表，故101号物理块存放的是二级间接地址索引表。</p><br/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208396",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446274",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 3,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "4",
                    "correlation_time": "0",
                    "question_id": "208397",
                    "difficulty_id": "3",
                    "question_title": "假设文件系统采用索引节点管理，且索引节点有8个地址项iaddr[0]～iaddr[7]，每个地址项大小为4B，iaddr[0]～iaddr[4]采用直接地址索引，iaddr[5]和iaddr[6]采用一级间接地址索引，iaddr[7]采用二级间接地址索引。假设磁盘索引块和磁盘数据块大小均为1KB字节，文件File1的索引节点如下图所示。若用户访问文件File1中逻辑块号为5和261的信息，则对应的物理块号分别为（ ）；101号物理块存放的是（请作答此空）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191227/1577446321751283.jpg\" title=\"1577446321751283.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        " File1的信息 ",
                        " 直接地址索引表 ",
                        " 一级地址索引表 ",
                        " 二级地址索引表 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>根据题意，磁盘索引块为1KB，每个地址项大小为4B，故每个磁盘索引块可存放1024/4=256个物理块地址。又因为文件索引节点中有8个地址项，其中5个地址项为直接地址索引，这意味着逻辑块号为0～4的为直接地址索引；2个地址项是一级间接地址索引，其中第一个地址项指出的物理块中是一张一级间接地址索引表，存放逻辑块号为5～260对应的物理块号，第二个地址项指出的物理块中是另一张一级间接地址索引表，存放逻辑块号为261～516对应的物理块号。经上分析，从题图不难看出，逻辑块号为5的信息应该存放在58号物理块中，逻辑块号为261的信息应该存放在187号物理块中。</p><p>由题中可知，iaddr[7]采用二级间接地址索引，且iaddr[7]中存放的物理块号为101。1个地址项是二级间接地址索引，这意味着该地址项指出的物理块中存放的是256个一级间接地址索引表，故101号物理块存放的是二级间接地址索引表。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208397",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446333",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 4,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "5",
                    "correlation_time": "0",
                    "question_id": "208398",
                    "difficulty_id": "3",
                    "question_title": "<p>在数据库设计的需求分析阶段应当形成（请作答此空），这些文档可以作为（ ）阶段的设计依据。</p>",
                    "option": [
                        " 程序文档、数据字典和数据流图 ",
                        " 需求说明文档、程序文档和数据流图 ",
                        " 需求说明文档、数据字典和数据流图 ",
                        " 需求说明文档、数据字典和程序文档 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>数据库设计主要分为用户需求分析、概念结构、逻辑结构和物理结构设计四个阶段。其中，在用户需求分析阶段中，数据库设计人员采用一定的辅助工具对应用对象的功能、性能、 限制等要求所进行的科学分析，并形成需求说明文档、数据字典和数据流程图。用户需求分析阶段形成的相关文档用以作为概念结构设计的设计依据。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208398",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446364",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 5,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "6",
                    "correlation_time": "0",
                    "question_id": "208399",
                    "difficulty_id": "3",
                    "question_title": "在数据库设计的需求分析阶段应当形成（ ），这些文档可以作为（请作答此空）阶段的设计依据。",
                    "option": [
                        " 逻辑结构设计 ",
                        " 概念结构设计 ",
                        " 物理结构设计 ",
                        " 数据库运行和维护 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "数据库设计主要分为用户需求分析、概念结构、逻辑结构和物理结构设计四个阶段。其中，在用户需求分析阶段中，数据库设计人员采用一定的辅助工具对应用对象的功能、性能、 限制等要求所进行的科学分析，并形成需求说明文档、数据字典和数据流程图。用户需求分析阶段形成的相关文档用以作为概念结构设计的设计依据。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208399",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446443",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 6,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "7",
                    "correlation_time": "0",
                    "question_id": "208400",
                    "difficulty_id": "3",
                    "question_title": "某商场商品数据库的商品关系模式P(商品代码，商品名称，供应商，联系方式，库存量)，函数依赖集F={商品代码→商品名称，(商品代码，供应商)→库存量，供应商→联系方式}。商品关系模式P达到（请作答此空）；该关系模式分解成（ ）后，具有无损连接的特性，并能够保持函数依赖。",
                    "option": [
                        " 1NF ",
                        " 2NF ",
                        " 3NF ",
                        " BCNF "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>根据题意，零件P关系中的(商品代码，供应商)可决定的零件P关系的所有属性，所以零件P关系的主键为(商品代码，供应商)；又因为，根据题意(商品代码，供应商)→商品名称，而商品代码→商品名称，存在部分依赖关系不满足2NF，因此该关系模式属于1NF。</p><p>由于关系模式P属于1NF，1NF存在冗余度大、修改操作的不一致性、插入异常和删除异常四个问题。所以需要对模式分解，其中选项A、选项B和选项C分解后的P1∩P2=?，是有损连接，并且分解后的关系式丢失了函数依赖，如选项A中的P1(商品代码，联系方式)与原F关系式中的“商品代码→商品”不相符，即不保持函数依赖。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208400",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446488",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 7,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "8",
                    "correlation_time": "0",
                    "question_id": "208401",
                    "difficulty_id": "3",
                    "question_title": "某商场商品数据库的商品关系模式P(商品代码，商品名称，供应商，联系方式，库存量)，函数依赖集F={商品代码→商品名称，(商品代码，供应商)→库存量，供应商→联系方式}。商品关系模式P达到（ ）；该关系模式分解成（请作答此空）后，具有无损连接的特性，并能够保持函数依赖。",
                    "option": [
                        " P1(商品代码，联系方式)，P2(商品名称，供应商，库存量) ",
                        " P1(商品名称，联系方式)，P2(商品代码，供应商，库存量) ",
                        " P1(商品代码，商品名称，联系方式)，P2(供应商，库存量) ",
                        " P1(商品代码，商品名称)，P2(商品代码，供应商，库存量)，P3(供应商，联系方式) "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>根据题意，零件P关系中的(商品代码，供应商)可决定的零件P关系的所有属性，所以零件P关系的主键为(商品代码，供应商)；又因为，根据题意(商品代码，供应商)→商品名称，而商品代码→商品名称，存在部分依赖关系不满足2NF，因此该关系模式属于1NF。</p><p>由于关系模式P属于1NF，1NF存在冗余度大、修改操作的不一致性、插入异常和删除异常四个问题。所以需要对模式分解，其中选项A、选项B和选项C分解后的P1∩P2=?，是有损连接，并且分解后的关系式丢失了函数依赖，如选项A中的P1(商品代码，联系方式)与原F关系式中的“商品代码→商品”不相符，即不保持函数依赖。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208401",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446519",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 8,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "9",
                    "correlation_time": "0",
                    "question_id": "208402",
                    "difficulty_id": "3",
                    "question_title": "以下关于软件中间件的叙述，错误的是（ ）。",
                    "option": [
                        " 中间件通过标准接口实现与应用程序的关联，提供特定功能的服务 ",
                        " 使用中间件可以提高应用软件可移植性 ",
                        " 使用中间件将增加应用软件设计的复杂度 ",
                        " 使用中间件有助于提高开发效率 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。</p><p>软件中间件的作用是为处于自己上层的应用软件提供运行与开发的环境，帮助用户开发和集成应用软件。它不仅仅要实现互连，还要实现应用之间的互操作。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208402",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446569",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 9,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "10",
                    "correlation_time": "0",
                    "question_id": "208403",
                    "difficulty_id": "3",
                    "question_title": "以下关于嵌入式系统开发的叙述，正确的是（ ）。",
                    "option": [
                        " 宿主机与目标机之间只需要建立逻辑连接 ",
                        " 宿主机与目标机之间只能采用串口通信方式 ",
                        " 在宿主机上必须采用交叉编译器来生成目标机的可执行代码 ",
                        " 调试器与被调试程序必须安装在同一台机器上 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在嵌入式系统开发中，由于嵌入式设备不具备足够的处理器能力和存储空间，程序开发一般用PC(宿主机)来完成，然后将可执行文件下载到嵌入式系统(目标机)中运行。</p><p>当宿主机与目标机的机器指令不同时，就需要交叉工具链(指编译、汇编、链接等一整套工具)。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208403",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446603",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统架构与集成技术"
                    ],
                    "single_score": 0,
                    "index": 10,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "11",
                    "correlation_time": "0",
                    "question_id": "208404",
                    "difficulty_id": "3",
                    "question_title": "以下关于嵌入式系统硬件抽象层的叙述，错误的是（ ）。",
                    "option": [
                        " 硬件抽象层与硬件密切相关，可对操作系统隐藏硬件的多样性 ",
                        " 硬件抽象层将操作系统与硬件平台隔开 ",
                        " 硬件抽象层使软硬件的设计与调试可以并行 ",
                        " 硬件抽象层应包括设备驱动程序和任务调度 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "硬件抽象层是位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化。它隐藏了特定平台的硬件接口细节，为操作系统提供虚拟硬件平台，使其具有硬件无关性，可在多种平台上进行移植。在基于硬件抽象层的开发中，软硬件的设计和调试具有无关性，并可完全地并行进行。硬件的错误不会影响到系统软件的调试，同样软件设计的错误也不会影响硬件。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208404",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446633",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 11,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "12",
                    "correlation_time": "0",
                    "question_id": "208405",
                    "difficulty_id": "3",
                    "question_title": "（ ）不是反映嵌入式实时操作系统实时性的评价指标。",
                    "option": [
                        " 任务执行时间 ",
                        " 中断响应和延迟时间 ",
                        " 任务切换时间 ",
                        " 信号量混洗时间 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一个嵌入式实时操作系统(BTOS)的评价要从很多角度进行，如体系结构、API的丰富程度、网络支持、可靠性等。其中，实时性是RTOS评价的最重要的指标之一，实时性的优劣是用户选择操作系统的一个重要参考。</p><p>严格地说，影响嵌入式操作系统实时性的因素有很多，如常用系统调用平均运行时间、任务切换时间、线程切换时间、信号量混洗时间(指从一个任务释放信号量到另一个等待该信号量的任务被激活的时间延迟)、中断响应时间等。</p><p>任务执行时间不是反映RTOS实时性的评价指标。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208405",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446661",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "操作系统\t"
                    ],
                    "single_score": 0,
                    "index": 12,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "13",
                    "correlation_time": "0",
                    "question_id": "208406",
                    "difficulty_id": "3",
                    "question_title": "以下关于网络控制的叙述，正确的是（ ）。",
                    "option": [
                        " 由于TCP的窗口大小是固定的，所以防止拥塞的方法只能是超时重发 ",
                        " 在前向纠错系统中，当接收端检测到错误后就要请求发送端重发出错分组 ",
                        " 在滑动窗口协议中，窗口的大小以及确认应答使得可以连续发送多个数据 ",
                        " 在数据报系统中，所有连续发送的数据都可以沿着预先建立的虚通路传送 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "TCP采用可变大小的滑动窗口协议进行流量控制。在前向纠错系统中，当接收端检测到错误后就根据纠错编码的规律自行纠错；在后向纠错系统中，接收方会请求发送方重发出错分组。IP协议不预先建立虚电路，而是对每个数据报独立地选择路由并一站一站地进行转发，直到送达目标地。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208406",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446687",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 13,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "14",
                    "correlation_time": "0",
                    "question_id": "208407",
                    "difficulty_id": "3",
                    "question_title": "以下关于域名服务器的叙述，错误的是（ ）。",
                    "option": [
                        " 本地缓存域名服务不需要域名数据库 ",
                        " 顶级域名服务器是最高层次的域名服务器 ",
                        " 本地域名服务器可以采用递归查询和迭代查询两种查询方式 ",
                        " 权限服务器负责将其管辖区内的主机域名转换为该主机的IP地址 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>可提供域名服务的包括本地缓存、本地域名服务器、权限域名服务器、顶级域名服务器以及根域名服务器。DNS主机名解析的查找顺序是，先查找客户端本地缓存，如果没有成功，则向DNS服务器发出解析请求。</p><p>本地缓存是内存中的一块区域，保存着最近被解析的主机名及其IP地址映像。由于解析程序缓存常驻内存中，所以比其他解析方法速度快。</p><p>当一个主机发出DNS查询报文时，这个查询报文就首先被送往该主机的本地域名服务器。本地域名服务器离用户较近，当所要查询的主机也属于同一个本地ISP时，该本地域名服务器立即就能将所查询的主机名转换为它的IP地址，而不需要再去询问其他的域名服务器。</p><p>每一个区都设置有域名服务器，即权限服务器，它负责将其管辖区内的主机域名转换为该主机的IP地址。在其上保存有所管辖区内的所有主机域名到IP地址的映射。</p><p>顶级域名服务器负责管理在本顶级域名服务器上注册的所有二级域名。当收到DNS查询请求时，能够将其管辖的二级域名转换为该二级域名的IP地址。或者是下一步应该找寻的域名服务器的IP地址。</p><p>根域名服务器是最高层次的域名服务器。每一个根域名服务器都要存有所有顶级域名服务器的IP地址和域名。当一个本地域名服务器对一个域名无法解析时，就会直接找到根域名服务器，然后根域名服务器会告知它应该去找哪一个顶级域名服务器进行查询。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208407",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446740",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 14,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "15",
                    "correlation_time": "0",
                    "question_id": "208408",
                    "difficulty_id": "3",
                    "question_title": "以下关于网络存储的叙述，正确的是（ ）。",
                    "option": [
                        " DAS支持完全跨平台文件共享，支持所有的操作系统 ",
                        " NAS通过SCSI连接至服务器，通过服务器网卡在网络上传输数据 ",
                        " FC SAN的网络介质为光纤通道，而IP SAN使用标准的以太网 ",
                        " SAN设备有自己的文件管理系统，NAS中的存储设备没有文件管理系统 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>DAS(Direct Attached Storage，直接附加存储)即直连方式存储。在这种方式中，存储设备是通过电缆(通常是SCSI接口电缆)直接连接服务器。I/O(输入/输入)请求直接发送到存储设备。DAS也可称为SAS(Server-Attached Storage，服务器附加存储)。它依赖于服务器，其本身是硬件的堆叠，不带有任何存储操作系统，DAS不能提供跨平台文件共享功能，各系统平台下文件需分别存储。</p><p>NAS是(Network Attached Storage)的简称，中文称为网络附加存储。在NAS存储结构中，存储系统不再通过I/O总线附属于某个特定的服务器或客户机，而是直接通过网络接口与网络直接相连，由用户通过网络来访问。</p><p>NAS设备有自己的OS，其实际上是一个带有瘦服务的存储设备，其作用类似于一个专用的文件服务器，不过把显示器，键盘，鼠标等设备省去，NAS用于存储服务，可以大大降低了存储设备的成本，另外NAS中的存储信息都是采用RAID方式进行管理的，从而有效的保护了数据。</p><p>SAN是通过专用高速网将一个或多个网络存储设备和服务器连接起来的专用存储系统，未来的信息存储将以SAN存储方式为主。SAN主要采取数据块的方式进行数据和信息的存储，目前主要使用于以太网(IP SAN)和光纤通道(FC SAN)两类环境中。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208408",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446768",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 15,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "16",
                    "correlation_time": "0",
                    "question_id": "208409",
                    "difficulty_id": "3",
                    "question_title": "以下关于软件架构风格与系统性能关系的叙述，错误的是（ ）。",
                    "option": [
                        " 对于采用层次化架构风格的系统，划分的层次越多，系统的性能越差 ",
                        " 对于采用管道一过滤器架构风格的系统，可以通过引入过滤器的数据并发处理提高系统性能 ",
                        " 对于采用面向对象架构风格的系统，可以通过减少功能调用层次提高系统性能 ",
                        " 对于采用过程调用架构风格的系统，可以通过将显式调用策略替换为隐式调用策略提高系统性能 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "采用层次化架构风格的系统，划分的层次越多，系统完成某项功能需要的中间调用操作越多，其性能越差。采用管道一过滤器架构风格的系统，可以通过引入过滤器的数据并发处理可以有效提高系统性能。采用面向对象架构风格的系统，可以通过减少功能调用层次提高系统性能。对于过程调用架构风格的系统，将显式调用策略替换为隐式调用策略能够提高系统的灵活性，但会降低系统的性能。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208409",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446807",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 16,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "17",
                    "correlation_time": "0",
                    "question_id": "208410",
                    "difficulty_id": "3",
                    "question_title": "峰值MIPS(每秒百万次指令数)用来描述计算机的定点运算速度，通过对计算机指令集中基本指令的执行速度计算得到。假设某计算机中基本指令的执行需要5个机器周期，每个机器周期为3微秒，则该计算机的定点运算速度为（ ）MIPS。",
                    "option": [
                        " 8 ",
                        " 15 ",
                        " 0.125 ",
                        " 0.067 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "峰值MIPS是衡量CPU速度的一个指标。根据题干描述，假设某计算机中基本指令的执行需要5个机器周期，每个机器周期为3微秒，则该计算机每完成一个基本指令需要5×3=15微秒，根据峰值MIPS的定义，其定点运算速度为1/15=0.067MIPS，特别需要注意单位“微秒”和“百万指令数”，在计算过程中恰好抵消。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208410",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446864",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 17,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "18",
                    "correlation_time": "0",
                    "question_id": "208411",
                    "difficulty_id": "3",
                    "question_title": "ERP中的企业资源包括（ ）。",
                    "option": [
                        " 物流、资金流和信息流 ",
                        " 物流、工作流和信息流 ",
                        " 物流、资金流和工作流 ",
                        " 资金流、工作流和信息流 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "ERP是针对物资资源管理（物流）、人力资源管理（人流）、财务资源管理（财流）、信息资源管理（信息流）集成一体化的企业管理软件。它将包含客户/服务架构，使用图形用户接口，应用开放系统制作。除了已有的标准功能，它还包括其它特性，如品质、过程运作管理、以及调整报告等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208411",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446926",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 18,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "19",
                    "correlation_time": "0",
                    "question_id": "208412",
                    "difficulty_id": "3",
                    "question_title": "CRM是一套先进的管理思想及技术手段，它通过将（请作答此空）进行有效的整合，最终为企业涉及到的各个领域提供了集成环境。CRM系统的四个主要模块包括（ ）。",
                    "option": [
                        " 员工资源、客户资源与管理技术 ",
                        " 销售资源、信息资源与商业智能 ",
                        " 销售管理、市场管理与服务管理 ",
                        " 人力资源、业务流程与专业技术 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "通常所指的CRM，指用计算机自动化分析销售、市场营销、客户服务以及应用等流程的软件系统。它的目标是通过提高客户的价值、满意度、赢利性和忠实度来缩减销售周期和销售成本、增加收入、寻找扩展业务所需的新的市场和渠道。CRM通过将人力资源、业务流程与专业技术进行有效的整合，最终为企业涉及到客户或者消费者的各个领域提供了完美的集成，使得企业可以更低成本、更高效率地满足客户的需求，并与客户建立起基于学习性关系基础上的一对一营销模式，从而让企业可以最大程度提高客户满意度和忠诚度。CRM系统的主要模块包括销售自动化、营销自动化、客户服务与支持、商业智能。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208412",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446986",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 19,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "20",
                    "correlation_time": "0",
                    "question_id": "208413",
                    "difficulty_id": "3",
                    "question_title": "CRM是一套先进的管理思想及技术手段，它通过将（ ）进行有效的整合，最终为企业涉及到的各个领域提供了集成环境。CRM系统的四个主要模块包括（请作答此空）。",
                    "option": [
                        " 电子商务支持、呼叫中心、移动设备支持、数据分析 ",
                        " 信息分析、网络应用支持、客户信息仓库、工作流集成 ",
                        " 销售自动化、营销自动化、客户服务与支持、商业智能 ",
                        " 销售管理、市场管理、服务管理、现场服务管理 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "通常所指的CRM，指用计算机自动化分析销售、市场营销、客户服务以及应用等流程的软件系统。它的目标是通过提高客户的价值、满意度、赢利性和忠实度来缩减销售周期和销售成本、增加收入、寻找扩展业务所需的新的市场和渠道。CRM通过将人力资源、业务流程与专业技术进行有效的整合，最终为企业涉及到客户或者消费者的各个领域提供了完美的集成，使得企业可以更低成本、更高效率地满足客户的需求，并与客户建立起基于学习性关系基础上的一对一营销模式，从而让企业可以最大程度提高客户满意度和忠诚度。CRM系统的主要模块包括销售自动化、营销自动化、客户服务与支持、商业智能。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208413",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447029",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 20,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "21",
                    "correlation_time": "0",
                    "question_id": "208414",
                    "difficulty_id": "3",
                    "question_title": "企业信息化程度是国家信息化建设的基础和关键，企业信息化方法不包括（ ）。",
                    "option": [
                        " 业务流程重组 ",
                        " 组织机构变革 ",
                        " 供应链管理 ",
                        " 人力资本投资 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "企业信息化就是企业利用现代信息技术，通过信息资源的深入开发和广泛利用，实现企业生产过程的自动化、管理方式的网络化、决策支持的智能化和商务运营的电子化，不断提高生产、经营、管理、决策的效率和水平，进而提高企业经济效益和企业竞争力的过程。企业信息化方法主要包括业务流程重构、核心业务应用、信息系统建设、主题数据库、资源管理和人力资本投资方法。其中资源管理方法包括：ERP（Enterprise Resource Planning企业资源计划）、SCM（Supply Chain Management 供应链管理）。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208414",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447051",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 21,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "22",
                    "correlation_time": "0",
                    "question_id": "208415",
                    "difficulty_id": "3",
                    "question_title": "企业信息资源集成管理的前提是对企业（请作答此空）的集成，其核心是对企业（ ）的集成。",
                    "option": [
                        " 信息功能 ",
                        " 信息设施 ",
                        " 信息活动 ",
                        " 信息处理 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "实行企业信息资源集成的前提是对企业历史上形成的企业信息功能的集成，其核心是对企业内部和外部信息流的集成，其实施的基础是各种信息手段的集成。通过集成管理实现企业信息系统各要素的优化组合，使信息系统各要素之间形成强大的协同作用，从而最大限度地放大企业信息的功能，实现企业可持续发展的目的。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208415",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447091",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 22,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "23",
                    "correlation_time": "0",
                    "question_id": "208416",
                    "difficulty_id": "3",
                    "question_title": "<p>企业信息资源集成管理的前提是对企业（ ）的集成，其核心是对企业（请作答此空）的集成。</p>",
                    "option": [
                        " 业务流 ",
                        " 内部信息流 ",
                        " 外部信息流 ",
                        " 内部和外部信息流 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>本题考查信息资源管理的基本知识。 <br/>集成管理是企业信息资源管理的主要内容之一。<br/>实行企业信息资源集成的前提是对企业历史上形成的企业信息功能的集成，其核心是对企业内部和外部信息流的集成，其实施的基础是各种信息手段的集成。<br/>通过集成管理实现企业信息系统各要素的优化组合，使信息系统各要素之间形成强大的协同作用，从而最大限度地放大企业信息的功能，实现企业可持续发展的目的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208416",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447166",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 23,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "24",
                    "correlation_time": "0",
                    "question_id": "208417",
                    "difficulty_id": "3",
                    "question_title": "为了加强对企业信息资源的管理，企业应按照信息化和现代化企业管理要求设置信息管理机构，建立信息中心。信息中心的主要职能不包括（ ）。",
                    "option": [
                        " 处理信息，确定信息处理的方法 ",
                        " 用先进的信息技术提高业务管理水平 ",
                        " 组织招聘信息资源管理员 ",
                        " 建立业务部门期望的信息系统和网络 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "为了加强对企业信息资源的管理，企业应按照信息化和现代化企业管理要求设置信息管理机构，建立信息中心，确定信息主管，统一管理和协调企业信息资源的开发、收集和使用。信息中心是企业的独立机构，直接由最高层领导并为企业最高管理者提供服务。其主要职能是处理信息，确定信息处理的方法，用先进的信息技术提高业务管理水平，建立业务部门期望的信息系统和网络并预测未来的信息系统和网络，培养信息资源的管理人员等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208417",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447199",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 24,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "25",
                    "correlation_time": "0",
                    "question_id": "208418",
                    "difficulty_id": "3",
                    "question_title": "以下关于软件生存周期模型的叙述，正确的是（ ）。",
                    "option": [
                        " 在瀑布模型中，前一个阶段的错误和疏漏会隐蔽地带到后一个阶段 ",
                        " 在任何情况下使用演化模型，都能在一定周期内由原型演化到最终产品 ",
                        " 软件生存周期模型的主要目标是为了加快软件开发的速度 ",
                        " 当一个软件系统的生存周期结束之后，它就进入到一个新的生存周期模型 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件产品从形成概念开始，经过开发、使用和维护，直到最后退役的全过程成为软件生存周期。一个完整的软件生存周期是以需求为出发点，从提出软件开发计划的那一刻开始，直到软件在实际应用中完全报废为止。软件生存周期的提出了是为了更好地管理、维护和升级软件，其中更大的意义在于管理软件开发的步骤和方法。</p><p>软件生存周期模型又称软件开发模型(software develop model)或软件过程模型(software process model)，它是从某个特定角度提出的软件过程的简化描述。软件生存周期模型主要有瀑布模型、演化模型、原型模型、螺旋模型喷泉模型和基于可重用构件的模型等。</p><p>瀑布模型是最早使用的软件生存周期模型之一。瀑布模型的特点是因果关系紧密相连，前一个阶段工作的结果是后一个阶段工作的输入。或者说，每一个阶段都是建立在前一个阶段的正确结果之上，前一个阶段的错误和疏漏会隐蔽地带入后一个阶段。这种错误有时甚至可能是灾难性的，因此每一个阶段工作完成后，都要进行审查和确认。</p><p>演化模型主要针对事先不能完整定义需求的软件开发，是在快速开发一个原型的基础上，根据用户在调用原型的过程中提出的反馈意见和建议，对原型进行改进，获得原型的新版本，重复这一过程，直到演化成最终的软件产品。演化模型的主要优点是，任何功能一经开发就能进入测试，以便验证是否符合产品需求，可以帮助引导出高质量的产品要求。其主要缺点是，如果不控制地让用户接触开发中尚未稳定的功能，可能对开发人员及用户都会产生负面的影响。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208418",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447242",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 25,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "26",
                    "correlation_time": "0",
                    "question_id": "208419",
                    "difficulty_id": "3",
                    "question_title": "螺旋模型将整个软件开发过程分为多个阶段，每个阶段都由目标设定、（ ）、开发和有效性验证以及评审4个部分组成。",
                    "option": [
                        " 需求分析 ",
                        " 风险分析 ",
                        " 系统设计 ",
                        " 架构设计 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>螺旋模型是在快速原型的基础上扩展而成的一种生存周期模型。这种模型将整个软件开发流程分成多个阶段，每个阶段都由4部分组成，它们是：</p><p>①目标设定。为该项目进行需求分析，定义和确定这一个阶段的专门目标，指定对过程和产品的约束，并且制定详细的管理计划。</p><p>②风险分析。对可选方案进行风险识别和详细分析，制定解决办法，采取有效的措施避免这些风险。</p><p>③开发和有效性验证。风险评估后，可以为系统选择开发模型，并且进行原型开发，即开发软件产品。</p><p>④评审。对项目进行评审，以确定是否需要进入螺旋线的下一次回路，如果决定继续，就要制定下一阶段计划。</p><p>螺旋模型的软件开发过程实际是上述4个部分的迭代过程，每迭代一次，螺旋线就增加一周，软件系统就生成一个新版本，这个新版本实际上是对目标系统的一个逼近。经过若干次的迭代后，系统应该尽快地收敛到用户允许或可以接受的目标范围内，否则也可能中途夭折。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208419",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447264",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 26,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "27",
                    "correlation_time": "0",
                    "question_id": "208420",
                    "difficulty_id": "3",
                    "question_title": "基于UML的需求分析过程的基本步骤为：利用（请作答此空）表示需求；利用（ ）表示目标软件系统的总体架构。",
                    "option": [
                        " 用例及用例图 ",
                        " 包图及类图 ",
                        " 剧情及序列图 ",
                        " 组件图及部署图 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在初步的业务需求描述已经形成的前提下，基于UML的需求分析过程大致可分为以下步骤：</p><p>①利用用例及用例图表示需求。从业务需求描述出发获取执行者和场景；对场景进行汇总、分类、抽象，形成用例；确定执行者与用例、用例与用例图之间的关系，生成用例图。</p><p>②利用包图和类图表示目标软件系统的总体框架结构。根据领域知识、业务需求描述和既往经验设计目标软件系统的顶层架构；从业务需求描述中提取“关键概念”，形成领域概念模型；从概念模型和用例出发，研究系统中主要的类之间的关系，生成类图。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208420",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447302",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 27,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "28",
                    "correlation_time": "0",
                    "question_id": "208421",
                    "difficulty_id": "3",
                    "question_title": "基于UML的需求分析过程的基本步骤为：利用（ ）表示需求；利用（请作答此空）表示目标软件系统的总体架构。",
                    "option": [
                        " 用例及用例图 ",
                        " 包图及类图 ",
                        " 剧情及序列图 ",
                        " 组件图及部署图 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在初步的业务需求描述已经形成的前提下，基于UML的需求分析过程大致可分为以下步骤：</p><p>①利用用例及用例图表示需求。从业务需求描述出发获取执行者和场景；对场景进行汇总、分类、抽象，形成用例；确定执行者与用例、用例与用例图之间的关系，生成用例图。</p><p>②利用包图和类图表示目标软件系统的总体框架结构。根据领域知识、业务需求描述和既往经验设计目标软件系统的顶层架构；从业务需求描述中提取“关键概念”，形成领域概念模型；从概念模型和用例出发，研究系统中主要的类之间的关系，生成类图。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208421",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447361",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 28,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "29",
                    "correlation_time": "0",
                    "question_id": "208422",
                    "difficulty_id": "3",
                    "question_title": "快速应用开发(Rapid Application development，RAD)通过使用基于（请作答此空）的开发方法获得快速开发。当（ ）时，最适合于采用RAD方法。",
                    "option": [
                        " 用例 ",
                        " 数据结构 ",
                        " 剧情 ",
                        " 构件 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>快速应用开发(Rapid Application Development，RAD)是一种比传统生存周期法快得多的开发方法，它强调极短的开发周期。RAD模型是瀑布模型的一个高速变种，通过使用基于构件的开发方法获得快速开发。如果需求理解得很好，且约束了项目范围，利用这种模型可以很快地开发出功能完善的信息系统。但是RAD也具有以下局限性：</p><p>①并非所有应用都适合RAD。RAD对模块化要求比较高，如果有哪一项功能不能被模块化，那么RAD所需要的构建就会有问题；如果高性能是一个指标，且该指标必须通过调整接口使其适应系统构件才能获得，则RAD也有可能不能奏效。</p><p>②开发者和客户必须在很短的时间完成一系列的需求分析，任何一方配合不当，都会导致RAD项目失败。</p><p>③RAD只能用于管理信息系统的开发，不适合技术风险很高的情况。例如，当一个新系统要采用很多新技术，或当新系统与现有系统有较高的互操作性时，就不适合使用RAD。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208422",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447398",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 29,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "30",
                    "correlation_time": "0",
                    "question_id": "208423",
                    "difficulty_id": "3",
                    "question_title": "快速应用开发(Rapid Application development，RAD)通过使用基于（ ）的开发方法获得快速开发。当（请作答此空）时，最适合于采用RAD方法。",
                    "option": [
                        " 一个新系统要采用很多新技术 ",
                        " 系统与现有系统有较高的互操作性 ",
                        " 系统模块化程度较高 ",
                        " 用户不能很好地参与到需求分析中 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>快速应用开发(Rapid Application Development，RAD)是一种比传统生存周期法快得多的开发方法，它强调极短的开发周期。RAD模型是瀑布模型的一个高速变种，通过使用基于构件的开发方法获得快速开发。如果需求理解得很好，且约束了项目范围，利用这种模型可以很快地开发出功能完善的信息系统。但是RAD也具有以下局限性：</p><p>①并非所有应用都适合RAD。RAD对模块化要求比较高，如果有哪一项功能不能被模块化，那么RAD所需要的构建就会有问题；如果高性能是一个指标，且该指标必须通过调整接口使其适应系统构件才能获得，则RAD也有可能不能奏效。</p><p>②开发者和客户必须在很短的时间完成一系列的需求分析，任何一方配合不当，都会导致RAD项目失败。</p><p>③RAD只能用于管理信息系统的开发，不适合技术风险很高的情况。例如，当一个新系统要采用很多新技术，或当新系统与现有系统有较高的互操作性时，就不适合使用RAD。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208423",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447426",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 30,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "31",
                    "correlation_time": "0",
                    "question_id": "208424",
                    "difficulty_id": "3",
                    "question_title": "以下关于软件开发方法的叙述，错误的是（ ）。",
                    "option": [
                        " 对于较为复杂的应用问题，适合采用形式化方法进行需求分析 ",
                        " 形式化方法的优势在于能够精确地表述和研究应用问题及其软件实现 ",
                        " 净室软件工程将正确性验证作为发现和排除错误的主要机制 ",
                        " 净室软件工程强调统计质量控制技术，包括对客户软件使用预期的测试 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件开发方法是指软件开发过程所遵循的办法和步骤，从不同的角度可以对软件开发方法进行不同的分类。</p><p>形式化方法是一种具有坚实数学基础的方法，从而允许对系统和开发过程做严格处理和论证，适用于那些系统安全级别要求极高的软件的开发。形式化方法的主要优越性在于它能够数学地表述和研究应用问题及软件实现。但是它要求开发人员具备良好的数学基础。用形式化语言书写的大型应用问题的软件规格说明往往过于细节化，并且难于为用户和软件设计人员所理解。由于这些缺陷，形式化方法在目前的软件开发实践中并未得到普遍应用。</p><p>净室软件工程(Cleanroom Software Engineering，CSE)是软件开发的一种形式化方法，可以开发较高质量的软件。它使用盒结构规约进行分析和建模，并且将正确性验证作为发现和排除错误的主要机制，使用统计测试来获取认证软件可靠性所需要的信息。CSE强调在规约和设计上的严格性，还强调统计质量控制技术，包括基于客户对软件的预期使用测试。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208424",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447458",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 31,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "32",
                    "correlation_time": "0",
                    "question_id": "208425",
                    "difficulty_id": "3",
                    "question_title": "软件开发环境应支持多种集成机制。根据功能不同，可以将集成机制分为三个部分：（请作答此空 ），用以存储与系统开发有关的信息，并支持信息的交流与共享；（ ），是实现过程集成和控制集成的基础；（ ），它的统一性和一致性是软件开发环境的重要特征。",
                    "option": [
                        " 算法模型库 ",
                        " 环境信息库 ",
                        " 信息模型库 ",
                        " 用户界面库 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件开发环境(Software Development Environment，SDE)是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。</p><p>软件开发环境应支持多种集成机制，根据功能的不同，集成机制可以划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。</p><p>①环境信息库。环境信息库是软件开发环境的核心，用以存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，如文档模板、系统配置、过程模型和可复用构件等。</p><p>②过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成时按照具体软件开发过程的要求进行工具的选择与组合，控制集成使各工具之间进行并行通信和协同工作。</p><p>③环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户的学习负担的保证。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208425",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447496",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 32,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "33",
                    "correlation_time": "0",
                    "question_id": "208426",
                    "difficulty_id": "3",
                    "question_title": "软件开发环境应支持多种集成机制。根据功能不同，可以将集成机制分为三个部分：（ ），用以存储与系统开发有关的信息，并支持信息的交流与共享；（请作答此空），是实现过程集成和控制集成的基础；（ ），它的统一性和一致性是软件开发环境的重要特征。",
                    "option": [
                        " 工作流与日志服务器 ",
                        " 进程通信与数据共享服务器 ",
                        " 过程控制与消息服务器 ",
                        " 同步控制与恢复服务器 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件开发环境(Software Development Environment，SDE)是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。</p><p>软件开发环境应支持多种集成机制，根据功能的不同，集成机制可以划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。</p><p>①环境信息库。环境信息库是软件开发环境的核心，用以存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，如文档模板、系统配置、过程模型和可复用构件等。</p><p>②过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成时按照具体软件开发过程的要求进行工具的选择与组合，控制集成使各工具之间进行并行通信和协同工作。</p><p>③环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户的学习负担的保证。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208426",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447529",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 33,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "34",
                    "correlation_time": "0",
                    "question_id": "208427",
                    "difficulty_id": "3",
                    "question_title": "软件开发环境应支持多种集成机制。根据功能不同，可以将集成机制分为三个部分：（ ），用以存储与系统开发有关的信息，并支持信息的交流与共享；（ ），是实现过程集成和控制集成的基础；（请作答此空），它的统一性和一致性是软件开发环境的重要特征。",
                    "option": [
                        " 底层数据结构 ",
                        " 数据处理方法 ",
                        " 业务过程模型 ",
                        " 环境用户界面 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件开发环境(Software Development Environment，SDE)是指支持软件的工程化开发和维护而使用的一组软件，由软件工具集和环境集成机制构成。</p><p>软件开发环境应支持多种集成机制，根据功能的不同，集成机制可以划分为环境信息库、过程控制与消息服务器、环境用户界面三个部分。</p><p>①环境信息库。环境信息库是软件开发环境的核心，用以存储与系统开发有关的信息，并支持信息的交流与共享。环境信息库中主要存储两类信息，一类是开发过程中产生的有关被开发系统的信息，例如分析文档、设计文档和测试报告等；另一类是环境提供的支持信息，如文档模板、系统配置、过程模型和可复用构件等。</p><p>②过程控制与消息服务器。过程控制与消息服务器是实现过程集成和控制集成的基础。过程集成时按照具体软件开发过程的要求进行工具的选择与组合，控制集成使各工具之间进行并行通信和协同工作。</p><p>③环境用户界面。环境用户界面包括环境总界面和由它实行统一控制的各环境部件及工具的界面。统一的、具有一致性的用户界面是软件开发环境的重要特征，是充分发挥环境的优越性、高效地使用工具并减轻用户的学习负担的保证。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208427",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447556",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "软件开发与管理"
                    ],
                    "single_score": 0,
                    "index": 34,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "35",
                    "correlation_time": "0",
                    "question_id": "208428",
                    "difficulty_id": "3",
                    "question_title": "对于违反里氏替换原则的两个类A和B，可以采用的候选解决方案中，正确的是（ ）。",
                    "option": [
                        " 尽量将一些需要扩展的类或者存在变化的类设计为抽象类或者接口，并将其作为基类，在程序中尽量使用基类对象进行编程 ",
                        " 创建一个新的抽象类C，作为两个具体类的超类，将A和B共同的行为移动到C中，从而解决A和B行为不完全一致的问题 ",
                        " 将B到A的继承关系改成组合关系 ",
                        " 区分是“Is-a”还是“Has-a”。如果是Is-a，可以使用继承关系，如果是Has-a，应该改成组合或聚合关系 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>里氏替换原则是面向对象设计原则之一，由Barbara liskov提出，其基本思想是，一个软件实体如果使用的是一个基类对象，那么一定适用于其子类对象，而且觉察不出基类对象和子类对象的区别，即把基类都替换成它的子类，程序的行为没有变化。反过来则不一定成立，如果一个软件实体使用的是一个子类对象，那么它不一定适用于基类对象。</p><p>在运用里氏替换原则时，尽量将一些需要扩展的类或者存在变化的类设计为抽象类或者接口，并将其作为基类，在程序中尽量使用基类对象进行编程。由于子类继承基类并实现其中的方法，程序运行时，子类对象可以替换基类对象，如果需要对类的行为进行修改，可以扩展基类，增加新的子类，而无需修改调用该基类对象的代码。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208428",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447591",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统分析与设计"
                    ],
                    "single_score": 0,
                    "index": 35,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "36",
                    "correlation_time": "0",
                    "question_id": "208429",
                    "difficulty_id": "3",
                    "question_title": "以下关于黑盒测试用例设计方法的叙述，错误的是（ ）。",
                    "option": [
                        " 边界值分析通过选择等价类边界作为测试用例，不仅重视输入条件边界，而且也必须考虑输出域边界 ",
                        " 因果图方法是从用自然语言书写的程序规格说明的描述中找出因(输入条件)和果(输出或程序状态的改变)，可以通过因果图转换为判定表 ",
                        " 正交试验设计法，就是使用已经造好了的正交表格来安排试验并进行数据分析的一种方法，目的是用最少的测试用例达到最高的测试覆盖率 ",
                        " 等价类划分法根据软件的功能说明，对每一个输入条件确定若干个有效等价类和无效等价类，但只能为有效等价类设计测试用例 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>黑盒测试也称为功能测试，主要用于集成测试，确认测试和系统测试阶段。黑盒测试根据软件需求规格说明所规定的功能来设计测试用例，一般包括功能分解、等价类划分、边界值分析、判定表、因果图、状态图、随机测试、错误推测和正交试验法等。</p><p>在设计测试用例时，等价类划分是用得最多的一种黑盒测试方法。所谓等价类就是某个输入域的集合，对每一个输入条件确定若干个有效等价类和若干个无效等价类，分别设计覆盖有效等价类和无效等价类的测试用例。无效等价类是用来测试非正常的输入数据的，所以要为每个无效等价类设计一个测试用例。</p><p>边界值分析通过选择等价类边界作为测试用例，不仅重视输入条件边界，而且也必须考虑输出域边界。在实际测试工作中，将等价类划分法和边界值分析结合使用，能更有效地发现软件中的错误。</p><p>因果图方法是从用自然语言书写的程序规格说明的描述中找出因(输入条件)和果(输出或程序状态的改变)，可以通过因果图转换为判定表。</p><p>正交试验设计法，就是使用已经造好了的正交表格来安排试验并进行数据分析的一种方法，目的是用最少的测试用例达到最高的测试覆盖率。<span style=\"font-size: 16px;\"></span></p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208429",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447647",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统测试与运行维护"
                    ],
                    "single_score": 0,
                    "index": 36,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "37",
                    "correlation_time": "0",
                    "question_id": "208430",
                    "difficulty_id": "3",
                    "question_title": "以下关于软件测试工具的叙述，错误的是（ ）。",
                    "option": [
                        " 静态测试工具可用于对软件需求、结构设计、详细设计和代码进行评审、走查和审查 ",
                        " 静态测试工具可对软件的复杂度分析、数据流分析、控制流分析和接口分析提供支持 ",
                        " 动态测试工具可用于软件的覆盖分析和性能分析 ",
                        " 动态测试工具不支持软件的仿真测试和变异测试 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "测试工具根据工作原理不同可分为静态测试工具和动态测试工具。其中静态测试工具是对代码进行语法扫描，找到不符合编码规范的地方，根据某种质量模型评价代码的质量，生成系统的调用关系图等。它直接对代码进行分析，不需要运行代码，也不需要对代码编译链接和生成可执行文件，静态测试工具可用于对软件需求、结构设计、详细设计和代码进行评审、走审和审查，也可用于对软件的复杂度分析、数据流分析、控制流分析和接口分析提供支持；动态测试工具与静态测试工具不同，它需要运行被测试系统，并设置探针，向代码生成的可执行文件中插入检测代码，可用于软件的覆盖分析和性能分析，也可用于软件的模拟、建模、仿真测试和变异测试等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208430",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447680",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统测试与运行维护"
                    ],
                    "single_score": 0,
                    "index": 37,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "38",
                    "correlation_time": "0",
                    "question_id": "208431",
                    "difficulty_id": "3",
                    "question_title": "架构描述语言(Architecture Description Language，ADL)是一种为明确说明软件系统的概念架构和对这些概念架构建模提供功能的语言。ADL主要包括以下组成部分：组件、组件接口、（ ）和架构配置。",
                    "option": [
                        " 架构风格 ",
                        " 架构实现 ",
                        " 连接件 ",
                        " 组件实现 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "架构描述语言(Architecture Description Language，ADL)是一种为明确说明软件系统的概念架构和对这些概念架构建模提供功能的语言。ADL主要包括以下组成部分：组件、组件接口、连接件和架构配置。ADL对连接件的重视成为区分ADL和其他建模语言的重要特征之一。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208431",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447714",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 38,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "39",
                    "correlation_time": "0",
                    "question_id": "208432",
                    "difficulty_id": "3",
                    "question_title": "<p>ANSI/IEEE 1471-2000是对软件密集型系统的架构进行描述的标准。在该标准中，（请作答此空）这一概念主要用于描述软件架构模型。在此基础上，通常采用（ ）描述某个利益相关人(Stakeholder)所关注架构模型的某一方面。（ ）则是对所有利益相关人关注点的响应和回答。</p>",
                    "option": [
                        " 上下文 ",
                        " 架构风格 ",
                        " 组件 ",
                        " 视图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在ANSI/IEEE 1471-2000标准中，系统是为了达成利益相关人(Stakeholder)的某些使命(Mission)，在特定环境(Enviroment)中构建的。每一个系统都有一个架构(Architecture)。架构是对所有利益相关人的关注点(Concern)的响应和回答，通过架构描述(Architecture Description)来说明。每一个利益相关人都有各自的关注点。这些关注点是指对其重要的，与系统的开发、运营或其他方面相关的利益。架构描述(Architecture Description)本质上是多视图的。每一个视图(View)是从一个特定的视角(Viewpoint)来表述架构的某一个独立的方面。试图用一个单一的视图来覆盖所有的关注点当然是最好的，但实际上这种表述方式将很难理解。视角(Viewpoint)的选择，基于要解决哪些利益相关人的哪些关注点。它决定了用来创建视图的语言、符号和模型等，以及任何与创建视图相关的建模方法或者分析技术。一个视图(View)包括一个或者多个架构模型(Model)，一个模型也可能参与多个视图。模型较文本的表述的好处在于，可以更容易的可视化、检查、分析、管理和集成。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208432",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447767",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 39,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "40",
                    "correlation_time": "0",
                    "question_id": "208433",
                    "difficulty_id": "3",
                    "question_title": "ANSI/IEEE 1471-2000是对软件密集型系统的架构进行描述的标准。在该标准中，（ ）这一概念主要用于描述软件架构模型。在此基础上，通常采用（请作答此空）描述某个利益相关人(Stakeholder)所关注架构模型的某一方面。（ ）则是对所有利益相关人关注点的响应和回答。",
                    "option": [
                        " 环境 ",
                        " 资源 ",
                        " 视角 ",
                        " 场景 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在ANSI/IEEE 1471-2000标准中，系统是为了达成利益相关人(Stakeholder)的某些使命(Mission)，在特定环境(Enviroment)中构建的。每一个系统都有一个架构(Architecture)。架构是对所有利益相关人的关注点(Concern)的响应和回答，通过架构描述(Architecture Description)来说明。每一个利益相关人都有各自的关注点。这些关注点是指对其重要的，与系统的开发、运营或其他方面相关的利益。架构描述(Architecture Description)本质上是多视图的。每一个视图(View)是从一个特定的视角(Viewpoint)来表述架构的某一个独立的方面。试图用一个单一的视图来覆盖所有的关注点当然是最好的，但实际上这种表述方式将很难理解。视角(Viewpoint)的选择，基于要解决哪些利益相关人的哪些关注点。它决定了用来创建视图的语言、符号和模型等，以及任何与创建视图相关的建模方法或者分析技术。一个视图(View)包括一个或者多个架构模型(Model)，一个模型也可能参与多个视图。模型较文本的表述的好处在于，可以更容易的可视化、检查、分析、管理和集成。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208433",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447897",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 40,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "41",
                    "correlation_time": "0",
                    "question_id": "208434",
                    "difficulty_id": "3",
                    "question_title": "ANSI/IEEE 1471-2000是对软件密集型系统的架构进行描述的标准。在该标准中，（ ）这一概念主要用于描述软件架构模型。在此基础上，通常采用（ ）描述某个利益相关人(Stakeholder)所关注架构模型的某一方面。（请作答此空）则是对所有利益相关人关注点的响应和回答。",
                    "option": [
                        " 架构 ",
                        " 系统 ",
                        " 模型 ",
                        " 使命 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在ANSI/IEEE 1471-2000标准中，系统是为了达成利益相关人(Stakeholder)的某些使命(Mission)，在特定环境(Enviroment)中构建的。每一个系统都有一个架构(Architecture)。架构是对所有利益相关人的关注点(Concern)的响应和回答，通过架构描述(Architecture Description)来说明。每一个利益相关人都有各自的关注点。这些关注点是指对其重要的，与系统的开发、运营或其他方面相关的利益。架构描述(Architecture Description)本质上是多视图的。每一个视图(View)是从一个特定的视角(Viewpoint)来表述架构的某一个独立的方面。试图用一个单一的视图来覆盖所有的关注点当然是最好的，但实际上这种表述方式将很难理解。视角(Viewpoint)的选择，基于要解决哪些利益相关人的哪些关注点。它决定了用来创建视图的语言、符号和模型等，以及任何与创建视图相关的建模方法或者分析技术。一个视图(View)包括一个或者多个架构模型(Model)，一个模型也可能参与多个视图。模型较文本的表述的好处在于，可以更容易的可视化、检查、分析、管理和集成。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208434",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447939",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 41,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "42",
                    "correlation_time": "0",
                    "question_id": "208435",
                    "difficulty_id": "3",
                    "question_title": "采用以架构为核心的软件开发方法，在建立软件架构的初期，首要任务是选择一个合适的（请作答此空），在此基础上，开发人员通过架构模型，可以获得关于（ ）的理解，为将来的架构实现与演化过程建立了目标。",
                    "option": [
                        " 分析模式 ",
                        " 设计模式 ",
                        " 架构风格 ",
                        " 架构标准 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "架构设计是一个迭代过程，在建立软件架构的初期，选择一个合适的架构风格是首要的，在此基础上，开发人员通过架构模型，可以获得关于软件架构属性的理解，为将来的架构实现与演化过程建立了目标。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208435",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447964",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 42,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "43",
                    "correlation_time": "0",
                    "question_id": "208436",
                    "difficulty_id": "3",
                    "question_title": "采用以架构为核心的软件开发方法，在建立软件架构的初期，首要任务是选择一个合适的（ ），在此基础上，开发人员通过架构模型，可以获得关于（请作答此空）的理解，为将来的架构实现与演化过程建立了目标。",
                    "option": [
                        " 架构需求 ",
                        " 架构属性 ",
                        " 架构优先级 ",
                        " 架构约束 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "架构设计是一个迭代过程，在建立软件架构的初期，选择一个合适的架构风格是首要的，在此基础上，开发人员通过架构模型，可以获得关于软件架构属性的理解，为将来的架构实现与演化过程建立了目标。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208436",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577447988",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 43,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "44",
                    "correlation_time": "0",
                    "question_id": "208437",
                    "difficulty_id": "3",
                    "question_title": "<span style=\"font-size: 16px;\">在数据库系统中，“事务”是访问数据库并可能更新各种数据项的一个程序执行单元。为了保证数据完整性，要求数据库系统维护事务的原子性、一致性、隔离性和持久性。针对事务的这4种特性，考虑以下的架构设计场景：</span><p>假设在某一个时刻只有一个活动的事务，为了保证事务的原子性，对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除副本，原数据库没有受到任何影响。这种设计策略称为（请作答此空）。</p><p>事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用（ ）机制保证单个事务的一致性。</p><p>事务的隔离性保证操作并发执行后的系统状态与这些操作以某种次序顺序执行(即可串行化执行)后的状态是等价的。两阶段锁协议是实现隔离性的常见方案，该协议（ ）。</p><p>持久性保证一旦事务完成，该事务对数据库所做的所有更新都是永久的，如果事务完成后系统出现故障，则需要通过恢复机制保证事务的持久性。假设在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，则在日志中（ ），当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务应该（ ）。</p>",
                    "option": [
                        " 主动冗余 ",
                        " 影子拷贝 ",
                        " 热备份 ",
                        " 多版本编程 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>题干中第1个架构设计场景描述了数据库设计中为了实现原子性和持久性的最为简单的策略：“影子拷贝”。该策略假设在某一个时刻只有一个活动的事务，首先对数据库做副本(称为影子副本)，并在磁盘上维护一个dp_poimer指针，指向数据库的当前副本。对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除新副本，原数据库副本没有受到任何影响。</p><p>题干中的第2个架构设计场景主要考查考生对事务一致性实现机制的理解。事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用完整性约束检查机制保证单个事务的一致性。</p><p>题干中的第3个架构设计场景主要考查数据库的锁协议。两阶段锁协议是实现事务隔离性的常见方案，该协议通过定义锁的增长和收缩两个阶段约束事务的加锁和解锁过程，能够保证事务的串行化执行，但由于事务不能一次得到所有需要的锁，因此该协议会可能会导致死锁。</p><p>题干中的第4个架构设计场景主要考查数据库的恢复机制，主要描述了基于日志的延迟修改技术(deferred-modification technique)的设计与恢复过程。该技术通过在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，日志中需要记录“事务开始”和“事务提交”时间，还需要记录数据项被事务修改后的新值，无需记录数据项被事务修改前的原始值。当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务对数据项的修改尚未体现在数据库中，因此无需做任何恢复动作。如果事务已经提交则进行重做处理，而尚未完成的事务是进行撤销处理。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208437",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577448118",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 44,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "45",
                    "correlation_time": "0",
                    "question_id": "208438",
                    "difficulty_id": "3",
                    "question_title": "<p>在数据库系统中，“事务”是访问数据库并可能更新各种数据项的一个程序执行单元。为了保证数据完整性，要求数据库系统维护事务的原子性、一致性、隔离性和持久性。针对事务的这4种特性，考虑以下的架构设计场景：</p><p>假设在某一个时刻只有一个活动的事务，为了保证事务的原子性，对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除副本，原数据库没有受到任何影响。这种设计策略称为（ ）。</p><p>事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用（请作答此空）机制保证单个事务的一致性。</p><p>事务的隔离性保证操作并发执行后的系统状态与这些操作以某种次序顺序执行(即可串行化执行)后的状态是等价的。两阶段锁协议是实现隔离性的常见方案，该协议（ ）。</p><p>持久性保证一旦事务完成，该事务对数据库所做的所有更新都是永久的，如果事务完成后系统出现故障，则需要通过恢复机制保证事务的持久性。假设在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，则在日志中（ ），当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务应该（ ）。<span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        " 逻辑正确性检查 ",
                        " 物理正确性检查 ",
                        " 完整性约束检查 ",
                        " 唯一性检查 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>题干中第1个架构设计场景描述了数据库设计中为了实现原子性和持久性的最为简单的策略：“影子拷贝”。该策略假设在某一个时刻只有一个活动的事务，首先对数据库做副本(称为影子副本)，并在磁盘上维护一个dp_poimer指针，指向数据库的当前副本。对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除新副本，原数据库副本没有受到任何影响。</p><p>题干中的第2个架构设计场景主要考查考生对事务一致性实现机制的理解。事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用完整性约束检查机制保证单个事务的一致性。</p><p>题干中的第3个架构设计场景主要考查数据库的锁协议。两阶段锁协议是实现事务隔离性的常见方案，该协议通过定义锁的增长和收缩两个阶段约束事务的加锁和解锁过程，能够保证事务的串行化执行，但由于事务不能一次得到所有需要的锁，因此该协议会可能会导致死锁。</p><p>题干中的第4个架构设计场景主要考查数据库的恢复机制，主要描述了基于日志的延迟修改技术(deferred-modification technique)的设计与恢复过程。该技术通过在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，日志中需要记录“事务开始”和“事务提交”时间，还需要记录数据项被事务修改后的新值，无需记录数据项被事务修改前的原始值。当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务对数据项的修改尚未体现在数据库中，因此无需做任何恢复动作。如果事务已经提交则进行重做处理，而尚未完成的事务是进行撤销处理。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208438",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577448264",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 45,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "46",
                    "correlation_time": "0",
                    "question_id": "208439",
                    "difficulty_id": "3",
                    "question_title": "<p>在数据库系统中，“事务”是访问数据库并可能更新各种数据项的一个程序执行单元。为了保证数据完整性，要求数据库系统维护事务的原子性、一致性、隔离性和持久性。针对事务的这4种特性，考虑以下的架构设计场景：</p><p>假设在某一个时刻只有一个活动的事务，为了保证事务的原子性，对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除副本，原数据库没有受到任何影响。这种设计策略称为（ ）。</p><p>事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用（ ）机制保证单个事务的一致性。</p><p>事务的隔离性保证操作并发执行后的系统状态与这些操作以某种次序顺序执行(即可串行化执行)后的状态是等价的。两阶段锁协议是实现隔离性的常见方案，该协议（请作答此空）。</p><p>持久性保证一旦事务完成，该事务对数据库所做的所有更新都是永久的，如果事务完成后系统出现故障，则需要通过恢复机制保证事务的持久性。假设在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，则在日志中（ ），当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务应该（ ）。<span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        " 能够保证事务的可串行化执行，可能发生死锁 ",
                        " 不能保证事务的可串行化执行，不会发生死锁 ",
                        " 不能保证事务的可串行化执行，可能发生死锁 ",
                        " 能够保证事务的可串行化执行，不会发生死锁 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>题干中第1个架构设计场景描述了数据库设计中为了实现原子性和持久性的最为简单的策略：“影子拷贝”。该策略假设在某一个时刻只有一个活动的事务，首先对数据库做副本(称为影子副本)，并在磁盘上维护一个dp_poimer指针，指向数据库的当前副本。对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除新副本，原数据库副本没有受到任何影响。</p><p>题干中的第2个架构设计场景主要考查考生对事务一致性实现机制的理解。事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用完整性约束检查机制保证单个事务的一致性。</p><p>题干中的第3个架构设计场景主要考查数据库的锁协议。两阶段锁协议是实现事务隔离性的常见方案，该协议通过定义锁的增长和收缩两个阶段约束事务的加锁和解锁过程，能够保证事务的串行化执行，但由于事务不能一次得到所有需要的锁，因此该协议会可能会导致死锁。</p><p>题干中的第4个架构设计场景主要考查数据库的恢复机制，主要描述了基于日志的延迟修改技术(deferred-modification technique)的设计与恢复过程。该技术通过在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，日志中需要记录“事务开始”和“事务提交”时间，还需要记录数据项被事务修改后的新值，无需记录数据项被事务修改前的原始值。当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务对数据项的修改尚未体现在数据库中，因此无需做任何恢复动作。如果事务已经提交则进行重做处理，而尚未完成的事务是进行撤销处理。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208439",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577448298",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 46,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "47",
                    "correlation_time": "0",
                    "question_id": "208440",
                    "difficulty_id": "3",
                    "question_title": "<p>在数据库系统中，“事务”是访问数据库并可能更新各种数据项的一个程序执行单元。为了保证数据完整性，要求数据库系统维护事务的原子性、一致性、隔离性和持久性。针对事务的这4种特性，考虑以下的架构设计场景：</p><p>假设在某一个时刻只有一个活动的事务，为了保证事务的原子性，对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除副本，原数据库没有受到任何影响。这种设计策略称为（ ）。</p><p>事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用（ ）机制保证单个事务的一致性。</p><p>事务的隔离性保证操作并发执行后的系统状态与这些操作以某种次序顺序执行(即可串行化执行)后的状态是等价的。两阶段锁协议是实现隔离性的常见方案，该协议（ ）。</p><p>持久性保证一旦事务完成，该事务对数据库所做的所有更新都是永久的，如果事务完成后系统出现故障，则需要通过恢复机制保证事务的持久性。假设在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，则在日志中（请作答此空），当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务应该（ ）。<span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        " 无需记录“事务开始执行”这一事件 ",
                        " 无需记录“事务已经提交”这一事件 ",
                        " 无需记录数据项被事务修改后的新值 ",
                        " 无需记录数据项被事务修改前的原始值 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>题干中第1个架构设计场景描述了数据库设计中为了实现原子性和持久性的最为简单的策略：“影子拷贝”。该策略假设在某一个时刻只有一个活动的事务，首先对数据库做副本(称为影子副本)，并在磁盘上维护一个dp_poimer指针，指向数据库的当前副本。对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除新副本，原数据库副本没有受到任何影响。</p><p>题干中的第2个架构设计场景主要考查考生对事务一致性实现机制的理解。事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用完整性约束检查机制保证单个事务的一致性。</p><p>题干中的第3个架构设计场景主要考查数据库的锁协议。两阶段锁协议是实现事务隔离性的常见方案，该协议通过定义锁的增长和收缩两个阶段约束事务的加锁和解锁过程，能够保证事务的串行化执行，但由于事务不能一次得到所有需要的锁，因此该协议会可能会导致死锁。</p><p>题干中的第4个架构设计场景主要考查数据库的恢复机制，主要描述了基于日志的延迟修改技术(deferred-modification technique)的设计与恢复过程。该技术通过在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，日志中需要记录“事务开始”和“事务提交”时间，还需要记录数据项被事务修改后的新值，无需记录数据项被事务修改前的原始值。当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务对数据项的修改尚未体现在数据库中，因此无需做任何恢复动作。如果事务已经提交则进行重做处理，而尚未完成的事务是进行撤销处理。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208440",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577448324",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 47,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "48",
                    "correlation_time": "0",
                    "question_id": "208441",
                    "difficulty_id": "3",
                    "question_title": "<p>在数据库系统中，“事务”是访问数据库并可能更新各种数据项的一个程序执行单元。为了保证数据完整性，要求数据库系统维护事务的原子性、一致性、隔离性和持久性。针对事务的这4种特性，考虑以下的架构设计场景：</p><p>假设在某一个时刻只有一个活动的事务，为了保证事务的原子性，对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除副本，原数据库没有受到任何影响。这种设计策略称为（ ）。</p><p>事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用（ ）机制保证单个事务的一致性。</p><p>事务的隔离性保证操作并发执行后的系统状态与这些操作以某种次序顺序执行(即可串行化执行)后的状态是等价的。两阶段锁协议是实现隔离性的常见方案，该协议（ ）。</p><p>持久性保证一旦事务完成，该事务对数据库所做的所有更新都是永久的，如果事务完成后系统出现故障，则需要通过恢复机制保证事务的持久性。假设在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，则在日志中（ ），当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务应该（请作答此空）。<span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        " 重做 ",
                        " 撤销 ",
                        " 什么都不做 ",
                        " 抛出异常后退出 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>题干中第1个架构设计场景描述了数据库设计中为了实现原子性和持久性的最为简单的策略：“影子拷贝”。该策略假设在某一个时刻只有一个活动的事务，首先对数据库做副本(称为影子副本)，并在磁盘上维护一个dp_poimer指针，指向数据库的当前副本。对于要执行写操作的数据项，数据库系统在磁盘上维护数据库的一个副本，所有的写操作都在数据库副本上执行，而保持原始数据库不变，如果在任一时刻操作不得不中止，系统仅需要删除新副本，原数据库副本没有受到任何影响。</p><p>题干中的第2个架构设计场景主要考查考生对事务一致性实现机制的理解。事务的一致性要求在没有其他事务并发执行的情况下，事务的执行应该保证数据库的一致性。数据库系统通常采用完整性约束检查机制保证单个事务的一致性。</p><p>题干中的第3个架构设计场景主要考查数据库的锁协议。两阶段锁协议是实现事务隔离性的常见方案，该协议通过定义锁的增长和收缩两个阶段约束事务的加锁和解锁过程，能够保证事务的串行化执行，但由于事务不能一次得到所有需要的锁，因此该协议会可能会导致死锁。</p><p>题干中的第4个架构设计场景主要考查数据库的恢复机制，主要描述了基于日志的延迟修改技术(deferred-modification technique)的设计与恢复过程。该技术通过在日志中记录所有对数据库的修改操作，将一个事务的所有写操作延迟到事务提交后才执行，日志中需要记录“事务开始”和“事务提交”时间，还需要记录数据项被事务修改后的新值，无需记录数据项被事务修改前的原始值。当系统发生故障时，如果某个事务已经开始，但没有提交，则该事务对数据项的修改尚未体现在数据库中，因此无需做任何恢复动作。如果事务已经提交则进行重做处理，而尚未完成的事务是进行撤销处理。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208441",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577448384",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "数据库基础"
                    ],
                    "single_score": 0,
                    "index": 48,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "49",
                    "correlation_time": "0",
                    "question_id": "208442",
                    "difficulty_id": "3",
                    "question_title": "若系统中的某子模块需要为其他模块提供访问不同数据库系统的功能，这些数据库系统提供的访问接口有一定的差异，但访问过程却都是相同的，例如，先连接数据库，再打开数据库，最后对数据进行查询。针对上述需求，可以采用（请作答此空）设计模式抽象出相同的数据库访问过程，该设计模式（ ）。",
                    "option": [
                        " 外观 ",
                        " 装饰 ",
                        " 桥接 ",
                        " 享元 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "外观(fagade)模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208442",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577449051",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 49,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "50",
                    "correlation_time": "0",
                    "question_id": "208443",
                    "difficulty_id": "3",
                    "question_title": "若系统中的某子模块需要为其他模块提供访问不同数据库系统的功能，这些数据库系统提供的访问接口有一定的差异，但访问过程却都是相同的，例如，先连接数据库，再打开数据库，最后对数据进行查询。针对上述需求，可以采用（ ）设计模式抽象出相同的数据库访问过程，该设计模式（请作答此空）。",
                    "option": [
                        " 可以动态、透明地给单个对象添加职责 ",
                        " 为子系统定义了一个高层接口，这个接口使得这一子系统更加容易使用 ",
                        " 通过运用共享技术，有效支持大量细粒度的对象 ",
                        " 将抽象部分与它的实现部分分离，使它们都可以独立地变化 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "外观(fagade)模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208443",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577449484",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 50,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "51",
                    "correlation_time": "0",
                    "question_id": "208444",
                    "difficulty_id": "3",
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（请作答此空）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（ ）最为合适；为了实现图像处理算法的灵活选择与替换，采用（ ）最为合适。<span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        " 工厂模式 ",
                        " 责任链模式 ",
                        " 中介者模式 ",
                        " 命令模式 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208444",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577449509",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 51,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "52",
                    "correlation_time": "0",
                    "question_id": "208445",
                    "difficulty_id": "3",
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（ ）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（请作答此空）最为合适；为了实现图像处理算法的灵活选择与替换，采用（ ）最为合适。<span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        " 状态模式 ",
                        " 适配器模式 ",
                        " 组合模式 ",
                        " 单例模式 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208445",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577449539",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 52,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "53",
                    "correlation_time": "0",
                    "question_id": "208446",
                    "difficulty_id": "3",
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（ ）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（ ）最为合适；为了实现图像处理算法的灵活选择与替换，采用（请作答此空）最为合适。<span style=\"font-size: 16px;\"></span></p>",
                    "option": [
                        " 模板方法模式 ",
                        " 访问者模式 ",
                        " 策略模式 ",
                        " 观察者模式 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208446",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577449637",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 53,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "54",
                    "correlation_time": "0",
                    "question_id": "208447",
                    "difficulty_id": "3",
                    "question_title": "特定领域软件架构(Domam Specific Software Architecture，DSSA.是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得（请作答此空），从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得（ ），从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并对基础软件架构进行实现。",
                    "option": [
                        " 领域边界 ",
                        " 领域信息 ",
                        " 领域对象 ",
                        " 领域模型 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "特定领域软件架构(Dommn Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得：DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208447",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577449825",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 54,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "55",
                    "correlation_time": "0",
                    "question_id": "208448",
                    "difficulty_id": "3",
                    "question_title": "特定领域软件架构(Domam Specific Software Architecture，DSSA.是在一个特定应用领域中，为一组应用提供组织结构参考的标准软件体系结构。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得（ ），从而描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得（请作答此空），从而描述领域模型中表示需求的解决方案；领域实现的主要目标是开发和组织可重用信息，并对基础软件架构进行实现。",
                    "option": [
                        " 特定领域软件需求 ",
                        " 特定领域软件架构 ",
                        " 特定领域软件设计模型 ",
                        " 特定领域软件重用模型 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "特定领域软件架构(Dommn Specific Software Architecture，DSSA)以一个特定问题领域为对象，形成由领域参考模型、参考需求、参考架构等组成的开发基础架构，其目标是支持一个特定领域中多个应用的生成。DSSA的基本活动包括领域分析、领域设计和领域实现。其中领域分析的主要目的是获得领域模型，领域模型描述领域中系统之间共同的需求，即领域需求；领域设计的主要目标是获得：DSSA，DSSA描述领域模型中表示需求的解决方案；领域实现的主要目标是依据领域模型和DSSA开发和组织可重用信息，并对基础软件架构进行实现。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208448",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577449859",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 55,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "56",
                    "correlation_time": "0",
                    "question_id": "208449",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（请作答此空）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "option": [
                        " 性能 ",
                        " 吞吐量 ",
                        " 可靠性 ",
                        " 可修改性 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208449",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450116",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 56,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "57",
                    "correlation_time": "0",
                    "question_id": "208450",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（请作答此空）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "option": [
                        " 操作串行化 ",
                        " 资源调度 ",
                        " 心跳 ",
                        " 内置监控器 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208450",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450157",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 57,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "58",
                    "correlation_time": "0",
                    "question_id": "208451",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（请作答此空）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "option": [
                        " 可测试性 ",
                        " 易用性 ",
                        " 可用性 ",
                        " 互操作性 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208451",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450193",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 58,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "59",
                    "correlation_time": "0",
                    "question_id": "208452",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（请作答此空）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "option": [
                        " 主动冗余 ",
                        " 信息隐藏 ",
                        " 抽象接口 ",
                        " 记录/回放 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208452",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450229",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 59,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "60",
                    "correlation_time": "0",
                    "question_id": "208453",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（请作答此空）质量属性相关，通常可采用（ ）架构策略实现该属性。",
                    "option": [
                        " 可用性 ",
                        " 安全性 ",
                        " 可测试性 ",
                        " 可修改性 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208453",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450271",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 60,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "61",
                    "correlation_time": "0",
                    "question_id": "208454",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个在线交易系统，在架构设计阶段，公司的架构师识别出3个核心质量属性场景。其中“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与（ ）质量属性相关，通常可采用（ ）架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与（ ）质量属性相关，通常可采用（请作答此空）架构策略实现该属性。",
                    "option": [
                        " 内置监控器 ",
                        " 记录/回放 ",
                        " 追踪审计 ",
                        " 维护现有接口 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查考生对质量属性的理解和质量属性实现策略的掌握。对于题干描述：“在并发用户数量为1000人时，用户的交易请求需要在0.5秒内得到响应”，主要与性能这一质量属性相关，实现该属性的常见架构策略包括：增加计算资源、减少计算开销、引入并发机制、采用资源调度等。“当系统由于软件故障意外崩溃后，需要在0.5小时内恢复正常运行”主要与可用性质量属性相关，通常可采用心跳、Ping/Echo、主动冗余、被动冗余、选举等架构策略实现该属性；“系统应该能够抵挡恶意用户的入侵行为，并进行报警和记录”主要与安全性质量属性相关，通常可采用入侵检测、用户认证、用户授权、追踪审计等架构策略实现该属性。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208454",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450347",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 61,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "62",
                    "correlation_time": "0",
                    "question_id": "208455",
                    "difficulty_id": "3",
                    "question_title": "基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、（请作答此空）和架构描述文档，其分析过程主要包括场景开发、（ ）、单个场景评估、场景交互和总体评估。",
                    "option": [
                        " 问题说明 ",
                        " 问题建模 ",
                        " 需求说明 ",
                        " 需求建模 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查考生对基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)的掌握和理解。SAAM是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、需求说明和架构描述，其分析过程主要包括场景开发、架构描述、单个场景评估、场景交互和总体评估。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208455",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450367",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 62,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "63",
                    "correlation_time": "0",
                    "question_id": "208456",
                    "difficulty_id": "3",
                    "question_title": "基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、（ ）和架构描述文档，其分析过程主要包括场景开发、（请作答此空）、单个场景评估、场景交互和总体评估。",
                    "option": [
                        " 架构需求 ",
                        " 架构描述 ",
                        " 架构设计 ",
                        " 架构实现 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查考生对基于场景的架构分析方法(Scenarios-based Architecture Analysis Method，SAAM)的掌握和理解。SAAM是卡耐基梅隆大学软件工程研究所的Kazman等人于1983年提出的一种非功能质量属性的架构分析方法，是最早形成文档并得到广泛应用的软件架构分析方法。SAAM的主要输入是问题描述、需求说明和架构描述，其分析过程主要包括场景开发、架构描述、单个场景评估、场景交互和总体评估。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208456",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450394",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        " 系统设计与架构"
                    ],
                    "single_score": 0,
                    "index": 63,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "64",
                    "correlation_time": "0",
                    "question_id": "208457",
                    "difficulty_id": "3",
                    "question_title": "下图所示PKI系统结构中，负责生成和签署数字证书的是（请作答此空），负责验证用户身份的是（ ）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191227/1577450414296166.jpg\" title=\"1577450414296166.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        " 证书机构CA ",
                        " 注册机构RA ",
                        " 证书发布系统 ",
                        " PKI策略 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在PKI系统体系中，证书机构CA负责生成和签署数字证书，注册机构RA负责验证申请数字证书用户的身份。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208457",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450435",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 64,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "65",
                    "correlation_time": "0",
                    "question_id": "208458",
                    "difficulty_id": "3",
                    "question_title": "下图所示PKI系统结构中，负责生成和签署数字证书的是（ ），负责验证用户身份的是（请作答此空）。<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191227/1577450449522720.jpg\" title=\"1577450449522720.jpg\" alt=\"1.jpg\"/>",
                    "option": [
                        " 证书机构CA ",
                        " 注册机构RA ",
                        " 证书发布系统 ",
                        " PKI策略 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在PKI系统体系中，证书机构CA负责生成和签署数字证书，注册机构RA负责验证申请数字证书用户的身份。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208458",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450498",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "系统安全与可靠性设计"
                    ],
                    "single_score": 0,
                    "index": 65,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "66",
                    "correlation_time": "0",
                    "question_id": "208459",
                    "difficulty_id": "3",
                    "question_title": "中国M公司与美国L公司分别在各自生产的平板电脑产品上使用iPad商标，且分别享有各自国家批准的商标专用权。中国Y手电筒经销商，在其经销的手电筒高端产品上也使用iPad商标，并取得了注册商标。以下说法正确的是（ ）。",
                    "option": [
                        " L公司未经M公司许可在中国市场销售其产品不属于侵权行为 ",
                        " L公司在中国市场销售其产品需要取得M公司和Y经销商的许可 ",
                        " L公司在中国市场销售其产品需要向M公司支付注册商标许可使用费 ",
                        " Y经销商在其经销的手电筒高端产品上使用iPad商标属于侵权行为 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>知识产权具有地域性的特征，按照一国法律获得承认和保护的知识产权，只能在该国发生法律效力，即知识产权受地域限制，只有在一定地域内知识产权才具有独占性(专用性)。或者说，各国依照其本国法律授予的知识产权，只能在其本国领域内受其国家的法律保护，而其他国家对这种权利没有保护的义务，任何人均可在自己的国家内自由使用外国人的知识产品，既无须取得权利人的许可，也不必向权利人支付报酬。</p><p>通过缔结有关知识产权的国际公约的形式，某一国家的国民(自然人或法人)的知识产权在其他国家也能取得权益。参加知识产权国际公约的国家，会相互给予成员国国民的知识产权保护。虽然众多知识产权国际条约等的订立，使地域性有时会变得模糊，但地域性的特征不但是知识产权最“古老”的特征，也是最基本的特征之一。目前知识产权的地域性仍然存在，如是否授予权利、如何保护权利，仍须由各成员国按照其国内法来决定。依据我国商标法五十二条规定，未注册商标不得与他人在同一种或类似商品上已经注册的商标相同或近似。若未经商标注册人的许可，在同一种商品或者类似商品上使用与他人注册商标相同或者近似的商标的，属于侵犯专用权的行为，应当承担相应的法律责任。</p><p>知识产权的利用(行使)有多种方式，许可使用是其之一，它是指知识产权人将自己的权利以一定的方式，在一定的地域和期限内许可他人利用，并由此获得报酬(即向被许可人收取一定数额的使用费)的法律行为。对于注册商标许可而言是指注册商标所有人通过订立许可使用合同，许可他人使用其注册商标的法律行为。</p><p>依据我国商标法规定，不同类别商品(产品)是可以使用相同或类似商标的，如在水泥产品和化肥产品都可以使用“秦岭”商标，因为水泥产品和化肥产品是不同类别的产品。但对于驰名商标来说，不能在任何商品(产品)，使用与驰名商标相同或类似的标识。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208459",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450659",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "知识产权"
                    ],
                    "single_score": 0,
                    "index": 66,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "67",
                    "correlation_time": "0",
                    "question_id": "208460",
                    "difficulty_id": "3",
                    "question_title": "M画家将自己创作的一幅美术作品原件赠与了L公司。L公司未经该画家的许可，擅自将这幅美术作品作为商标注册，且取得商标权，并大量复制用于该公司的产品上。L公司的行为侵犯了M画家的（ ）。",
                    "option": [
                        " 著作权 ",
                        " 发表权 ",
                        " 商标权 ",
                        " 展览权 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>绘画、书法、雕塑等美术作品的原件可以买卖、赠与。但是，获得一件美术作品并不意味着获得该作品的著作权。我国著作权法第18条规定：“美术等作品原件所有权的转移。不视为作品著作权的转移，但美术作品原件的展览权由原件所有人享有”。这就是说，艺术类作品物转移的事实并不引起美术作品著作权的转移，受让人只是取得物的所有权和作品原件的展览权，作品的著作权仍然由作者等著作权人享有。除了艺术类作品之外，对任何原件所有权可能转移的作品，如书籍、软件等都要注意区分作品物质载体的财产权和作品的著作权这两种不同的权利。</p><p>发表权是指作者决定作品是否公之于众和以何种方式公之于众的权利。发表权作为著作权人的一种权利，其包含两种含义：一是权利人有权决定是否发表，或许可他人发表；二是权利人有权以某种方式发表，如出版、发行、展览、销售等，以及确定在什么时间、地点发表。在一些情况下，作者虽未将作品公之于众，但可推定作者同意发表其作品。例如，作者许可他人使用其未发表的作品意味着作者同意发表其作品，认为作者已经行使发表权。又如，作者将其未发表的作品原件所有权转让给他人，意味着发表权与著作财产权的一起行使，即作者的发表权也已行使完毕，已随着财产权转移。再如，展览尚未发表的作品即为作品的发表，展览行为必然附带着发表，所以推定已经行使了发表权。发表权是一次性权利，即发表权行使一次后，不再享有发表权。例如，第一次出版、第一次表演、上网公布等都属于行使发表权。以后再次使用作品与发表权无关，而是行使作品的使用权。发表权须借助一定的作品使用方式行使，即作品的公之于众要以某种确定的方式实现。也就是说，发表权难以孤立地行使，要以某种确定的方式实现，如书籍的出版、剧本的上演、绘画的展出等，既是作品的发表，同时也是作品的使用。</p><p>在我国商标权的取得实行的是注册原则，即商标所有人只有依法将自己的商标注册后，商标注册人才能取得商标权，其商标才能得到法律的保护。M画家并未将其美术作品实施商标注册，不享有其美术作品的商标权，因此L公司的行为未侵犯M画家的商标权，而是侵犯了M画家的在先权利。在先权利包括著作权、外观设计专利权、商号权、地理标志权、姓名权等。</p><p>展览权是将作品原件或复制件公开陈列的权利。公开陈列的作品既可以是已经发表的作品，也可以是尚未发表的作品。画展、书法展、摄影展等都是公开陈列。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208460",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450708",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "知识产权"
                    ],
                    "single_score": 0,
                    "index": 67,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "68",
                    "correlation_time": "0",
                    "question_id": "208461",
                    "difficulty_id": "3",
                    "question_title": "以下我国的标准代号中，（ ）表示行业标准。",
                    "option": [
                        " GB ",
                        " SJ ",
                        " DB11 ",
                        " Q "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>我国标准分为国家标准、行业标准、地方标准和企业标准四类。</p><p>国家标准是由国务院标准化行政主管部门制定的标准。国家标准的编号由标准代号、标准发布顺序号和标准发布年代号构成。国家标准的代号由大写汉字拼音字母构成，强制性国家标准代号为GB，推荐性国家标准的代号为GB/T。例如，“GB 8567—1988软件产品开发文件编制指南”为强制性国家标准。</p><p>行业标准代号由国务院各有关行政主管部门提出其所管理的行业标准范围的申请报告，国务院标准化行政主管部门审查确定并正式公布该行业标准代号。已正式公布的行业代号：QJ(航天)、SJ(电子)、JB(机械)、JR(金融)、HB(航空)等等。行业标准代号由汉字拼音大写字母组成，再加上斜线T组成推荐性行业标准。行业标准的编号由行业标准代号、标准发布顺序及标准发布年代号组成。例如，“HB 6698—1993软件工具评价与选择的分类特性体系”为强制性行业标准编号。GJB为中华人民共和国国家军用标准代号。</p><p>地方标准是由省、自治区、直辖市标准化行政主管部门制定并报国务院标准化行政主管部门和国务院有关行业行政主管部门备案的标准。地方标准代号由大写汉字拼音DB加上省、自治区、直辖市行政区划代码的前两位数子(北京市11、天津市12)，再加上斜线T组成推荐性地方标准(DBXX/T)，不加斜线T为强制性地方标准(DBXX)。地方标准的编号由地方标准代号、发布顺序号、发布年三部分组成，即DBXX XXX—XXXX。</p><p>企业标准是由企业自行组织制定、作为组织生产依据的相应标准。企业标准一经制定颁布，即对整个企业具有约束性，是企业法规性文件，没有强制性企业标准和推荐企业标准之分。企业代号可用大写拼音字母或阿拉数字或两者兼用所组成(Q/XXX)，按中央所属企业和地方企业分别由国务院有关行政主管部门或省、自治区、直辖市政府标准化行政主管部门会同同级有关行政主管部门加以规定。企业标准的编号由企业标准代号，发布顺序号和发布年代号组成，即Q/XXX XXXX—XXXX。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208461",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450810",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "知识产权"
                    ],
                    "single_score": 0,
                    "index": 68,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "69",
                    "correlation_time": "0",
                    "question_id": "208462",
                    "difficulty_id": "3",
                    "question_title": "研究表明，肿瘤的生长有以下规律：当肿瘤细胞数目超过1011时才是临床可观察的；在肿瘤生长初期，几乎每隔一定时间就会观测到肿瘤细胞数量翻一番；在肿瘤生长后期，肿瘤细胞的数目趋向某个稳定值。为此，图（ ）反映了肿瘤的生长趋势。",
                    "option": [
                        " <img style=\"max-width:100%;height:auto\" src=\"https://s2.51cto.com/images/20191227/1577450853600416.jpg\" title=\"1577450853600416.jpg\" alt=\"1.jpg\"/> ",
                        " <img style=\"max-width:100%;height:auto\" src=\"https://s2.51cto.com/images/20191227/1577450857684561.jpg\" title=\"1577450857684561.jpg\" alt=\"2.jpg\"/> ",
                        " <img style=\"max-width:100%;height:auto\" src=\"https://s2.51cto.com/images/20191227/1577450860841164.jpg\" title=\"1577450860841164.jpg\" alt=\"3.jpg\"/> ",
                        " <img style=\"max-width:100%;height:auto\" src=\"https://s2.51cto.com/images/20191227/1577450864626174.jpg\" title=\"1577450864626174.jpg\" alt=\"4.jpg\"/> "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "用函数曲线来表示事物随时间变化的规律十分常见。我们可以用函数f(t)表示肿瘤细胞数量随时间变化的函数。那么，当肿瘤细胞数目超过1011时才是临床可观察的，可以表示为f(0)=1011。在肿瘤生长初期，几乎每隔一定时间就会观测到肿瘤细胞数量翻一番，可以表示为t＜t0时，f(1+c)=2f(t)。符合这种规律的函数是指数函数：f(t)=at，其曲线段呈凹形上升态。在肿瘤生长后期，肿瘤细胞的数目趋向某个稳定值，表示当t＞T时，f(t)逐渐逼近某个常数，即函数曲线从下往上逐渐靠近直线y=L。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208462",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450869",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "应用数学\t"
                    ],
                    "single_score": 0,
                    "index": 69,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "70",
                    "correlation_time": "0",
                    "question_id": "208463",
                    "difficulty_id": "3",
                    "question_title": "九个项目A11，A12，A13，A21，A22，A23，A31，A32，A33的成本从1百万，2百万，……，9百万各不相同，但并不顺序对应。已知A11与A21、A12与A22的成本都有一倍关系，A11与A12、A21与A31、A22与A23、A23与A33的成本都相差1百万。由此可以推断，项目A22的成本是（ ）百万。",
                    "option": [
                        " 2 ",
                        " 4 ",
                        " 6 ",
                        " 8 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>本题考查应用数学基础知识。</p><p>为便于直观分析，题中的叙述可以用下图来表示：</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191227/1577450983881798.jpg\" title=\"1577450983881798.jpg\" alt=\"1.jpg\"/></p><p>九个项目Aij(i=1，2，3；j=1，2，3)的成本值(单位为百万，从1到9各不相同)将分别填入i行j列对应的格中。格间的黑点表示相邻格有一倍关系，白点表示相邻格相差1。</p><p>已知A22与A12的值有一倍关系，那就只可能是1-2，2-4，3-6或4-8，因此A22的值只可能是1，2，3，4，6，8。</p><p>如果A22=1，则A23=A12=2，出现相同值，不符合题意。</p><p>如果A22=2，则A12只能是4(A12=1将导致A11=A22=2矛盾)，A23只能为3(A23=1将导致A33=A22=2矛盾)，A33出现矛盾。</p><p>如果A22=3，则A12=6，A11=5或7，不可能与A21有一倍关系。</p><p>如果A22=4，则A12=2或8。A12=8将导致A11=7或9，不可能与A21有成倍关系。因此A12=2，A23只能是5(A23=3将导致A33矛盾)，A33=6，而A11=1或3都将导致A21矛盾。</p><p>如果A22=8，则A12=4，A23只能是7(A23=9将导致A33=8矛盾)，A33只能是6，A11只能是3(A11=5将导致A21矛盾)，A21=6矛盾。</p><p>因此，A22只可能为6。</p><p>实际上，当A22=6时，A12=3，A23只能为7(A23=5将最终导致矛盾)，A33=8。此时，A11、A21、A31可能分别是2、4、5，也可能是4、2、1。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208463",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577450989",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "应用数学\t"
                    ],
                    "single_score": 0,
                    "index": 70,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "71",
                    "correlation_time": "0",
                    "question_id": "208464",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （请作答此空）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ ）. The first physical DFD to be drawn is the （ ）. The next step is to distribute data stores to different processors. Data（ ）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ ）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " logical DFDs and ERD ",
                        " ideal object model and analysis class model ",
                        " use case models and interface prototypes ",
                        " physical DFDs and database schema "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208464",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577451599",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 71,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "72",
                    "correlation_time": "0",
                    "question_id": "208465",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ ）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （请作答此空）. The first physical DFD to be drawn is the （ ）. The next step is to distribute data stores to different processors. Data（ ）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ ）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " the database management system ",
                        " the feasibility of techniques used ",
                        " the network topology and technology ",
                        " the user interface and process methods "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208465",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577451631",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 72,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "73",
                    "correlation_time": "0",
                    "question_id": "208466",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ ）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ ）. The first physical DFD to be drawn is the （请作答此空）. The next step is to distribute data stores to different processors. Data（ ）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ ）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " context DFD ",
                        " system DFD ",
                        " network architecture DFD ",
                        " event-response DFD "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208466",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577451669",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 73,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "74",
                    "correlation_time": "0",
                    "question_id": "208467",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ ）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ ）. The first physical DFD to be drawn is the （ ）. The next step is to distribute data stores to different processors. Data（请作答此空）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ ）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " vertical partitioning and horizontal replication ",
                        " vertical replication and horizontal partitioning ",
                        " integration and distribution ",
                        " partitioning and replication "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208467",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577451696",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 74,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "75",
                    "correlation_time": "0",
                    "question_id": "208468",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ ）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ ）. The first physical DFD to be drawn is the （ ）. The next step is to distribute data stores to different processors. Data（ ）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （请作答此空）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " storing all data on a single server ",
                        " storing specific tables on different servers ",
                        " storing subsets of specific tables on different servers ",
                        " duplicating specific tables or subsets on different servers "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208468",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577451735",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8334",
                    "type": "3",
                    "title": "2012年系统架构设计师上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "28",
                    "max_score": "75",
                    "exam_num": "681",
                    "person_num": "119",
                    "avg_time": "31.7",
                    "is_right": "0",
                    "chapter_name": [
                        "专业英语"
                    ],
                    "single_score": 0,
                    "index": 75,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                }
            ],
            "summary": {
                "radio": {
                    "total_question": 75,
                    "total_score": 75,
                    "question_types": [
                        1,
                        9,
                        11
                    ]
                },
                "multiple": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        2,
                        12
                    ]
                },
                "budingxiang": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        7
                    ]
                },
                "judge": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        3,
                        13
                    ]
                },
                "cloze": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        8
                    ]
                },
                "fill": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        4
                    ]
                },
                "qanda": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        5,
                        14
                    ]
                },
                "program": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        6
                    ]
                },
                "material": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        10
                    ]
                }
            }
        },
        "pagination": {
            "curPage": 1,
            "pageSize": 250,
            "total": 75,
            "hasNextPage": false
        },
        "totalOrder": [
            {
                "index": 1,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 2,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 3,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 4,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 5,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 6,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 7,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 8,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 9,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 10,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 11,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 12,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 13,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 14,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 15,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 16,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 17,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 18,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 19,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 20,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 21,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 22,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 23,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 24,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 25,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 26,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 27,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 28,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 29,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 30,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 31,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 32,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 33,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 34,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 35,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 36,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 37,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 38,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 39,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 40,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 41,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 42,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 43,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 44,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 45,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 46,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 47,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 48,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 49,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 50,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 51,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 52,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 53,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 54,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 55,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 56,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 57,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 58,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 59,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 60,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 61,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 62,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 63,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 64,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 65,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 66,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 67,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 68,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 69,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 70,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 71,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 72,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 73,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 74,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 75,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            }
        ]
    }
}
