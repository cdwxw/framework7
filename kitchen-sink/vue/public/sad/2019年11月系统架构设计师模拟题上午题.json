{
    "msg": "成功",
    "status": 0,
    "data": {
        "data": {
            "examine": {
                "examine_id": 8040,
                "answer_id": "3939996",
                "title": "2019年11月系统架构设计师模拟题上午题",
                "len_time": 0,
                "total_score": "75",
                "get_score": "0",
                "total_question": 75,
                "proposal": "",
                "proposalList": [
                    {
                        "proposal": "",
                        "comment_time": "0",
                        "log_id": "8588578"
                    }
                ],
                "platform_id": "2",
                "submit_limit_num": "0",
                "version_id": "0",
                "version_year": "0",
                "mark_question_ids": []
            },
            "question": [
                {
                    "every_score": "1",
                    "rank": "1",
                    "correlation_time": "0",
                    "question_id": "177860",
                    "difficulty_id": "3",
                    "question_title": "2019年10月24日，中共中央政治局就区块链技术发展现状和趋势进行第十八次集体学习。中共中央总书记习近平在主持学习时强调，区块链技术的集成应用在新的技术革新和产业变革中起着重要作用。我们要把区块链作为核心技术自主创新的重要突破口，明确主攻方向，加大投入力度，着力攻克一批关键核心技术，加快推动区块链技术和产业创新发展。以下（ ）不是区块链的特征",
                    "option": [
                        " 中心化 ",
                        " 开放性 ",
                        " 自治性 ",
                        " 匿名性 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构， 并以密码学方式保证的不可篡改和不可伪造的分布式账本。一般说来，区块链系统由数据层、网络层、共识层、激励层、合约层和应用层组成。&nbsp;</p><p>区块链的基本特征：</p><p>去中心化：由于使用分布式核算和存储，不存在中心化的硬件或管理机构，任意节点的权利和义务都是均等的，系统中的数据块由整个系统中具有维护功能的节点来共同维护。</p><p>开放性：系统是开放的，除了交易各方的私有信息被加密外，区块链的数据对所有人公开，任何人都可以通过公开的接口查询区块链数据和开发相关应用，因此整个系统信息高度透明。</p><p>自治性：区块链采用基于协商一致的规范和协议（比如一套公开透明的算法）使得整个系统中的所有节点能够在去信任的环境自由安全的交换数据，使得对“人”的信任改成了对机器的信任，任何人为的干预不起作用。</p><p>信息不可篡改：一旦信息经过验证并添加至区块链，就会永久的存储起来，除非能够同时控制住系统中超过51%的节点，否则单个节点上对数据库的修改是无效的，因此区块链的数据稳定性和可靠性极高。</p><p>匿名性：由于节点之间的交换遵循固定的算法，其数据交互是无需信任的（区块链中的程序规则会自行判断活动是否有效），因此交易对手无须通过公开身份的方式让对方自己产生信任，对信用的累积非常有帮助。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177860",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411219",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 1,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "2",
                    "correlation_time": "0",
                    "question_id": "177861",
                    "difficulty_id": "3",
                    "question_title": "如果将部门聚餐烤肉比作购买云计算服务，去饭店吃自助烤肉、去饭店直接吃烤肉、自己架炉子买肉烤着吃，分别对应（ &nbsp;）服务。",
                    "option": [
                        " SaaS、PaaS、laaS ",
                        " PaaS、SaaS、IaaS ",
                        " SaaS、IaaS、PaaS ",
                        " PaaS、IaaS、SaaS "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>新技术是最近需要关注的，本题用生活的刻画了云计算架构的三个层次，云计算的架构层次分为3个层次：基础设施即服务（IaaS）、平台即服务（PaaS）、软件即服务(SaaS），IaaS是消费者可以从云计算中心获得完善的计算机基础设施服务，正如题中的例子自己架炉子等基础设施烤肉。</p><p>PaaS是云计算上各种应用软件提供服务的平台应用。如题中的去饭店借助饭店这个平台实现吃烤肉的应用。</p><p>SaaS是一种通过Internet提供软件的模式，如题目中的直接去饭店吃烤肉即可，所以选B</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177861",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411253",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 2,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "3",
                    "correlation_time": "0",
                    "question_id": "177862",
                    "difficulty_id": "3",
                    "question_title": "薛大龙博士是一名教师，性别男，身高 180，主讲软考，擅长打五笔字型。该实例中类和对象相关描述，正确的是（ &nbsp;）。",
                    "option": [
                        " 薛大龙是对象，教师是类，性别身高是状态信息，讲课和打五笔字型是对象行为 ",
                        " 薛大龙是类，教师是对象，性别身高是状态信息，打五笔字型是对象行为 ",
                        " 薛大龙是状态信息，教师是类，性别身高是对象，讲课和打五笔字型是对象行为 ",
                        " 薛大龙是对象，教师是状态信息，性别身高是类，讲课是对象行为 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "面向对象的基本概念：包括对象、类、抽象、封装、继承等，其中对象：由数据及操作所构成的封装体，是系统中用来描述客观事物的一个模块，是构成系统的基本单位。包括对象标识、对象状态、对象行为，其中每个对象都有一个对象标识，对象状态是对对象的静态描述，而对象行为是对对象的动态特征的描述。类是现实世界中对实体的形式化或抽象的描述。类是对象的抽象，对象是类的实例，题中：教师属于类，薛大龙是教师类的一个实例，性别和身高都是薛大龙这个对象的静态特征属性，讲课和打五笔字型是薛大龙这个对象的动态特征行为。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177862",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411286",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 3,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "4",
                    "correlation_time": "0",
                    "question_id": "177863",
                    "difficulty_id": "3",
                    "question_title": "以下关于软件中间件的叙述，错误的是（ ）。",
                    "option": [
                        " 中间件通过标准接口实现与应用程序的关联，提供特定功能的服务 ",
                        " 使用中间件可以提高应用软件可移植性 ",
                        " 使用中间件有助于提高开发效率 ",
                        " 中间件位于客户机服务器的操作系统之下，应用程序之上。管理计算资源和网络通信。 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，应用程序之下。管理计算资源和网络通信。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177863",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411638",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 4,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "5",
                    "correlation_time": "0",
                    "question_id": "177864",
                    "difficulty_id": "3",
                    "question_title": "在数据库设计的需求分析阶段应当形成（请作答此空），这些文档可以作为（ &nbsp;）阶段的设计依据。",
                    "option": [
                        " 程序文档、数据字典和数据流图 ",
                        " 需求说明文档、程序文档和数据流图 ",
                        " 需求说明文档、数据字典和数据流图 ",
                        " 需求说明文档、数据字典和程序文档 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>本题考查数据库系统基本概念方面的基础知识。</p><p>数据库设计主要分为用户需求分析、概念结构、逻辑结构和物理结构设计四个阶段。其中，在用户需求分析阶段中，数据库设计人员采用一定的辅助工具对应用对象的功能、性能、限制等要求所进行的科学分析，并形成需求说明文档、数据字典和数据流程图。用户需求分析阶段形成的相关文档用以作为概念结构设计的设计依据。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177864",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411675",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 5,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "6",
                    "correlation_time": "0",
                    "question_id": "177865",
                    "difficulty_id": "3",
                    "question_title": "在数据库设计的需求分析阶段应当形成（ &nbsp;），这些文档可以作为（请作答此空）阶段的设计依据。",
                    "option": [
                        " 逻辑结构设计 ",
                        " 概念结构设计 ",
                        " 物理结构设计 ",
                        " 数据库运行和维护 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>本题考查数据库系统基本概念方面的基础知识。</p><p>数据库设计主要分为用户需求分析、概念结构、逻辑结构和物理结构设计四个阶段。其中，在用户需求分析阶段中，数据库设计人员采用一定的辅助工具对应用对象的功能、性能、限制等要求所进行的科学分析，并形成需求说明文档、数据字典和数据流程图。用户需求分析阶段形成的相关文档用以作为概念结构设计的设计依据。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177865",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411707",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 6,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "7",
                    "correlation_time": "0",
                    "question_id": "177866",
                    "difficulty_id": "3",
                    "question_title": "某商场商品数据库的商品关系模式P(商品代码，商品名称，供应商，联系方式，库存量)，函数依赖集F={商品代码→商品名称，(商品代码，供应商)→库存量，供应商→联系方式}。商品关系模式P达到（请作答此空）；该关系模式分解成（ &nbsp;）后，具有无损连接的特性，并能够保持函数依赖。",
                    "option": [
                        " 1NF ",
                        " 2NF ",
                        " 3NF ",
                        " BCNF "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>本题考查的是应试者关系数据库方面的基础知识。</p><p>根据题意，零件P关系中的(商品代码，供应商)可决定的零件P关系的所有属性，所以零件P关系的主键为(商品代码，供应商)；又因为，根据题意(商品代码，供应商)→商品名称，而商品代码→商品名称，供应商→联系方式，可以得出商品名称和联系方式都部分依赖于码，所以，该关系模式属于1NF。</p><p>关系模式P属于1NF，1NF存在冗余度大、修改操作的不一致性、插入异常和删除异常四个问题。所以需要对模式分解，其中选项A、选项B和选项c的分解是有损且不保持函数依赖。例如，选项A中的分解P1的函数依赖集F1=Ф，分解P2的函数依赖集F2=Ф，丢失了F中的函数依赖，即不保持函数依赖。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177866",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411751",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 7,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "8",
                    "correlation_time": "0",
                    "question_id": "177867",
                    "difficulty_id": "3",
                    "question_title": "某商场商品数据库的商品关系模式P(商品代码，商品名称，供应商，联系方式，库存量)，函数依赖集F={商品代码→商品名称，(商品代码，供应商)→库存量，供应商→联系方式}。商品关系模式P达到（ &nbsp;）；该关系模式分解成（请作答此空）后，具有无损连接的特性，并能够保持函数依赖。",
                    "option": [
                        " P1(商品代码，联系方式)，P2(商品名称，供应商，库存量) ",
                        " P1(商品名称，联系方式)，P2(商品代码，供应商，库存量) ",
                        " P1(商品代码，商品名称，联系方式)，P2(供应商，库存量) ",
                        " P1(商品代码，商品名称)，P2(商品代码，供应商，库存量)，P3(供应商，联系方式) "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>本题考查的是应试者关系数据库方面的基础知识。</p><p>根据题意，零件P关系中的(商品代码，供应商)可决定的零件P关系的所有属性，所以零件P关系的主键为(商品代码，供应商)；又因为，根据题意(商品代码，供应商)→商品名称，而商品代码→商品名称，供应商→联系方式，可以得出商品名称和联系方式都部分依赖于码，所以，该关系模式属于1NF。</p><p>关系模式P属于1NF，1NF存在冗余度大、修改操作的不一致性、插入异常和删除异常四个问题。所以需要对模式分解，其中选项A、选项B和选项c的分解是有损且不保持函数依赖。例如，选项A中的分解P1的函数依赖集F1=Ф，分解P2的函数依赖集F2=Ф，丢失了F中的函数依赖，即不保持函数依赖。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177867",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411777",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 8,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "9",
                    "correlation_time": "0",
                    "question_id": "177868",
                    "difficulty_id": "3",
                    "question_title": "以下关于软件中间件的叙述，错误的是（ &nbsp;）。",
                    "option": [
                        " 中间件通过标准接口实现与应用程序的关联，提供特定功能的服务 ",
                        " 使用中间件可以提高应用软件可移植性 ",
                        " 使用中间件将增加应用软件设计的复杂度 ",
                        " 使用中间件有助于提高开发效率 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。</p><p>软件中间件的作用是为处于自己上层的应用软件提供运行与开发的环境，帮助用户开发和集成应用软件。它不仅仅要实现互连，还要实现应用之间的互操作。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177868",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411818",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 9,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "10",
                    "correlation_time": "0",
                    "question_id": "177869",
                    "difficulty_id": "3",
                    "question_title": "以下关于嵌入式系统开发的叙述，正确的是（ &nbsp;）。",
                    "option": [
                        " 宿主机与目标机之间只需要建立逻辑连接 ",
                        " 宿主机与目标机之间只能采用串口通信方式 ",
                        " 在宿主机上必须采用交叉编译器来生成目标机的可执行代码 ",
                        " 调试器与被调试程序必须安装在同一台机器上 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>在嵌入式系统开发中，由于嵌入式设备不具备足够的处理器能力和存储空间，程序开发一般用PC(宿主机)来完成，然后将可执行文件下载到嵌入式系统(目标机)中运行。</p><p>当宿主机与目标机的机器指令不同时，就需要交叉工具链(指编译、汇编、链接等一整套工具)。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177869",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411841",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 10,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "11",
                    "correlation_time": "0",
                    "question_id": "177870",
                    "difficulty_id": "3",
                    "question_title": "以下关于嵌入式系统硬件抽象层的叙述，错误的是（ &nbsp;）。",
                    "option": [
                        " 硬件抽象层与硬件密切相关，可对操作系统隐藏硬件的多样性 ",
                        " 硬件抽象层将操作系统与硬件平台隔开 ",
                        " 硬件抽象层使软硬件的设计与调试可以并行 ",
                        " 硬件抽象层应包括设备驱动程序和任务调度 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "硬件抽象层是位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化。它隐藏了特定平台的硬件接口细节，为操作系统提供虚拟硬件平台，使其具有硬件无关性，可在多种平台上进行移植。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177870",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411869",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 11,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "12",
                    "correlation_time": "0",
                    "question_id": "177871",
                    "difficulty_id": "3",
                    "question_title": "（ &nbsp;）不是反映嵌入式实时操作系统实时性的评价指标。",
                    "option": [
                        " 任务执行时间 ",
                        " 中断响应和延迟时间 ",
                        " 任务切换时间 ",
                        " 信号量混洗时间 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一个嵌入式实时操作系统(BTOS)的评价要从很多角度进行，如体系结构、API的丰富程度、网络支持、可靠性等。其中，实时性是RTOS评价的最重要的指标之一，实时性的优劣是用户选择操作系统的一个重要参考。</p><p>严格地说，影响嵌入式操作系统实时性的因素有很多，如常用系统调用平均运行时间、任务切换时间、线程切换时间、信号量混洗时间(指从一个任务释放信号量到另一个等待该信号量的任务被激活的时间延迟)、中断响应时间等。</p><p>任务执行时间不是反映RTOS实时性的评价指标。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177871",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411894",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 12,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "13",
                    "correlation_time": "0",
                    "question_id": "177872",
                    "difficulty_id": "3",
                    "question_title": "以下关于网络控制的叙述，正确的是（ &nbsp;）。",
                    "option": [
                        " 由于TCP的窗口大小是固定的，所以防止拥塞的方法只能是超时重发 ",
                        " 在前向纠错系统中，当接收端检测到错误后就要请求发送端重发出错分组 ",
                        " 在滑动窗口协议中，窗口的大小以及确认应答使得可以连续发送多个数据 ",
                        " 在数据报系统中，所有连续发送的数据都可以沿着预先建立的虚通路传送 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "TCP采用可变大小的滑动窗口协议进行流量控制。在前向纠错系统中，当接收端检测到错误后就根据纠错编码的规律自行纠错；在后向纠错系统中，接收方会请求发送方重发出错分组。IP协议不预先建立虚电路，而是对每个数据报独立地选择路由并一站一站地进行转发，直到送达目标地。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177872",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411920",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 13,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "14",
                    "correlation_time": "0",
                    "question_id": "177873",
                    "difficulty_id": "3",
                    "question_title": "以下关于域名服务器的叙述，错误的是（ &nbsp;）。",
                    "option": [
                        " 本地缓存域名服务不需要域名数据库 ",
                        " 顶级域名服务器是最高层次的域名服务器 ",
                        " 本地域名服务器可以采用递归查询和迭代查询两种查询方式 ",
                        " 权限服务器负责将其管辖区内的主机域名转换为该主机的IP地址 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>本题考查域名服务器及相关技术。</p><p>可提供域名服务的包括本地缓存、本地域名服务器、权限域名服务器、顶级域名服务器以及根域名服务器。DNS主机名解析的查找顺序是，先查找客户端本地缓存，如果没有成功，则向DNS服务器发出解析请求。</p><p>本地缓存是内存中的一块区域，保存着最近被解析的主机名及其IP地址映像。由于解析程序缓存常驻内存中，所以比其他解析方法速度快。</p><p>当一个主机发出DNS查询报文时，这个查询报文就首先被送往该主机的本地域名服务器。本地域名服务器离用户较近，当所要查询的主机也属于同一个本地ISP时，该本地域名服务器立即就能将所查询的主机名转换为它的IP地址，而不需要再去询问其他的域名服务器。</p><p>每一个区都设置有域名服务器，即权限服务器，它负责将其管辖区内的主机域名转换为该主机的IP地址。在其上保存有所管辖区内的所有主机域名到IP地址的映射。</p><p>顶级域名服务器负责管理在本顶级域名服务器上注册的所有二级域名。当收到DNS查询请求时，能够将其管辖的二级域名转换为该二级域名的IP地址。或者是下一步应该找寻的域名服务器的IP地址。</p><p>根域名服务器是最高层次的域名服务器。每一个根域名服务器都要存有所有顶级域名服务器的IP地址和域名。当一个本地域名服务器对一个域名无法解析时，就会直接找到根域名服务器，然后根域名服务器会告知它应该去找哪一个顶级域名服务器进行查询。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177873",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572411967",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 14,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "15",
                    "correlation_time": "0",
                    "question_id": "208408",
                    "difficulty_id": "3",
                    "question_title": "以下关于网络存储的叙述，正确的是（ ）。",
                    "option": [
                        " DAS支持完全跨平台文件共享，支持所有的操作系统 ",
                        " NAS通过SCSI连接至服务器，通过服务器网卡在网络上传输数据 ",
                        " FC SAN的网络介质为光纤通道，而IP SAN使用标准的以太网 ",
                        " SAN设备有自己的文件管理系统，NAS中的存储设备没有文件管理系统 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>DAS(Direct Attached Storage，直接附加存储)即直连方式存储。在这种方式中，存储设备是通过电缆(通常是SCSI接口电缆)直接连接服务器。I/O(输入/输入)请求直接发送到存储设备。DAS也可称为SAS(Server-Attached Storage，服务器附加存储)。它依赖于服务器，其本身是硬件的堆叠，不带有任何存储操作系统，DAS不能提供跨平台文件共享功能，各系统平台下文件需分别存储。</p><p>NAS是(Network Attached Storage)的简称，中文称为网络附加存储。在NAS存储结构中，存储系统不再通过I/O总线附属于某个特定的服务器或客户机，而是直接通过网络接口与网络直接相连，由用户通过网络来访问。</p><p>NAS设备有自己的OS，其实际上是一个带有瘦服务的存储设备，其作用类似于一个专用的文件服务器，不过把显示器，键盘，鼠标等设备省去，NAS用于存储服务，可以大大降低了存储设备的成本，另外NAS中的存储信息都是采用RAID方式进行管理的，从而有效的保护了数据。</p><p>SAN是通过专用高速网将一个或多个网络存储设备和服务器连接起来的专用存储系统，未来的信息存储将以SAN存储方式为主。SAN主要采取数据块的方式进行数据和信息的存储，目前主要使用于以太网(IP SAN)和光纤通道(FC SAN)两类环境中。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "208408",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1577446768",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": [
                        " 计算机网络"
                    ],
                    "single_score": 0,
                    "index": 15,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "16",
                    "correlation_time": "0",
                    "question_id": "177875",
                    "difficulty_id": "3",
                    "question_title": "数据仓库中的（ &nbsp;）消除了源数据中的不一致性，提供整个企业的一致性全局信息。",
                    "option": [
                        " 面向主题性 ",
                        " 集成性 ",
                        " 稳定性 ",
                        " 反映历史变化性 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>数据仓库4大特点：</p><p>面向主题：数据按主题组织。</p><p>集成的：消除了源数据中的不一致性，提供整个企业的一致性全局信息。</p><p>相对稳定的(非易失的)：主要进行查询操作，只有少量的修改和删除操作（或是不删除）。</p><p>反映历史变化(随着时间变化)：记录了企业从过去某一时刻到当前各个阶段的信息，可对发展历程和未来趋势做定量分析和预测。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177875",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412021",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 16,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "17",
                    "correlation_time": "0",
                    "question_id": "177876",
                    "difficulty_id": "3",
                    "question_title": "分布透明性指用户不必关心数据的逻辑分片，不必关心数据存储的物理位置分配细节，也不必关心局部场地上数据库的数据模型。（请作答此空）是分布透明性的最高层次。（ &nbsp;）指用户或应用程序应当了解分片情况，但不必了解片段的存储场地。（ &nbsp;）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。",
                    "option": [
                        " 分片透明性 ",
                        " 逻辑透明性 ",
                        " 位置透明性 ",
                        " 全局透明性 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>分布透明性包括：分片透明性、位置透明性和局部数据模型透明性。</p><p>（1）分片透明性是分布透明性的最高层次。所谓分片透明性是指用户或应用程序只对全局关系进行操作而不必考虑数据的分片。当分片模式改变时，只要改变全局模式到分片模式的映像，而不影响全局模式和应用程序。全局模式不变，应用程序不必改写，这就是分片透明性。</p><p>（2）位置透明性是分布透明性的下一层次。所谓位置透明性是指，用户或应用程序应当了解分片情况，但不必了解片段的存储场地。</p><p>（3）局部数据模型（逻辑透明）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177876",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412081",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 17,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "18",
                    "correlation_time": "0",
                    "question_id": "177877",
                    "difficulty_id": "3",
                    "question_title": "分布透明性指用户不必关心数据的逻辑分片，不必关心数据存储的物理位置分配细节，也不必关心局部场地上数据库的数据模型。（ &nbsp;）是分布透明性的最高层次。（请作答此空）指用户或应用程序应当了解分片情况，但不必了解片段的存储场地。（ &nbsp;）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。",
                    "option": [
                        " 分片透明性 ",
                        " 逻辑透明性 ",
                        " 位置透明性 ",
                        " 全局透明性 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>分布透明性包括：分片透明性、位置透明性和局部数据模型透明性。</p><p>（1）分片透明性是分布透明性的最高层次。所谓分片透明性是指用户或应用程序只对全局关系进行操作而不必考虑数据的分片。当分片模式改变时，只要改变全局模式到分片模式的映像，而不影响全局模式和应用程序。全局模式不变，应用程序不必改写，这就是分片透明性。</p><p>（2）位置透明性是分布透明性的下一层次。所谓位置透明性是指，用户或应用程序应当了解分片情况，但不必了解片段的存储场地。</p><p>（3）局部数据模型（逻辑透明）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177877",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412126",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 18,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "19",
                    "correlation_time": "0",
                    "question_id": "177878",
                    "difficulty_id": "3",
                    "question_title": "分布透明性指用户不必关心数据的逻辑分片，不必关心数据存储的物理位置分配细节，也不必关心局部场地上数据库的数据模型。（ &nbsp;）是分布透明性的最高层次。（ &nbsp;）指用户或应用程序应当了解分片情况，但不必了解片段的存储场地。（请作答此空）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。",
                    "option": [
                        " 分片透明性 ",
                        " 逻辑透明性 ",
                        " 位置透明性 ",
                        " 全局透明性 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>分布透明性包括：分片透明性、位置透明性和局部数据模型透明性。</p><p>（1）分片透明性是分布透明性的最高层次。所谓分片透明性是指用户或应用程序只对全局关系进行操作而不必考虑数据的分片。当分片模式改变时，只要改变全局模式到分片模式的映像，而不影响全局模式和应用程序。全局模式不变，应用程序不必改写，这就是分片透明性。</p><p>（2）位置透明性是分布透明性的下一层次。所谓位置透明性是指，用户或应用程序应当了解分片情况，但不必了解片段的存储场地。</p><p>（3）局部数据模型（逻辑透明）透明性是指用户或应用程序应当了解分片及各片断存储的场地，但不必了解局部场地上使用的是何种数据模型。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177878",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412156",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 19,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "20",
                    "correlation_time": "0",
                    "question_id": "177879",
                    "difficulty_id": "3",
                    "question_title": "给定关系模式 R&lt;U,F&gt;;其中 U 为属性集，F 是 U 上的一组函数依赖，那么 Armstroog 公理系统的增广律是指（ &nbsp; ）。",
                    "option": [
                        " 若 X→Y，X→Z，则 X→YZ 为 F 所蕴涵 ",
                        " 若 X→Y，WY→Z，则 XW→Z 为 F 所蕴涵 ",
                        " 若 X→Y，Y→Z 为 F 所蕴涵，则 X→Z 为 F 所蕴涵 ",
                        " 若 X→Y，为 F 所蕴涵，且 Z?U,则入 XZ→YZ 为 F 所蕴涵 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>从已知的一些函数依赖，可以推导出另外一些函数依赖，这就需要一系列推理规则。函数依赖的推理规则最早出现在1974年W.W.Armstrong 的论文里，这些规则常被称作“Armstrong 公理”</p><p>设U 是关系模式R 的属性集，F 是R 上成立的只涉及U 中属性的函数依赖集。函数依赖的推理规则有以下三条：</p><p>自反律：若属性集Y 包含于属性集X，属性集X 包含于U，则X→Y 在R 上成立。(此处X→Y是平凡函数依赖)</p><p>增广律：若X→Y 在R 上成立，且属性集Z 包含于属性集U，则XZ→YZ 在R 上成立。</p><p>传递律：若X→Y 和 Y→Z在R 上成立，则X →Z 在R 上成立。</p><p>其他的所有函数依赖的推理规则可以使用这三条规则推导出。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177879",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412201",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 20,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "21",
                    "correlation_time": "0",
                    "question_id": "177880",
                    "difficulty_id": "3",
                    "question_title": "<p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210414/1618380267276051.png\" title=\"1618380267276051.png\" alt=\"image.png\"/></p>",
                    "option": [
                        " A,C,S.C ",
                        " A,B,E ",
                        " A,R.C,E ",
                        " A,R.C,S,D "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>B的最长查询语句最短，因此可以并行执行，提高效率。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177880",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412259",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 21,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "22",
                    "correlation_time": "0",
                    "question_id": "177881",
                    "difficulty_id": "3",
                    "question_title": "<p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210414/1618380189842998.png\" title=\"1618380189842998.png\" alt=\"image.png\"/></p>",
                    "option": [
                        " B=软件工程OR R. C=S. C AND R. D=S. D ",
                        " B=‘软件工程’OR R. C=S. C AND R. D=S. D ",
                        " B=‘软件工程’OR R. C=S. C OR R. D=S. D ",
                        " B=‘软件工程’AND R. C=S. C AND R. D=S. D "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>B的最长查询语句最短，因此可以并行执行，提高效率。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177881",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412307",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 22,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "23",
                    "correlation_time": "0",
                    "question_id": "177882",
                    "difficulty_id": "3",
                    "question_title": "<p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20210414/1618379567859422.png\" title=\"1618379567859422.png\" alt=\"image.png\"/></p>",
                    "option": [
                        " 选择A ",
                        " 选择B ",
                        " 选择C ",
                        " 选择D "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>B的最长查询语句最短，因此可以并行执行，提高效率。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177882",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412337",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 23,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "24",
                    "correlation_time": "0",
                    "question_id": "177883",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（请作答此空）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（ ）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（ ）。",
                    "option": [
                        " 可用性 ",
                        " 可靠性 ",
                        " 性能 ",
                        " 容错性 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177883",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412377",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 24,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "25",
                    "correlation_time": "0",
                    "question_id": "177884",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（请作答此空）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（ ）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（ ）。",
                    "option": [
                        " 可用性 ",
                        " 可修改性 ",
                        " 可靠性 ",
                        " 安全性 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177884",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412409",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 25,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "26",
                    "correlation_time": "0",
                    "question_id": "177885",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（请作答此空）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（ ）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（ ）",
                    "option": [
                        " 可用性 ",
                        " 可修改性 ",
                        " 可靠性 ",
                        " 安全性 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177885",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412530",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 26,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "27",
                    "correlation_time": "0",
                    "question_id": "177886",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（请作答此空）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（ ）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（ ）。",
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177886",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412561",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 27,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "28",
                    "correlation_time": "0",
                    "question_id": "177887",
                    "difficulty_id": "3",
                    "question_title": "某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（ 请作答此空）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（ ）。",
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177887",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412587",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 28,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "29",
                    "correlation_time": "0",
                    "question_id": "177888",
                    "difficulty_id": "3",
                    "question_title": "<p>某单位为了建设健全的公路桥梁养护管理档案，拟开发一套公路桥梁在线管理系统。该系统要求正常负载情况下，系统必须在 0.5 秒内对用户的查询请求进行响应，这属于质量特性的（ ）；网络失效后，系统需要在 10 秒内发现错误并启用备用系统，这属于质量特性的（ ）；更改系统的 Web 界面接口必须在 4 人周内完成，这属于质量特性的（ ）；如果&quot;养护报告生成&quot;业务逻辑的描述尚未达成共识，可能导致部分业务功能模块规则的矛盾，影响系统的可修改性，这属于系统的（ ）；更改系统加密的级别将对安全性和性能产生影响，这属于系统的（ &nbsp;）；对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计，这属于系统的（请作答此空）。</p>",
                    "option": [
                        " 权衡点 ",
                        " 风险点 ",
                        " 敏感点 ",
                        " 非风险点 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>性能是指系统的响应能力，即要经过多长时间才能对某个时间做出响应。</p><p>可用性是指系统两次故障之间系统正常运行的比例。当可用性和可靠性同时出现在选项中的时候，我们通常选择可用性。</p><p>可修改性是指较高的性价比对系统进行变更的能力。</p><p>敏感点是指为了实现某种特定的质量属性，一个或多个系统组件所具有的特性。</p><p>权衡点是指影响多个质量属性的特性，是多个质量属性的敏感点。</p><p>风险点不以标准术语出现，它指某些做法有一些隐患可能导致一些问题。</p><p>非风险点是指某些做法是可行的、可接受的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177888",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412615",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 29,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "30",
                    "correlation_time": "0",
                    "question_id": "177889",
                    "difficulty_id": "3",
                    "question_title": "对于开发模型来说，（请作答此空）复用好、开发过程无间隙、节省时间。（ ）是瀑布与原型（演化）模型结合体，适用于复杂项目。（ ）需要用户参与，模块化要求高，不适用新技术。（ &nbsp;）是用例驱动、架构为中心、迭代、增量。",
                    "option": [
                        " RAD模型 ",
                        " 螺旋模型 ",
                        " RUP模型 ",
                        " 喷泉模型 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "开发模型的特点如下：<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191030/1572412666499874.jpg\" title=\"1572412666499874.jpg\" alt=\"2.jpg\"/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177889",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412682",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 30,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "31",
                    "correlation_time": "0",
                    "question_id": "177890",
                    "difficulty_id": "3",
                    "question_title": "对于开发模型来说，（ &nbsp;）复用好、开发过程无间隙、节省时间。（请作答此空）是瀑布与原型（演化）模型结合体，适用于复杂项目。（ &nbsp;）需要用户参与，模块化要求高，不适用新技术。（ &nbsp;）是用例驱动、架构为中心、迭代、增量。",
                    "option": [
                        " RAD模型 ",
                        " 螺旋模型 ",
                        " RUP模型 ",
                        " 喷泉模型 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>开发模型的特点如下：</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191030/1572412713831157.jpg\" title=\"1572412713831157.jpg\" alt=\"2.jpg\"/></p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177890",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412715",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 31,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "32",
                    "correlation_time": "0",
                    "question_id": "177891",
                    "difficulty_id": "3",
                    "question_title": "对于开发模型来说，（ &nbsp;）复用好、开发过程无间隙、节省时间。（ &nbsp;）是瀑布与原型（演化）模型结合体，适用于复杂项目。（请作答此空）需要用户参与，模块化要求高，不适用新技术。（ &nbsp;）是用例驱动、架构为中心、迭代、增量。",
                    "option": [
                        " RAD模型 ",
                        " 螺旋模型 ",
                        " RUP模型 ",
                        " 喷泉模型 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "开发模型的特点如下：<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191030/1572412746545113.jpg\" title=\"1572412746545113.jpg\" alt=\"2.jpg\"/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177891",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412748",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 32,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "33",
                    "correlation_time": "0",
                    "question_id": "177892",
                    "difficulty_id": "3",
                    "question_title": "对于开发模型来说，（ &nbsp;）复用好、开发过程无间隙、节省时间。（ &nbsp;）是瀑布与原型（演化）模型结合体，适用于复杂项目。（ &nbsp;）需要用户参与，模块化要求高，不适用新技术。（请作答此空）是用例驱动、架构为中心、迭代、增量。",
                    "option": [
                        " RAD模型 ",
                        " 螺旋模型 ",
                        " RUP模型 ",
                        " 喷泉模型 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "开发模型的特点如下：<br/><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191030/1572412775322711.jpg\" title=\"1572412775322711.jpg\" alt=\"2.jpg\"/>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177892",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412776",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 33,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "34",
                    "correlation_time": "0",
                    "question_id": "177893",
                    "difficulty_id": "3",
                    "question_title": "在面向对象分析中，利用（请作答此空）表示需求，并从中提炼出中（ &nbsp;），以上两者形成（ &nbsp;），之后再进行后续的开发工作。",
                    "option": [
                        " 类图 ",
                        " 数据流图 ",
                        " 包图 ",
                        " 用例与用例图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在面向对象分析中，利用用例与用例图表示需求，从用例模型中提炼形成领域模型，用例的实现可以用交互图表示。从领域模型和用例图形成类图，用包图和类图形成体系结构图。之后再进行后续的开发工作。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177893",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412829",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 34,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "35",
                    "correlation_time": "0",
                    "question_id": "177894",
                    "difficulty_id": "3",
                    "question_title": "在面向对象分析中，利用（ &nbsp;）表示需求，并从中提炼出中（请作答此空），以上两者形成（ &nbsp;），之后再进行后续的开发工作。",
                    "option": [
                        " 领域模型 ",
                        " 架构模型 ",
                        " 体系结构图 ",
                        " 类图 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在面向对象分析中，利用用例与用例图表示需求，从用例模型中提炼形成领域模型，用例的实现可以用交互图表示。从领域模型和用例图形成类图，用包图和类图形成体系结构图。之后再进行后续的开发工作。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177894",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412855",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 35,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "36",
                    "correlation_time": "0",
                    "question_id": "177895",
                    "difficulty_id": "3",
                    "question_title": "在面向对象分析中，利用（ &nbsp;）表示需求，并从中提炼出中（ &nbsp;），以上两者形成（请作答此空），之后再进行后续的开发工作。",
                    "option": [
                        " 领域模型 ",
                        " 包图 ",
                        " 体系结构图 ",
                        " 类图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在面向对象分析中，利用用例与用例图表示需求，从用例模型中提炼形成领域模型，用例的实现可以用交互图表示。从领域模型和用例图形成类图，用包图和类图形成体系结构图。之后再进行后续的开发工作。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177895",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412882",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 36,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "37",
                    "correlation_time": "0",
                    "question_id": "177896",
                    "difficulty_id": "3",
                    "question_title": "关于集中式负载均衡的特点不正确的是（）",
                    "option": [
                        " 系统的可扩展性不强，均衡器需要记录所有计算机的负载信息。 ",
                        " 安全性较差，如果均衡器所在的计算机瘫痪，则会导致整个集群系统的瘫痪。 ",
                        " 与分布式负载均衡方式相比，实现简单。 ",
                        " 实现灵活，负载均衡器可以根据不同脚手架的特性配置不同的均衡策略。 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>与分布式负载均衡方式相比，集中式负载均衡实现简单，但也存在以下缺点：</p><p>（1）系统的可扩展性不强，均衡器需要记录所有计算机的负载信息。</p><p>（2）安全性较差，如果均衡器所在的计算机瘫痪，则会导致整个集群系统的瘫痪。</p><p>（3）实现不够灵活，负载均衡器很难根据不同脚手架的特性配置不同的均衡策略。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177896",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412918",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 37,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "38",
                    "correlation_time": "0",
                    "question_id": "177897",
                    "difficulty_id": "3",
                    "question_title": "<p>（ &nbsp;）是一种静态的故障屏蔽技术，采用前向恢复的策略；N版本程序的设计思想是用N个具有相同功能的程序同时执行一项计算，结果通过多数表决来选择。</p>",
                    "option": [
                        " N版本程序设计 ",
                        " M模冗余 ",
                        " 恢复块方法 ",
                        " 防卫式程序设计等 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>N版本程序设计是一种静态的故障屏蔽技术，采用前向恢复的策略；N版本程序的设计思想是用N个具有相同功能的程序同时执行一项计算，结果通过多数表决来选择。其中N个版本的程序必须由不同的人（小组）独立设计，使用不同的方法、不同的设计语言、不同的开发环境和工具来实现，目的是减少N个版本的程序在表决点上相关错误的概率。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177897",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412951",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 38,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "39",
                    "correlation_time": "0",
                    "question_id": "177898",
                    "difficulty_id": "3",
                    "question_title": "（请作答此空）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（ &nbsp;）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（ &nbsp;）模式最适合。",
                    "option": [
                        " 组合 ",
                        " 外观 ",
                        " 享元 ",
                        " 装饰器 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177898",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572412983",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 39,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "40",
                    "correlation_time": "0",
                    "question_id": "177899",
                    "difficulty_id": "3",
                    "question_title": "（ &nbsp;）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（请作答此空）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（ &nbsp;）模式最适合。",
                    "option": [
                        " 工厂方法 ",
                        " 享元 ",
                        " 观察者 ",
                        " 中介者 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177899",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413051",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 40,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "41",
                    "correlation_time": "0",
                    "question_id": "177900",
                    "difficulty_id": "3",
                    "question_title": "（ &nbsp;）设计模式能够动态地给一个对象添加一些额外的职责而无须修改此对象的结构；（ &nbsp;）设计模式定义一个用于创建对象的接口，让子类决定实例化哪一个类；欲使一个后端数据模型能够被多个前端用户界面连接，采用（请作答此空）模式最适合。",
                    "option": [
                        " 装饰器 ",
                        " 享元 ",
                        " 观察者 ",
                        " 中介者 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>组合(Composite)模式将对象组合成树形结构以表示“部分一整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。适用于：想表示对象的部分—整体层次结构；希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p><p>外观(Facade)模式为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。适用于：要为一个复杂子系统提供一个简单接口时，子系统往往因为不断演化而变得越来越复杂；客户程序与抽象类的实现部分之间存在着很大的依赖性；当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。</p><p>享元(Flyweight)模式运用共享技术有效地支持大量细粒度的对象。适用于：一个应用程序使用了大量的对象；完全由于使用大量的对象，造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象；应用程序不依赖于对象标识。</p><p>装饰器(Decorator)模式描述了以透明围栏来支持修饰的类和对象的关系，动态地给一个对象添加一些额外的职责，从增加功能的角度来看，装饰器模式相比生成子类更加灵活。适用于：在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责；处理那些可以撤销的职责；当不能采用生成子类的方式进行扩充时。</p><p>工厂方法(Factory Method)定义一个用于创建对象的接口，让子类决定将哪一个类实例化，使一个类的实例化延迟到其子类。适用于：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由它的子类来指定它所创建的对象的时候；当类将创建对象的职责委托给多个帮助子类中的某一个，并且希望将哪一个帮助子类是代理者这一信息局部化的时候。</p><p>观察者(Observer)模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。适用于：当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用；当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时；当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</p><p>中介者(Mediator)用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。适用于：一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解；一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象；想定制一个分布在多个类中的行为，而又不想生成太多的子类。如使一个后端数据模型能够被多个前端用户界面连接，采用此模式最合适。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177900",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413080",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 41,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "42",
                    "correlation_time": "0",
                    "question_id": "177901",
                    "difficulty_id": "3",
                    "question_title": "在uml图中，（请作答此空）展现了一组对象、接口、协作和它们之间的关系。（ &nbsp;）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（ &nbsp;）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（ &nbsp;）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "option": [
                        " 类图 ",
                        " 对象图 ",
                        " 部署图 ",
                        " 定时图 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177901",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413144",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 42,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "43",
                    "correlation_time": "0",
                    "question_id": "177902",
                    "difficulty_id": "3",
                    "question_title": "在uml图中，（ &nbsp;）展现了一组对象、接口、协作和它们之间的关系。（请作答此空）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（ &nbsp;）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（ &nbsp;）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "option": [
                        " 类图 ",
                        " 包图 ",
                        " 部署图 ",
                        " 定时图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177902",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413170",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 43,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "44",
                    "correlation_time": "0",
                    "question_id": "177903",
                    "difficulty_id": "3",
                    "question_title": "在uml图中，（ &nbsp;）展现了一组对象、接口、协作和它们之间的关系。（ &nbsp;）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（请作答此空）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（ &nbsp;）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "option": [
                        " 类图 ",
                        " 对象图 ",
                        " 部署图 ",
                        " 交互图 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177903",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413194",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 44,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "45",
                    "correlation_time": "0",
                    "question_id": "177904",
                    "difficulty_id": "3",
                    "question_title": "在uml图中，（ &nbsp;）展现了一组对象、接口、协作和它们之间的关系。（ &nbsp;）强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。（ &nbsp;）软件和硬件组件之间的物理关系以及处理节点的组件分布情况。（请作答此空）描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。",
                    "option": [
                        " 类图 ",
                        " 包图 ",
                        " 部署图 ",
                        " 交互图 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>类图展现了一组对象、接口、协作和它们之间的关系。</p><p>定时图强调消息跨越不同对象或参与者的实际时间，而不仅仅只是关心消息的相对顺序。</p><p>部署图软件和硬件组件之间的物理关系以及处理节点的组件分布情况。</p><p>包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177904",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413218",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 45,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "46",
                    "correlation_time": "0",
                    "question_id": "177905",
                    "difficulty_id": "3",
                    "question_title": "一般来说，架构可以分为三个层次。（请作答此空）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ &nbsp;）结构来实现，其中的（ &nbsp;）负责接收用户的请求，并决定应该调用哪个模型来处理。（ &nbsp;）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177905",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413272",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 46,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "47",
                    "correlation_time": "0",
                    "question_id": "177906",
                    "difficulty_id": "3",
                    "question_title": "一般来说，架构可以分为三个层次。（ &nbsp;）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（请作答此空）结构来实现，其中的（ &nbsp;）负责接收用户的请求，并决定应该调用哪个模型来处理。（ &nbsp;）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "option": [
                        " MVC ",
                        " spring ",
                        " AOP ",
                        " Hibernate "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177906",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413309",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 47,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "48",
                    "correlation_time": "0",
                    "question_id": "177907",
                    "difficulty_id": "3",
                    "question_title": "一般来说，架构可以分为三个层次。（ &nbsp;）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ &nbsp;）结构来实现，其中的（请作答此空）负责接收用户的请求，并决定应该调用哪个模型来处理。（ &nbsp;）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "option": [
                        " 模型 ",
                        " 控制器 ",
                        " 视图 ",
                        " 处理器 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177907",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413344",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 48,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "49",
                    "correlation_time": "0",
                    "question_id": "177908",
                    "difficulty_id": "3",
                    "question_title": "一般来说，架构可以分为三个层次。（ &nbsp;）层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用（ &nbsp;）结构来实现，其中的（ &nbsp;）负责接收用户的请求，并决定应该调用哪个模型来处理。（请作答此空）主要负责将业务数据存储在文件、数据库等持久化存储介质中。",
                    "option": [
                        " 表现层 ",
                        " 业务逻辑层 ",
                        " 持久层 ",
                        " 中间层 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>一般来说，架构可以分为表现层、中间层和持久层三个层次。</p><p>(1)表现层。表现层主要负责接收用户的请求，对用户的输入、输出进行检查与控制，处理客户端的一些动作，包括控制页面跳转等，并向用户呈现最终的结果信息。表现层主要采用MVC结构来实现。控制器负责接收用户的请求，并决定应该调用哪个模型来处理；然后，模型根据用户请求调用中间层进行相应的业务逻辑处理，并返回数据；最后，控制器调用相应的视图来格式化模型返回的数据，并通过视图呈现给用户。</p><p>(2)中间层。中间层主要包括业务逻辑层组件、业务逻辑层工作流、业务逻辑层实体和业务逻辑层框架四个方面。业务逻辑层组件分为接口和实现类两个部分，接口用于定义业务逻辑组件，定义业务逻辑组件必须实现的方法。通常按模块来设计业务逻辑组件，每个模块设计为一个业务逻辑组件，并且每个业务逻辑组件以多个DAO组件作为基础，从而实现对外提供系统的业务逻辑服务。业务逻辑层工作流能够实现在多个参与者之间按照某种预定义的规则传递文档、信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促进此目标的实现。业务逻辑层实体提供对业务数据及相关功能的状态编程访问，业务逻辑层实体数据可以使用具有复杂架构的数据来构建，这种数据通常来自数据库中的多个相关表。业务逻辑层实体数据可以作为业务过程的部分I/O参数传递，业务逻辑层的实体是可序列化的，以保持它们的当前状态。业务逻辑层是实现系统功能的核心组件，采用容器的形式，便于系统功能的开发、代码重用和管理。</p><p>(3)持久层。持久层主要负责数据的持久化存储，主要负责将业务数据存储在文件、数据库等持久化存储介质中。持久层的主要功能是为业务逻辑提供透明的数据访问、持久化、加载等能力。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177908",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413374",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 49,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "50",
                    "correlation_time": "0",
                    "question_id": "177909",
                    "difficulty_id": "3",
                    "question_title": "软件架构设计主要关注软件构件的（请作答此空）、属性和（ &nbsp;），并通过多种视图全面描述特定系统的架构。",
                    "option": [
                        " 功能 ",
                        " 实现 ",
                        " 组成元素 ",
                        " 结构 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "软件架构设计主要关注软件构件的结构、属性和交互作用 ，并通过多种视图全面描述特定系统的架构。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177909",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413421",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 50,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "51",
                    "correlation_time": "0",
                    "question_id": "177910",
                    "difficulty_id": "3",
                    "question_title": "<p>软件架构设计主要关注软件构件的 （ &nbsp;）、属性和（请作答此空），并通过多种视图全面描述特定系统的架构。</p>",
                    "option": [
                        " 实现方式 ",
                        " 交互作用 ",
                        " 设计方案 ",
                        " 测试方式 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>软件架构设计主要关注软件构件的结构、属性和交互作用 ，并通过多种视图全面描述特定系统的架构。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177910",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413445",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 51,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "52",
                    "correlation_time": "0",
                    "question_id": "177911",
                    "difficulty_id": "3",
                    "question_title": "某公司拟开发一个新闻系统，该系统可根据用户的注册兴趣，向用户推送其感兴趣的新闻内容，该系统应该采用（ &nbsp;）架构风格最为合适。",
                    "option": [
                        " 虚拟机 ",
                        " 基于规则的系统 ",
                        " 独立构件 ",
                        " 主程序-子程序 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "用户会注册自己的兴趣，然后系统也会把新闻按兴趣分类，如果某个新闻事件发生，可以通过事件来触发推送动作，将新闻推送给对其感兴趣的用户。这是典型独立构件中的事件驱动系统应用场景。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177911",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413472",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 52,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "53",
                    "correlation_time": "0",
                    "question_id": "177912",
                    "difficulty_id": "3",
                    "question_title": "某公司欲开发一个漫步者机器人，用来完成火星探测任务。机器人的控制者首先定义探测任务和任务之间的时序依赖性，机器人接受任务后，需要根据自身状态和外界环境进行动态调整，最终自动完成任务。针对这些需求，该机器人应该采用（ &nbsp;）架构风格最为合适。",
                    "option": [
                        " 虚拟机 ",
                        " 黑板风格 ",
                        " 面向对象风格 ",
                        " 管道-过滤器 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "根据“机器人接受任务后，需要根据自身状态和外界环境进行动态调整”这句话判断采用虚拟机风格更加合适。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177912",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413499",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 53,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "54",
                    "correlation_time": "0",
                    "question_id": "177913",
                    "difficulty_id": "3",
                    "question_title": "传统的编译器采用（请作答此空）风格。现代编译器的集成开发环境则采用（ &nbsp;）风格。",
                    "option": [
                        " 虚拟机 ",
                        " 管道过滤器风格 ",
                        " 数据共享风格 ",
                        " 进程通信 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "管道过滤器风格的完整流程为：「读端口」获取需要处理的信息，通过管道传递给过滤器链，每个过滤器自行判断是否需要对信息进行处理，一个过滤器处理完后通过管道将消息传递给下一个或多个过滤器，直到所有的过滤器全部处理完毕，通过写端口，将处理完成的信息写出到目标位置。而传统编译器（包括词法分析、语法分析、语义分析和代码生成）一个阶段的输出是另一个阶段的输入，符合管道过滤器风格的特点。集成开发环境集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，针对这种需求，采用数据共享风格架构风格比较合适。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177913",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413528",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 54,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "55",
                    "correlation_time": "0",
                    "question_id": "177914",
                    "difficulty_id": "3",
                    "question_title": "传统的编译器采用（ &nbsp;）风格。现代编译器的集成开发环境则采用（请作答此空）风格。",
                    "option": [
                        " 数据流 ",
                        " 管道过滤器风格 ",
                        " 数据共享风格 ",
                        " 进程通信 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "管道过滤器风格的完整流程为：「读端口」获取需要处理的信息，通过管道传递给过滤器链，每个过滤器自行判断是否需要对信息进行处理，一个过滤器处理完后通过管道将消息传递给下一个或多个过滤器，直到所有的过滤器全部处理完毕，通过写端口，将处理完成的信息写出到目标位置。而传统编译器（包括词法分析、语法分析、语义分析和代码生成）一个阶段的输出是另一个阶段的输入，符合管道过滤器风格的特点。集成开发环境集成了编译器、连接器、调试器等多种工具，支持代码的增量修改与处理，针对这种需求，采用数据共享风格架构风格比较合适。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177914",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413554",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 55,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "56",
                    "correlation_time": "0",
                    "question_id": "177915",
                    "difficulty_id": "3",
                    "question_title": "（ &nbsp;）架构风格的核心是资源抽象，将系统中的每一个实体抽象成一种资源。",
                    "option": [
                        " 虚拟机 ",
                        " Rest风格 ",
                        " 层次风格 ",
                        " 数据共享 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "在REST中，资源可以简单的理解为URI，表示一个网络实体。比如，/users/1/name，对应id=1的用户的属性name。既然资源是URI，就会具有以下特征：名词，代表一个资源；它对应唯一的一个资源，是资源的地址。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177915",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413604",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 56,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "57",
                    "correlation_time": "0",
                    "question_id": "177916",
                    "difficulty_id": "3",
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（请作答此空）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（ &nbsp;）最为合适；为了实现图像处理算法的灵活选择与替换，采用（ &nbsp;）最为合适。</p>",
                    "option": [
                        " 工厂模式 ",
                        " 责任链模式 ",
                        " 中介者模式 ",
                        " 命令模式 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177916",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413692",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 57,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "58",
                    "correlation_time": "0",
                    "question_id": "177917",
                    "difficulty_id": "3",
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（ &nbsp;）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（请作答此空）最为合适；为了实现图像处理算法的灵活选择与替换，采用（ ）最为合适。</p>",
                    "option": [
                        " 状态模式 ",
                        " 适配器模式 ",
                        " 组合模式 ",
                        " 单例模式 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177917",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413730",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 58,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "59",
                    "correlation_time": "0",
                    "question_id": "177918",
                    "difficulty_id": "3",
                    "question_title": "<p>某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后期处理。在软件需求分析阶段，公司的系统分析师识别出了如下3个关键需求：</p><p>图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做等行为。</p><p>图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作与照片特征之间具有较为复杂的逻辑关系。</p><p>图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算法；软件还要支持高级用户根据一定的规则添加自定义处理算法。</p><p>在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与扩展性的要求。具体来说，为了支持灵活的撤销与重做等行为，采用（ &nbsp;）最为合适；为了封装图像操作与照片特征之间的复杂逻辑关系，采用（ &nbsp;）最为合适；为了实现图像处理算法的灵活选择与替换，采用（请作答此空）最为合适。</p>",
                    "option": [
                        " 模板方法模式 ",
                        " 访问者模式 ",
                        " 策略模式 ",
                        " 观察者模式 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "本题主要考查设计模式知识。题干描述了某软件公司一款图像处理软件的需求分析与设计过程，并明确指出采用设计模式实现关键需求对系统灵活性与扩展性的要求。针对需求1，为了支持灵活的撤销与重做等行为，采用命令模式最为合适，因为命令模式可以将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，还可以对请求排队，或记录请求日志，以及支持可撤销的操作。针对需求2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；针对需求3，为了实现图像处理算法的灵活选择与替换，采用策略模式最为合适，因为策略模式定义一系列的算法，把它们封装起来，并且使它们可相互替换，使得算法可独立于使用它的客户而变化。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177918",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413757",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 59,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "60",
                    "correlation_time": "0",
                    "question_id": "177919",
                    "difficulty_id": "3",
                    "question_title": "SOA的一种实现方式, （ &nbsp;）在服务请求者和提供者之间传递数据,以及对这些数据进行转换的能力,并支持由实践中总结出来的一些模式如同步模式、异步模式等；",
                    "option": [
                        " Sharding ",
                        " ESB ",
                        " BPEL ",
                        " bind "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "ESB是SOA的一种实现方式, ESB在面向服务的架构中起到的是总线作用,将各种服务进行连接与整合，在服务请求者和提供者之间传递数据,以及对这些数据进行转换的能力,并支持由实践中总结出来的一些模式如同步模式、异步模式等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177919",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413783",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 60,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "61",
                    "correlation_time": "0",
                    "question_id": "177920",
                    "difficulty_id": "3",
                    "question_title": "在软件设计中，（请作答此空）的主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成形成软件（ &nbsp;）。而为每个具体任务选择适当的技术手段和处理方法的过程称为（ &nbsp;）。",
                    "option": [
                        " 详细设计 ",
                        " 概要设计 ",
                        " 架构设计 ",
                        " 数据结构设计 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "系统设计的主要内容包括概要设计和详细设计。概要设计又称为系统总体结构设计，它是系统开发过程中很关键的一步，其主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成软件的模块结构图，即系统结构图。在概要设计中，将系统开发的总任务分解成许多个基本的、具体的任务，为每个具体任务选择适当的技术手段和处理方法的过程称为详细设计。根据任务的不同，详细设计又可分为多种，例如，网络设计、代码设计、输入/输出设计、处理流程设计、数据存储设计、用户界面设计、安全性和可靠性设计等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177920",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413810",
                    "review_status": "2",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": null,
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 61,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "62",
                    "correlation_time": "0",
                    "question_id": "177921",
                    "difficulty_id": "3",
                    "question_title": "在软件设计中，（ &nbsp;）的主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成形成软件（请作答此空）。而为每个具体任务选择适当的技术手段和处理方法的过程称为（ &nbsp;）。",
                    "option": [
                        " 数据流图 ",
                        " 4+1视图 ",
                        " IPO图 ",
                        " 系统结构图 "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "系统设计的主要内容包括概要设计和详细设计。概要设计又称为系统总体结构设计，它是系统开发过程中很关键的一步，其主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成软件的模块结构图，即系统结构图。在概要设计中，将系统开发的总任务分解成许多个基本的、具体的任务，为每个具体任务选择适当的技术手段和处理方法的过程称为详细设计。根据任务的不同，详细设计又可分为多种，例如，网络设计、代码设计、输入/输出设计、处理流程设计、数据存储设计、用户界面设计、安全性和可靠性设计等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177921",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413838",
                    "review_status": "2",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": null,
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 62,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "63",
                    "correlation_time": "0",
                    "question_id": "177922",
                    "difficulty_id": "3",
                    "question_title": "在软件设计中，（ &nbsp;）的主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成形成软件（ &nbsp;）。而为每个具体任务选择适当的技术手段和处理方法的过程称为（请作答此空）。",
                    "option": [
                        " 详细设计 ",
                        " 概要设计 ",
                        " 架构设计 ",
                        " 数据结构设计 "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "系统设计的主要内容包括概要设计和详细设计。概要设计又称为系统总体结构设计，它是系统开发过程中很关键的一步，其主要任务是将系统的功能需求分配给软件模块，确定每个模块的功能和调用关系，形成软件的模块结构图，即系统结构图。在概要设计中，将系统开发的总任务分解成许多个基本的、具体的任务，为每个具体任务选择适当的技术手段和处理方法的过程称为详细设计。根据任务的不同，详细设计又可分为多种，例如，网络设计、代码设计、输入/输出设计、处理流程设计、数据存储设计、用户界面设计、安全性和可靠性设计等。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177922",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413867",
                    "review_status": "2",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": null,
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 63,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "64",
                    "correlation_time": "0",
                    "question_id": "177923",
                    "difficulty_id": "3",
                    "question_title": "甲公司从市场上购买乙公司生产的软件,作为甲公司计算机产品的部件。丙公司已经取得该软件的发明权,并许可乙公司生产销售该软件。下列兑法中,正确的是( &nbsp;）。",
                    "option": [
                        " 甲公司的行为构成对丙公司权利的侵犯 ",
                        " 甲公司的行为不构成对丙公司权利的侵犯 ",
                        " 甲公司的行为不侵犯丙公司的权利,乙公司侵犯了丙公司的权利 ",
                        " 甲公司的行为与乙公司的行为共同构成对丙公司权利的侵犯 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "此题中丙公司享有著作权，乙公司拥有生产与销售权，甲公司合法购买了使用权，各环节都合法，互不侵权。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177923",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413901",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 64,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "65",
                    "correlation_time": "0",
                    "question_id": "177924",
                    "difficulty_id": "3",
                    "question_title": "数字签名首先需要生成消息摘要，然后发送方用自己的私钥对报文摘要进行加密， 接收方用发送方的公钥验证真伪。生成消息摘要的目的是（请作答此空），对摘要进行加密的目的是（ &nbsp; ）。",
                    "option": [
                        " 防止窃听 ",
                        " 防止抵赖 ",
                        " 防止篡改 ",
                        " 防止重放 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>报文摘要用于对发送的报文生成一个非常小的摘要信息。这个摘要信息保证原报文的完整性，即原报文只要有一位被改变，则摘要信息就会不匹配。</p><p>用私钥对摘要做加密，不仅保证了摘要的私密性，还可以防止抵赖。因为只有匹配的公钥能够解开。也就是说，如果用某人的公钥能够解开报文，说明就是某人做的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177924",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413935",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 65,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "66",
                    "correlation_time": "0",
                    "question_id": "177925",
                    "difficulty_id": "3",
                    "question_title": "数字签名首先需要生成消息摘要，然后发送方用自己的私钥对报文摘要进行加密， 接收方用发送方的公钥验证真伪。生成消息摘要的目的是（ &nbsp;），对摘要进行加密的目的是（请作答此空）。",
                    "option": [
                        " 防止窃听 ",
                        " 防止抵赖 ",
                        " 防止篡改 ",
                        " 防止重放 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>报文摘要用于对发送的报文生成一个非常小的摘要信息。这个摘要信息保证原报文的完整性，即原报文只要有一位被改变，则摘要信息就会不匹配。</p><p>用私钥对摘要做加密，不仅保证了摘要的私密性，还可以防止抵赖。因为只有匹配的公钥能够解开。也就是说，如果用某人的公钥能够解开报文，说明就是某人做的。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177925",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413970",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 66,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "67",
                    "correlation_time": "0",
                    "question_id": "177926",
                    "difficulty_id": "3",
                    "question_title": "系统的（ &nbsp;）性能指标有系统的可靠性、系统的吞吐率（量)、系统响应时间、 系统资源 利用率、可移植性。",
                    "option": [
                        " 计算机 ",
                        " 操作系统 ",
                        " 数据库 ",
                        " web服务器 "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "操作系统的系统的性能指标有系统的可靠性、系统的吞吐率（量)、系统响应时间、 系统资源 利用率、可移植性。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177926",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572413994",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 67,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "68",
                    "correlation_time": "0",
                    "question_id": "177927",
                    "difficulty_id": "3",
                    "question_title": "假如有 3 块 80T 的硬盘，采用 RAID6 的容量是（ &nbsp;）。",
                    "option": [
                        " 40T ",
                        " 80T ",
                        " 160T ",
                        " 240T "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "RAID6的容量是(N-2)*最低容量 = (3-2)*80T = 80T。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177927",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572414022",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 68,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "69",
                    "correlation_time": "0",
                    "question_id": "177928",
                    "difficulty_id": "3",
                    "question_title": "甲、乙两个独立的网站都主要靠广告收入来支撑发展，目前都采用较高的价格销售广告。这两个网站都想通过降价争夺更多的客户和更丰厚的利润。假设这两个网站在现有策略下各可以获得1000万元的利润。如果一方单独降价，就能扩大市场份额，可以获得1500万元利润，此时，另一方的市场份额就会缩小，利润将下降到200万元。如果这两个网站同时降价，则他们都将只能得到700万元利润。这两个网站的主管各自经过独立的理性分析后决定，（ ）。",
                    "option": [
                        " 甲采取高价策略，乙采取低价策略 ",
                        " 甲采取高价策略，乙采取高价策略 ",
                        " 甲采取低价策略，乙采取低价策略 ",
                        " 甲采取低价策略，乙采取高价策略 "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>这是一个简单的博弈问题，可以将问题表示为下图所示的得益矩阵。该矩阵分别列出了A网站与B网站在各种价格策略下的利润情况。</p><p><img style=\"max-width:100%;height:auto\"  src=\"https://s2.51cto.com/images/20191030/1572414065606946.jpg\" title=\"1572414065606946.jpg\" alt=\"2.jpg\"/></p><p>站在A网站的立场上看，假设B网站采用高价策略，那么自己采用高价策略得1000万元，采用低价策略得1500万元，显然应该采用低价策略；如果B网站采用低价策略，那么自己采用高价策略得200万元，采用低价策略得700万元，显然也应该采用低价策略。</p><p>同样，站在B网站的立场上看，也是这样，不管A网站采用什么价格策略，自己都应采用低价策略为好。</p><p>由于A、B网站的主管都独立理性地分析了这种情况，因此，这个博弈的最终结果一定是两个网站都采用低价策略，各得到700万元的利润。</p><p>这是一个非合作博弈之例。参与博弈的任何一方都无法信任对方，都要防备对方抢占自己的市场份额，但也都能独立理性地分析自己的策略与得益。所以，双方博弈的结果对双方都不是理想的结果，但都认为是可以接受的。而合作双赢（都采用高价策略），却涉嫌市场垄断。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177928",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572414068",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 69,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "70",
                    "correlation_time": "0",
                    "question_id": "177929",
                    "difficulty_id": "3",
                    "question_title": "2019年我国将在多地展开5试点,届时将在人口密集区为用户提供( &nbsp;)bps的用户体验速率。",
                    "option": [
                        " 100M ",
                        " 1G ",
                        " 10G ",
                        " 1T "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "<p>5G网络是第五代移动通信网络，其峰值理可达下行10Gbps。根据各地试点表明，目前试用阶段一般在下行1Gbps左右，未来5G网络的传输速率可达下行10Gbps。</p>",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177929",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572414167",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 70,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "71",
                    "correlation_time": "0",
                    "question_id": "177930",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （请作答此空）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ &nbsp;）. The first physical DFD to be drawn is the （ &nbsp;）. The next step is to distribute data stores to different processors. Data（ &nbsp;）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ &nbsp;）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " logical DFDs and ERD ",
                        " ideal object model and analysis class model ",
                        " use case models and interface prototypes ",
                        " physical DFDs and database schema "
                    ],
                    "answer": [
                        "A"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177930",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572414204",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 71,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "72",
                    "correlation_time": "0",
                    "question_id": "177931",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ &nbsp;）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （请作答此空）. The first physical DFD to be drawn is the （ &nbsp;）. The next step is to distribute data stores to different processors. Data（ &nbsp;）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ &nbsp;）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " the database management system ",
                        " the feasibility of techniques used ",
                        " the network topology and technology ",
                        " the user interface and process methods "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177931",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572414235",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 72,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "73",
                    "correlation_time": "0",
                    "question_id": "177932",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ &nbsp;）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ &nbsp;）. The first physical DFD to be drawn is the （请作答此空）. The next step is to distribute data stores to different processors. Data（ &nbsp;）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ &nbsp;）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " context DFD ",
                        " system DFD ",
                        " network architecture DFD ",
                        " event-response DFD "
                    ],
                    "answer": [
                        "C"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177932",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572414269",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 73,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "74",
                    "correlation_time": "0",
                    "question_id": "177933",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ &nbsp;）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ &nbsp;）. The first physical DFD to be drawn is the （ &nbsp;）. The next step is to distribute data stores to different processors. Data（请作答此空）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （ &nbsp;）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " vertical partitioning and horizontal replication ",
                        " vertical replication and horizontal partitioning ",
                        " integration and distribution ",
                        " partitioning and replication "
                    ],
                    "answer": [
                        "D"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177933",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572414300",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 74,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                },
                {
                    "every_score": "1",
                    "rank": "75",
                    "correlation_time": "0",
                    "question_id": "177934",
                    "difficulty_id": "3",
                    "question_title": "An application architecture specifies the technologies to be used to implement one or more information systems. It serves as an outline for detailed design, construction, and implementation. Given the models and details, include （ &nbsp;）, we can distribute data and processes to create a general design of application architecture. The design will normally be constrained by architecture standards, project objectives, and （ &nbsp;）. The first physical DFD to be drawn is the （ &nbsp;）. The next step is to distribute data stores to different processors. Data（ &nbsp;）are two types of distributed data which most RDBMSs support. There are many distribution options used in data distribution. In the case of （请作答此空）, we should record each table as a data store on the physical DFD and connect each to the appropriate server.",
                    "option": [
                        " storing all data on a single server ",
                        " storing specific tables on different servers ",
                        " storing subsets of specific tables on different servers ",
                        " duplicating specific tables or subsets on different servers "
                    ],
                    "answer": [
                        "B"
                    ],
                    "knowledge": "系统架构设计师",
                    "analyze": "应用架构说明了实现一个或多个信息系统所使用的技术，它作为详细设计、构造和实现的一个大纲。给定了包括逻辑数据流图和实体联系图在内的模型和详细资料，我们可以分配数据和过程以创建应用架构的一个概要设计。概要设计通常会受到架构标准、项目目标和所使用技术的可行性的制约。需要绘制的第一个物理数据流图是网络架构数据流图。接下来是分配数据存储到不同的处理器。数据分区和复制是大多数关系型数据库支持的两种分布式数据形式。有许多分配方法用于数据分布。在不同服务器上存储特定表的情况下，我们应该将每个表记为物理数据流图中的一个数据存储，并将其连接到相应的服务器。",
                    "question_type": "1",
                    "material_text": "",
                    "answer_type": "1",
                    "score_rule": "",
                    "new_parent_id": "177934",
                    "sort_son": "0",
                    "creater_name": "试题账号",
                    "create_time": "1572414327",
                    "review_status": "1",
                    "parent_id": "0",
                    "first_id": "554",
                    "second_id": "227",
                    "three_id": "240",
                    "show_type_name": "单选题",
                    "examine_id": "8040",
                    "type": "3",
                    "title": "2019年11月系统架构设计师模拟题上午题",
                    "len_time": "0",
                    "submit_limit_num": "0",
                    "platform_id": "2",
                    "radio_score": "0",
                    "pass_type": "2",
                    "pass_score": "45",
                    "passrate": "60",
                    "checkbox_score": "0",
                    "judgment_score": "0",
                    "avg_score": "33",
                    "max_score": "75",
                    "exam_num": "455",
                    "person_num": "72",
                    "avg_time": "30.3",
                    "is_right": "0",
                    "chapter_name": null,
                    "single_score": 0,
                    "index": 75,
                    "belong_page": 1,
                    "like": 0,
                    "user_answer": [],
                    "answer_imgs": [],
                    "result": 0,
                    "other_type_name": "radio",
                    "show_son": 0
                }
            ],
            "summary": {
                "radio": {
                    "total_question": 75,
                    "total_score": 75,
                    "question_types": [
                        1,
                        9,
                        11
                    ]
                },
                "multiple": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        2,
                        12
                    ]
                },
                "budingxiang": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        7
                    ]
                },
                "judge": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        3,
                        13
                    ]
                },
                "cloze": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        8
                    ]
                },
                "fill": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        4
                    ]
                },
                "qanda": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        5,
                        14
                    ]
                },
                "program": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        6
                    ]
                },
                "material": {
                    "total_question": 0,
                    "total_score": 0,
                    "question_types": [
                        10
                    ]
                }
            }
        },
        "pagination": {
            "curPage": 1,
            "pageSize": 250,
            "total": 75,
            "hasNextPage": false
        },
        "totalOrder": [
            {
                "index": 1,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 2,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 3,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 4,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 5,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 6,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 7,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 8,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 9,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 10,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 11,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 12,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 13,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 14,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 15,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 16,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 17,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 18,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 19,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 20,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 21,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 22,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 23,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 24,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 25,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 26,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 27,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 28,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 29,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 30,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 31,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 32,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 33,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 34,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 35,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 36,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 37,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 38,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 39,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 40,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 41,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 42,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 43,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 44,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 45,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 46,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 47,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 48,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 49,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 50,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 51,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 52,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 53,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 54,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 55,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 56,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 57,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 58,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 59,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 60,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 61,
                "belong_page": 1,
                "is_right": null,
                "user_answer": [],
                "result": 0
            },
            {
                "index": 62,
                "belong_page": 1,
                "is_right": null,
                "user_answer": [],
                "result": 0
            },
            {
                "index": 63,
                "belong_page": 1,
                "is_right": null,
                "user_answer": [],
                "result": 0
            },
            {
                "index": 64,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 65,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 66,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 67,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 68,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 69,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 70,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 71,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 72,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 73,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 74,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            },
            {
                "index": 75,
                "belong_page": 1,
                "is_right": "0",
                "user_answer": [],
                "result": 0
            }
        ]
    }
}
